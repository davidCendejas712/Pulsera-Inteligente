
proyecto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c88c  0c100000  0c100000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00001e34  0c10c88c  0c10c88c  0001488c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .ARM.exidx    00000008  0c10e6c0  0c10e6c0  000166c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rodata.str1.4 00000004  0c10e6c8  0c10e6c8  000166c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         000004b8  0c10e6d0  0c10e6d0  000166d0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000a5eb4  0c10eb88  0c10eb88  00016b88  2**2
                  ALLOC
  6 .debug_abbrev 0000104c  00000000  00000000  00016b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003b4b  00000000  00000000  00017bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e06  00000000  00000000  0001b71f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_macinfo 000562c7  00000000  00000000  0001d525  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001049  00000000  00000000  000737ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      0000002a  00000000  00000000  00074835  2**0
                  CONTENTS, READONLY
 12 .ARM.attributes 00000032  00000000  00000000  0007485f  2**0
                  CONTENTS, READONLY
 13 .debug_loc    0000233c  00000000  00000000  00074891  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubnames 00000fb9  00000000  00000000  00076bcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_pubtypes 000003ba  00000000  00000000  00077b86  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00000220  00000000  00000000  00077f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000048  00000000  00000000  00078160  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_frame  00001e50  00000000  00000000  000781a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0c100000 <intToTwoDigitStr>:
int pasosPorMinuto;
boolean reentrar;

volatile boolean flagPb;
/*******************************************************************/
void intToTwoDigitStr(int num, char *str) {
 c100000:	e1a0c00d 	mov	ip, sp
 c100004:	e92dd800 	push	{fp, ip, lr, pc}
 c100008:	e24cb004 	sub	fp, ip, #4
 c10000c:	e24dd008 	sub	sp, sp, #8
 c100010:	e50b0010 	str	r0, [fp, #-16]
 c100014:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	str[0] = '0' + num / 10;
 c100018:	e51b3010 	ldr	r3, [fp, #-16]
 c10001c:	e59f2070 	ldr	r2, [pc, #112]	; c100094 <_code_start+0x94>
 c100020:	e0c21293 	smull	r1, r2, r3, r2
 c100024:	e1a02142 	asr	r2, r2, #2
 c100028:	e1a03fc3 	asr	r3, r3, #31
 c10002c:	e0633002 	rsb	r3, r3, r2
 c100030:	e20330ff 	and	r3, r3, #255	; 0xff
 c100034:	e2833030 	add	r3, r3, #48	; 0x30
 c100038:	e20320ff 	and	r2, r3, #255	; 0xff
 c10003c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c100040:	e5c32000 	strb	r2, [r3]
	str[1] = '0' + num % 10;
 c100044:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c100048:	e2830001 	add	r0, r3, #1
 c10004c:	e51b1010 	ldr	r1, [fp, #-16]
 c100050:	e59f303c 	ldr	r3, [pc, #60]	; c100094 <_code_start+0x94>
 c100054:	e0c32391 	smull	r2, r3, r1, r3
 c100058:	e1a02143 	asr	r2, r3, #2
 c10005c:	e1a03fc1 	asr	r3, r1, #31
 c100060:	e0632002 	rsb	r2, r3, r2
 c100064:	e1a03002 	mov	r3, r2
 c100068:	e1a03103 	lsl	r3, r3, #2
 c10006c:	e0833002 	add	r3, r3, r2
 c100070:	e1a03083 	lsl	r3, r3, #1
 c100074:	e0632001 	rsb	r2, r3, r1
 c100078:	e20230ff 	and	r3, r2, #255	; 0xff
 c10007c:	e2833030 	add	r3, r3, #48	; 0x30
 c100080:	e20330ff 	and	r3, r3, #255	; 0xff
 c100084:	e5c03000 	strb	r3, [r0]
}
 c100088:	e24bd00c 	sub	sp, fp, #12
 c10008c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100090:	e12fff1e 	bx	lr
 c100094:	66666667 	.word	0x66666667

0c100098 <intToStr>:
void intToStr(int num, char *str) {
 c100098:	e1a0c00d 	mov	ip, sp
 c10009c:	e92dd800 	push	{fp, ip, lr, pc}
 c1000a0:	e24cb004 	sub	fp, ip, #4
 c1000a4:	e24dd008 	sub	sp, sp, #8
 c1000a8:	e50b0010 	str	r0, [fp, #-16]
 c1000ac:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	str[0] = '0' + num;
 c1000b0:	e51b3010 	ldr	r3, [fp, #-16]
 c1000b4:	e20330ff 	and	r3, r3, #255	; 0xff
 c1000b8:	e2833030 	add	r3, r3, #48	; 0x30
 c1000bc:	e20320ff 	and	r2, r3, #255	; 0xff
 c1000c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1000c4:	e5c32000 	strb	r2, [r3]

}
 c1000c8:	e24bd00c 	sub	sp, fp, #12
 c1000cc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1000d0:	e12fff1e 	bx	lr

0c1000d4 <timeToString>:

// Función para convertir las partes de la estructura rtc_time_t a una cadena
void timeToString(const rtc_time_t *rtc_time, char *str) {
 c1000d4:	e1a0c00d 	mov	ip, sp
 c1000d8:	e92dd800 	push	{fp, ip, lr, pc}
 c1000dc:	e24cb004 	sub	fp, ip, #4
 c1000e0:	e24dd008 	sub	sp, sp, #8
 c1000e4:	e50b0010 	str	r0, [fp, #-16]
 c1000e8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	intToTwoDigitStr(rtc_time->hour, str);
 c1000ec:	e51b3010 	ldr	r3, [fp, #-16]
 c1000f0:	e5d33002 	ldrb	r3, [r3, #2]
 c1000f4:	e1a00003 	mov	r0, r3
 c1000f8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
 c1000fc:	ebffffbf 	bl	c100000 <intToTwoDigitStr>
	str[2] = ':';
 c100100:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c100104:	e2833002 	add	r3, r3, #2
 c100108:	e3a0203a 	mov	r2, #58	; 0x3a
 c10010c:	e5c32000 	strb	r2, [r3]
	intToTwoDigitStr(rtc_time->min, str + 3);
 c100110:	e51b3010 	ldr	r3, [fp, #-16]
 c100114:	e5d33001 	ldrb	r3, [r3, #1]
 c100118:	e1a02003 	mov	r2, r3
 c10011c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c100120:	e2833003 	add	r3, r3, #3
 c100124:	e1a00002 	mov	r0, r2
 c100128:	e1a01003 	mov	r1, r3
 c10012c:	ebffffb3 	bl	c100000 <intToTwoDigitStr>
	str[5] = ':';
 c100130:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c100134:	e2833005 	add	r3, r3, #5
 c100138:	e3a0203a 	mov	r2, #58	; 0x3a
 c10013c:	e5c32000 	strb	r2, [r3]
	intToTwoDigitStr(rtc_time->sec, str + 6);
 c100140:	e51b3010 	ldr	r3, [fp, #-16]
 c100144:	e5d33000 	ldrb	r3, [r3]
 c100148:	e1a02003 	mov	r2, r3
 c10014c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c100150:	e2833006 	add	r3, r3, #6
 c100154:	e1a00002 	mov	r0, r2
 c100158:	e1a01003 	mov	r1, r3
 c10015c:	ebffffa7 	bl	c100000 <intToTwoDigitStr>
	str[8] = '\0';
 c100160:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c100164:	e2833008 	add	r3, r3, #8
 c100168:	e3a02000 	mov	r2, #0
 c10016c:	e5c32000 	strb	r2, [r3]
}
 c100170:	e24bd00c 	sub	sp, fp, #12
 c100174:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100178:	e12fff1e 	bx	lr

0c10017c <timeToStringT>:
void timeToStringT(const  tTiempo *rtc_time, char *str) {
 c10017c:	e1a0c00d 	mov	ip, sp
 c100180:	e92dd800 	push	{fp, ip, lr, pc}
 c100184:	e24cb004 	sub	fp, ip, #4
 c100188:	e24dd008 	sub	sp, sp, #8
 c10018c:	e50b0010 	str	r0, [fp, #-16]
 c100190:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	intToTwoDigitStr(rtc_time->hora, str);
 c100194:	e51b3010 	ldr	r3, [fp, #-16]
 c100198:	e593300c 	ldr	r3, [r3, #12]
 c10019c:	e1a00003 	mov	r0, r3
 c1001a0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
 c1001a4:	ebffff95 	bl	c100000 <intToTwoDigitStr>
	str[2] = ':';
 c1001a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1001ac:	e2833002 	add	r3, r3, #2
 c1001b0:	e3a0203a 	mov	r2, #58	; 0x3a
 c1001b4:	e5c32000 	strb	r2, [r3]
	intToTwoDigitStr(rtc_time->min, str + 3);
 c1001b8:	e51b3010 	ldr	r3, [fp, #-16]
 c1001bc:	e5932008 	ldr	r2, [r3, #8]
 c1001c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1001c4:	e2833003 	add	r3, r3, #3
 c1001c8:	e1a00002 	mov	r0, r2
 c1001cc:	e1a01003 	mov	r1, r3
 c1001d0:	ebffff8a 	bl	c100000 <intToTwoDigitStr>
	str[5] = ':';
 c1001d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1001d8:	e2833005 	add	r3, r3, #5
 c1001dc:	e3a0203a 	mov	r2, #58	; 0x3a
 c1001e0:	e5c32000 	strb	r2, [r3]
	intToTwoDigitStr(rtc_time->seg, str + 6);
 c1001e4:	e51b3010 	ldr	r3, [fp, #-16]
 c1001e8:	e5932004 	ldr	r2, [r3, #4]
 c1001ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1001f0:	e2833006 	add	r3, r3, #6
 c1001f4:	e1a00002 	mov	r0, r2
 c1001f8:	e1a01003 	mov	r1, r3
 c1001fc:	ebffff7f 	bl	c100000 <intToTwoDigitStr>
	str[8] = '\0';
 c100200:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c100204:	e2833008 	add	r3, r3, #8
 c100208:	e3a02000 	mov	r2, #0
 c10020c:	e5c32000 	strb	r2, [r3]
}
 c100210:	e24bd00c 	sub	sp, fp, #12
 c100214:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100218:	e12fff1e 	bx	lr

0c10021c <timeToStringAla>:
void timeToStringAla(const tTiempo *rtc_time, char *str) {
 c10021c:	e1a0c00d 	mov	ip, sp
 c100220:	e92dd800 	push	{fp, ip, lr, pc}
 c100224:	e24cb004 	sub	fp, ip, #4
 c100228:	e24dd008 	sub	sp, sp, #8
 c10022c:	e50b0010 	str	r0, [fp, #-16]
 c100230:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	intToTwoDigitStr(rtc_time->hora, str);
 c100234:	e51b3010 	ldr	r3, [fp, #-16]
 c100238:	e593300c 	ldr	r3, [r3, #12]
 c10023c:	e1a00003 	mov	r0, r3
 c100240:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
 c100244:	ebffff6d 	bl	c100000 <intToTwoDigitStr>
	str[2] = ':';
 c100248:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10024c:	e2833002 	add	r3, r3, #2
 c100250:	e3a0203a 	mov	r2, #58	; 0x3a
 c100254:	e5c32000 	strb	r2, [r3]
	intToTwoDigitStr(rtc_time->min, str + 3);
 c100258:	e51b3010 	ldr	r3, [fp, #-16]
 c10025c:	e5932008 	ldr	r2, [r3, #8]
 c100260:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c100264:	e2833003 	add	r3, r3, #3
 c100268:	e1a00002 	mov	r0, r2
 c10026c:	e1a01003 	mov	r1, r3
 c100270:	ebffff62 	bl	c100000 <intToTwoDigitStr>
	str[5] = '\0';
 c100274:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c100278:	e2833005 	add	r3, r3, #5
 c10027c:	e3a02000 	mov	r2, #0
 c100280:	e5c32000 	strb	r2, [r3]

}
 c100284:	e24bd00c 	sub	sp, fp, #12
 c100288:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10028c:	e12fff1e 	bx	lr

0c100290 <timeToStringCr>:
void timeToStringCr(const tTiempo *rtc_time, char *str) {
 c100290:	e1a0c00d 	mov	ip, sp
 c100294:	e92dd800 	push	{fp, ip, lr, pc}
 c100298:	e24cb004 	sub	fp, ip, #4
 c10029c:	e24dd008 	sub	sp, sp, #8
 c1002a0:	e50b0010 	str	r0, [fp, #-16]
 c1002a4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	intToTwoDigitStr(rtc_time->min, str);
 c1002a8:	e51b3010 	ldr	r3, [fp, #-16]
 c1002ac:	e5933008 	ldr	r3, [r3, #8]
 c1002b0:	e1a00003 	mov	r0, r3
 c1002b4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
 c1002b8:	ebffff50 	bl	c100000 <intToTwoDigitStr>
	str[2] = ':';
 c1002bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1002c0:	e2833002 	add	r3, r3, #2
 c1002c4:	e3a0203a 	mov	r2, #58	; 0x3a
 c1002c8:	e5c32000 	strb	r2, [r3]
	intToTwoDigitStr(rtc_time->seg, str + 3);
 c1002cc:	e51b3010 	ldr	r3, [fp, #-16]
 c1002d0:	e5932004 	ldr	r2, [r3, #4]
 c1002d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1002d8:	e2833003 	add	r3, r3, #3
 c1002dc:	e1a00002 	mov	r0, r2
 c1002e0:	e1a01003 	mov	r1, r3
 c1002e4:	ebffff45 	bl	c100000 <intToTwoDigitStr>
	str[5] = '.';
 c1002e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1002ec:	e2833005 	add	r3, r3, #5
 c1002f0:	e3a0202e 	mov	r2, #46	; 0x2e
 c1002f4:	e5c32000 	strb	r2, [r3]
	intToStr(rtc_time->dec, str+6);
 c1002f8:	e51b3010 	ldr	r3, [fp, #-16]
 c1002fc:	e5932000 	ldr	r2, [r3]
 c100300:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c100304:	e2833006 	add	r3, r3, #6
 c100308:	e1a00002 	mov	r0, r2
 c10030c:	e1a01003 	mov	r1, r3
 c100310:	ebffff60 	bl	c100098 <intToStr>
	str[7] = '\0';
 c100314:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c100318:	e2833007 	add	r3, r3, #7
 c10031c:	e3a02000 	mov	r2, #0
 c100320:	e5c32000 	strb	r2, [r3]

}
 c100324:	e24bd00c 	sub	sp, fp, #12
 c100328:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10032c:	e12fff1e 	bx	lr

0c100330 <timeToStringCrD>:
void timeToStringCrD(const tTiempo *rtc_time, char *str) {
 c100330:	e1a0c00d 	mov	ip, sp
 c100334:	e92dd800 	push	{fp, ip, lr, pc}
 c100338:	e24cb004 	sub	fp, ip, #4
 c10033c:	e24dd008 	sub	sp, sp, #8
 c100340:	e50b0010 	str	r0, [fp, #-16]
 c100344:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	intToTwoDigitStr(rtc_time->dec, str + 9);
 c100348:	e51b3010 	ldr	r3, [fp, #-16]
 c10034c:	e5932000 	ldr	r2, [r3]
 c100350:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c100354:	e2833009 	add	r3, r3, #9
 c100358:	e1a00002 	mov	r0, r2
 c10035c:	e1a01003 	mov	r1, r3
 c100360:	ebffff26 	bl	c100000 <intToTwoDigitStr>
	str[11] = '\0';
 c100364:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c100368:	e283300b 	add	r3, r3, #11
 c10036c:	e3a02000 	mov	r2, #0
 c100370:	e5c32000 	strb	r2, [r3]
}
 c100374:	e24bd00c 	sub	sp, fp, #12
 c100378:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10037c:	e12fff1e 	bx	lr

0c100380 <timeToStringCrCompleto>:
void timeToStringCrCompleto(const tTiempo *rtc_time, char *str) {
 c100380:	e1a0c00d 	mov	ip, sp
 c100384:	e92dd800 	push	{fp, ip, lr, pc}
 c100388:	e24cb004 	sub	fp, ip, #4
 c10038c:	e24dd008 	sub	sp, sp, #8
 c100390:	e50b0010 	str	r0, [fp, #-16]
 c100394:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	intToTwoDigitStr(rtc_time->hora, str);
 c100398:	e51b3010 	ldr	r3, [fp, #-16]
 c10039c:	e593300c 	ldr	r3, [r3, #12]
 c1003a0:	e1a00003 	mov	r0, r3
 c1003a4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
 c1003a8:	ebffff14 	bl	c100000 <intToTwoDigitStr>
	str[2] = ':';
 c1003ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1003b0:	e2833002 	add	r3, r3, #2
 c1003b4:	e3a0203a 	mov	r2, #58	; 0x3a
 c1003b8:	e5c32000 	strb	r2, [r3]
	intToTwoDigitStr(rtc_time->min, str + 3);
 c1003bc:	e51b3010 	ldr	r3, [fp, #-16]
 c1003c0:	e5932008 	ldr	r2, [r3, #8]
 c1003c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1003c8:	e2833003 	add	r3, r3, #3
 c1003cc:	e1a00002 	mov	r0, r2
 c1003d0:	e1a01003 	mov	r1, r3
 c1003d4:	ebffff09 	bl	c100000 <intToTwoDigitStr>
	str[5] = ':';
 c1003d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1003dc:	e2833005 	add	r3, r3, #5
 c1003e0:	e3a0203a 	mov	r2, #58	; 0x3a
 c1003e4:	e5c32000 	strb	r2, [r3]
	intToTwoDigitStr(rtc_time->seg, str + 6);
 c1003e8:	e51b3010 	ldr	r3, [fp, #-16]
 c1003ec:	e5932004 	ldr	r2, [r3, #4]
 c1003f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1003f4:	e2833006 	add	r3, r3, #6
 c1003f8:	e1a00002 	mov	r0, r2
 c1003fc:	e1a01003 	mov	r1, r3
 c100400:	ebfffefe 	bl	c100000 <intToTwoDigitStr>
	str[8] = ':';
 c100404:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c100408:	e2833008 	add	r3, r3, #8
 c10040c:	e3a0203a 	mov	r2, #58	; 0x3a
 c100410:	e5c32000 	strb	r2, [r3]
	intToTwoDigitStr(rtc_time->dec, str + 9);
 c100414:	e51b3010 	ldr	r3, [fp, #-16]
 c100418:	e5932000 	ldr	r2, [r3]
 c10041c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c100420:	e2833009 	add	r3, r3, #9
 c100424:	e1a00002 	mov	r0, r2
 c100428:	e1a01003 	mov	r1, r3
 c10042c:	ebfffef3 	bl	c100000 <intToTwoDigitStr>
	str[11] = '\0';
 c100430:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c100434:	e283300b 	add	r3, r3, #11
 c100438:	e3a02000 	mov	r2, #0
 c10043c:	e5c32000 	strb	r2, [r3]

}
 c100440:	e24bd00c 	sub	sp, fp, #12
 c100444:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100448:	e12fff1e 	bx	lr

0c10044c <main>:

void main( void )
{
 c10044c:	e1a0c00d 	mov	ip, sp
 c100450:	e92dd800 	push	{fp, ip, lr, pc}
 c100454:	e24cb004 	sub	fp, ip, #4
 c100458:	e24dd040 	sub	sp, sp, #64	; 0x40
	peligro = FALSE;
 c10045c:	e59f3758 	ldr	r3, [pc, #1880]	; c100bbc <main+0x770>
 c100460:	e3a02000 	mov	r2, #0
 c100464:	e5c32000 	strb	r2, [r3]
	latidosPorMinuto=60;
 c100468:	e59f3750 	ldr	r3, [pc, #1872]	; c100bc0 <main+0x774>
 c10046c:	e3a0203c 	mov	r2, #60	; 0x3c
 c100470:	e5832000 	str	r2, [r3]
	pasosPorMinuto=60;
 c100474:	e59f3748 	ldr	r3, [pc, #1864]	; c100bc4 <main+0x778>
 c100478:	e3a0203c 	mov	r2, #60	; 0x3c
 c10047c:	e5832000 	str	r2, [r3]
	SuenaAlarma = FALSE;
 c100480:	e59f3740 	ldr	r3, [pc, #1856]	; c100bc8 <main+0x77c>
 c100484:	e3a02000 	mov	r2, #0
 c100488:	e5c32000 	strb	r2, [r3]
	reentrar = FALSE;
 c10048c:	e59f3738 	ldr	r3, [pc, #1848]	; c100bcc <main+0x780>
 c100490:	e3a02000 	mov	r2, #0
 c100494:	e5c32000 	strb	r2, [r3]
	confPintar = FALSE;
 c100498:	e59f3730 	ldr	r3, [pc, #1840]	; c100bd0 <main+0x784>
 c10049c:	e3a02000 	mov	r2, #0
 c1004a0:	e5c32000 	strb	r2, [r3]
	MostrarA = TRUE;
 c1004a4:	e59f3728 	ldr	r3, [pc, #1832]	; c100bd4 <main+0x788>
 c1004a8:	e3a02001 	mov	r2, #1
 c1004ac:	e5c32000 	strb	r2, [r3]
	pintarDirectriz= FALSE;
 c1004b0:	e59f3720 	ldr	r3, [pc, #1824]	; c100bd8 <main+0x78c>
 c1004b4:	e3a02000 	mov	r2, #0
 c1004b8:	e5c32000 	strb	r2, [r3]
	iniTemp = FALSE;
 c1004bc:	e59f3718 	ldr	r3, [pc, #1816]	; c100bdc <main+0x790>
 c1004c0:	e3a02000 	mov	r2, #0
 c1004c4:	e5c32000 	strb	r2, [r3]
	confFinish = FALSE;
 c1004c8:	e59f3710 	ldr	r3, [pc, #1808]	; c100be0 <main+0x794>
 c1004cc:	e3a02000 	mov	r2, #0
 c1004d0:	e5c32000 	strb	r2, [r3]
	conf = FALSE;
 c1004d4:	e59f3708 	ldr	r3, [pc, #1800]	; c100be4 <main+0x798>
 c1004d8:	e3a02000 	mov	r2, #0
 c1004dc:	e5c32000 	strb	r2, [r3]
	iCr = 0;
 c1004e0:	e59f3700 	ldr	r3, [pc, #1792]	; c100be8 <main+0x79c>
 c1004e4:	e3a02000 	mov	r2, #0
 c1004e8:	e5832000 	str	r2, [r3]
	ticks = 0;
 c1004ec:	e59f36f8 	ldr	r3, [pc, #1784]	; c100bec <main+0x7a0>
 c1004f0:	e3a02000 	mov	r2, #0
 c1004f4:	e5832000 	str	r2, [r3]
	MenuPrincipal = TRUE;
 c1004f8:	e59f36f0 	ldr	r3, [pc, #1776]	; c100bf0 <main+0x7a4>
 c1004fc:	e3a02001 	mov	r2, #1
 c100500:	e5c32000 	strb	r2, [r3]
	Map = FALSE;
 c100504:	e59f36e8 	ldr	r3, [pc, #1768]	; c100bf4 <main+0x7a8>
 c100508:	e3a02000 	mov	r2, #0
 c10050c:	e5c32000 	strb	r2, [r3]
	Map1time = TRUE;
 c100510:	e59f36e0 	ldr	r3, [pc, #1760]	; c100bf8 <main+0x7ac>
 c100514:	e3a02001 	mov	r2, #1
 c100518:	e5c32000 	strb	r2, [r3]
	relojMenu = FALSE;
 c10051c:	e59f36d8 	ldr	r3, [pc, #1752]	; c100bfc <main+0x7b0>
 c100520:	e3a02000 	mov	r2, #0
 c100524:	e5c32000 	strb	r2, [r3]
	alarmaFlag = FALSE;
 c100528:	e59f36d0 	ldr	r3, [pc, #1744]	; c100c00 <main+0x7b4>
 c10052c:	e3a02000 	mov	r2, #0
 c100530:	e5c32000 	strb	r2, [r3]
	pasosFlag = FALSE;
 c100534:	e59f36c8 	ldr	r3, [pc, #1736]	; c100c04 <main+0x7b8>
 c100538:	e3a02000 	mov	r2, #0
 c10053c:	e5c32000 	strb	r2, [r3]
	pulsoFlag = FALSE;
 c100540:	e59f36c0 	ldr	r3, [pc, #1728]	; c100c08 <main+0x7bc>
 c100544:	e3a02000 	mov	r2, #0
 c100548:	e5c32000 	strb	r2, [r3]
	CronoFlag = FALSE;
 c10054c:	e59f36b8 	ldr	r3, [pc, #1720]	; c100c0c <main+0x7c0>
 c100550:	e3a02000 	mov	r2, #0
 c100554:	e5c32000 	strb	r2, [r3]
	goCr = TRUE;
 c100558:	e59f36b0 	ldr	r3, [pc, #1712]	; c100c10 <main+0x7c4>
 c10055c:	e3a02001 	mov	r2, #1
 c100560:	e5c32000 	strb	r2, [r3]
	inicioCr = FALSE;
 c100564:	e59f36a8 	ldr	r3, [pc, #1704]	; c100c14 <main+0x7c8>
 c100568:	e3a02000 	mov	r2, #0
 c10056c:	e5c32000 	strb	r2, [r3]
	pauseCr = FALSE;
 c100570:	e59f36a0 	ldr	r3, [pc, #1696]	; c100c18 <main+0x7cc>
 c100574:	e3a02000 	mov	r2, #0
 c100578:	e5c32000 	strb	r2, [r3]
	tempFlag = FALSE;
 c10057c:	e59f3698 	ldr	r3, [pc, #1688]	; c100c1c <main+0x7d0>
 c100580:	e3a02000 	mov	r2, #0
 c100584:	e5c32000 	strb	r2, [r3]
	TempTermina = FALSE;
 c100588:	e59f3690 	ldr	r3, [pc, #1680]	; c100c20 <main+0x7d4>
 c10058c:	e3a02000 	mov	r2, #0
 c100590:	e5c32000 	strb	r2, [r3]
	backP = FALSE;
 c100594:	e59f3688 	ldr	r3, [pc, #1672]	; c100c24 <main+0x7d8>
 c100598:	e3a02000 	mov	r2, #0
 c10059c:	e5c32000 	strb	r2, [r3]
	backPs = FALSE;
 c1005a0:	e59f3680 	ldr	r3, [pc, #1664]	; c100c28 <main+0x7dc>
 c1005a4:	e3a02000 	mov	r2, #0
 c1005a8:	e5c32000 	strb	r2, [r3]
	backTemp = FALSE;
 c1005ac:	e59f3678 	ldr	r3, [pc, #1656]	; c100c2c <main+0x7e0>
 c1005b0:	e3a02000 	mov	r2, #0
 c1005b4:	e5c32000 	strb	r2, [r3]
	segundos = 0;
 c1005b8:	e59f3670 	ldr	r3, [pc, #1648]	; c100c30 <main+0x7e4>
 c1005bc:	e3a02000 	mov	r2, #0
 c1005c0:	e5832000 	str	r2, [r3]
	contB = 0;
 c1005c4:	e59f3668 	ldr	r3, [pc, #1640]	; c100c34 <main+0x7e8>
 c1005c8:	e3a02000 	mov	r2, #0
 c1005cc:	e5832000 	str	r2, [r3]
	contS =0;
 c1005d0:	e59f3660 	ldr	r3, [pc, #1632]	; c100c38 <main+0x7ec>
 c1005d4:	e3a02000 	mov	r2, #0
 c1005d8:	e5832000 	str	r2, [r3]
	sys_init();
 c1005dc:	eb001e72 	bl	c107fac <sys_init>
	leds_init();
 c1005e0:	eb001aa5 	bl	c10707c <leds_init>
	pbs_init();
 c1005e4:	eb001b24 	bl	c10727c <pbs_init>
	lcd_init();
 c1005e8:	eb001562 	bl	c105b78 <lcd_init>
	lcd_clear();
 c1005ec:	eb0015e4 	bl	c105d84 <lcd_clear>
	lcd_on();
 c1005f0:	eb0015c1 	bl	c105cfc <lcd_on>
	ts_init();
 c1005f4:	eb002537 	bl	c109ad8 <ts_init>
	uda1341ts_init();
 c1005f8:	eb002884 	bl	c10a810 <uda1341ts_init>
	iis_init( IIS_DMA );
 c1005fc:	e3a00001 	mov	r0, #1
 c100600:	eb00125f 	bl	c104f84 <iis_init>

	ts_on();
 c100604:	eb002545 	bl	c109b20 <ts_on>
	nPasos=0;
 c100608:	e59f362c 	ldr	r3, [pc, #1580]	; c100c3c <main+0x7f0>
 c10060c:	e3a02000 	mov	r2, #0
 c100610:	e5c32000 	strb	r2, [r3]
	nPulsos=0;
 c100614:	e59f3624 	ldr	r3, [pc, #1572]	; c100c40 <main+0x7f4>
 c100618:	e3a02000 	mov	r2, #0
 c10061c:	e5c32000 	strb	r2, [r3]

	tiempoTemp.hora = 0;
 c100620:	e59f361c 	ldr	r3, [pc, #1564]	; c100c44 <main+0x7f8>
 c100624:	e3a02000 	mov	r2, #0
 c100628:	e583200c 	str	r2, [r3, #12]
	tiempoTemp.min = 0;
 c10062c:	e59f3610 	ldr	r3, [pc, #1552]	; c100c44 <main+0x7f8>
 c100630:	e3a02000 	mov	r2, #0
 c100634:	e5832008 	str	r2, [r3, #8]
	tiempoTemp.seg = 0;
 c100638:	e59f3604 	ldr	r3, [pc, #1540]	; c100c44 <main+0x7f8>
 c10063c:	e3a02000 	mov	r2, #0
 c100640:	e5832004 	str	r2, [r3, #4]
	tiempoCr.hora = 0;
 c100644:	e59f35fc 	ldr	r3, [pc, #1532]	; c100c48 <main+0x7fc>
 c100648:	e3a02000 	mov	r2, #0
 c10064c:	e583200c 	str	r2, [r3, #12]
	tiempoCr.min = 0;
 c100650:	e59f35f0 	ldr	r3, [pc, #1520]	; c100c48 <main+0x7fc>
 c100654:	e3a02000 	mov	r2, #0
 c100658:	e5832008 	str	r2, [r3, #8]
	tiempoCr.seg = 0;
 c10065c:	e59f35e4 	ldr	r3, [pc, #1508]	; c100c48 <main+0x7fc>
 c100660:	e3a02000 	mov	r2, #0
 c100664:	e5832004 	str	r2, [r3, #4]
	tiempoCr.dec = 0;
 c100668:	e59f35d8 	ldr	r3, [pc, #1496]	; c100c48 <main+0x7fc>
 c10066c:	e3a02000 	mov	r2, #0
 c100670:	e5832000 	str	r2, [r3]
	Alarma.dec = -1;
 c100674:	e59f35d0 	ldr	r3, [pc, #1488]	; c100c4c <main+0x800>
 c100678:	e3e02000 	mvn	r2, #0
 c10067c:	e5832000 	str	r2, [r3]
	Alarma.hora = 0;
 c100680:	e59f35c4 	ldr	r3, [pc, #1476]	; c100c4c <main+0x800>
 c100684:	e3a02000 	mov	r2, #0
 c100688:	e583200c 	str	r2, [r3, #12]
	Alarma.min = 0;
 c10068c:	e59f35b8 	ldr	r3, [pc, #1464]	; c100c4c <main+0x800>
 c100690:	e3a02000 	mov	r2, #0
 c100694:	e5832008 	str	r2, [r3, #8]
	Alarma.seg = 0;
 c100698:	e59f35ac 	ldr	r3, [pc, #1452]	; c100c4c <main+0x800>
 c10069c:	e3a02000 	mov	r2, #0
 c1006a0:	e5832004 	str	r2, [r3, #4]
	contB = 0;
 c1006a4:	e59f3588 	ldr	r3, [pc, #1416]	; c100c34 <main+0x7e8>
 c1006a8:	e3a02000 	mov	r2, #0
 c1006ac:	e5832000 	str	r2, [r3]
	contS = 0;
 c1006b0:	e59f3580 	ldr	r3, [pc, #1408]	; c100c38 <main+0x7ec>
 c1006b4:	e3a02000 	mov	r2, #0
 c1006b8:	e5832000 	str	r2, [r3]
	keypad_init();
 c1006bc:	eb0014ae 	bl	c10597c <keypad_init>
	startSensorsEmulator( beatHandler, stepHandler, 60, 60 );     // Arranca el emulador de sensores, instalando beatHandler y stepHandler como RTI de los respectivos sensores
 c1006c0:	e59f0588 	ldr	r0, [pc, #1416]	; c100c50 <main+0x804>
 c1006c4:	e59f1588 	ldr	r1, [pc, #1416]	; c100c54 <main+0x808>
 c1006c8:	e3a0203c 	mov	r2, #60	; 0x3c
 c1006cc:	e3a0303c 	mov	r3, #60	; 0x3c
 c1006d0:	eb000e08 	bl	c103ef8 <startSensorsEmulator>
	lcd_putWallpaper( INICIO );
 c1006d4:	e59f057c 	ldr	r0, [pc, #1404]	; c100c58 <main+0x80c>
 c1006d8:	eb001a10 	bl	c106f20 <lcd_putWallpaper>
	lcd_draw_box( 25, 30, 295, 110, BLACK, 2 );
 c1006dc:	e3a0300f 	mov	r3, #15
 c1006e0:	e58d3000 	str	r3, [sp]
 c1006e4:	e3a03002 	mov	r3, #2
 c1006e8:	e58d3004 	str	r3, [sp, #4]
 c1006ec:	e3a00019 	mov	r0, #25
 c1006f0:	e3a0101e 	mov	r1, #30
 c1006f4:	e59f2560 	ldr	r2, [pc, #1376]	; c100c5c <main+0x810>
 c1006f8:	e3a0306e 	mov	r3, #110	; 0x6e
 c1006fc:	eb0016a2 	bl	c10618c <lcd_draw_box>
	static char *horaa = __TIME__;

	rtc_time_t rtc_time;
	rtc_time.hour = atoi(horaa);
 c100700:	e59f3558 	ldr	r3, [pc, #1368]	; c100c60 <main+0x814>
 c100704:	e5933000 	ldr	r3, [r3]
 c100708:	e1a00003 	mov	r0, r3
 c10070c:	eb002fcc 	bl	c10c644 <atoi>
 c100710:	e1a03000 	mov	r3, r0
 c100714:	e20330ff 	and	r3, r3, #255	; 0xff
 c100718:	e54b3016 	strb	r3, [fp, #-22]	; 0xffffffea
	rtc_time.min = atoi(horaa+3);
 c10071c:	e59f353c 	ldr	r3, [pc, #1340]	; c100c60 <main+0x814>
 c100720:	e5933000 	ldr	r3, [r3]
 c100724:	e2833003 	add	r3, r3, #3
 c100728:	e1a00003 	mov	r0, r3
 c10072c:	eb002fc4 	bl	c10c644 <atoi>
 c100730:	e1a03000 	mov	r3, r0
 c100734:	e20330ff 	and	r3, r3, #255	; 0xff
 c100738:	e54b3017 	strb	r3, [fp, #-23]	; 0xffffffe9
	rtc_time.sec = atoi(horaa+6);
 c10073c:	e59f351c 	ldr	r3, [pc, #1308]	; c100c60 <main+0x814>
 c100740:	e5933000 	ldr	r3, [r3]
 c100744:	e2833006 	add	r3, r3, #6
 c100748:	e1a00003 	mov	r0, r3
 c10074c:	eb002fbc 	bl	c10c644 <atoi>
 c100750:	e1a03000 	mov	r3, r0
 c100754:	e20330ff 	and	r3, r3, #255	; 0xff
 c100758:	e54b3018 	strb	r3, [fp, #-24]	; 0xffffffe8
	rtc_puttime(&rtc_time);
 c10075c:	e24b3018 	sub	r3, fp, #24
 c100760:	e1a00003 	mov	r0, r3
 c100764:	eb001bdf 	bl	c1076e8 <rtc_puttime>

	tTiempo Temporizador;

	tTiempo Aux;

	uint16 x=0, y=0;
 c100768:	e3a03000 	mov	r3, #0
 c10076c:	e14b34b2 	strh	r3, [fp, #-66]	; 0xffffffbe
 c100770:	e3a03000 	mov	r3, #0
 c100774:	e14b34b4 	strh	r3, [fp, #-68]	; 0xffffffbc
 c100778:	ea000000 	b	c100780 <main+0x334>
		if(inicioCr){
			compruebaCronometro(rtc_time);
		}


	}
 c10077c:	e1a00000 	nop			; (mov r0, r0)

	uint16 x=0, y=0;

	while( 1 )
	{
		x = 0;
 c100780:	e3a03000 	mov	r3, #0
 c100784:	e14b34b2 	strh	r3, [fp, #-66]	; 0xffffffbe
		y = 0;
 c100788:	e3a03000 	mov	r3, #0
 c10078c:	e14b34b4 	strh	r3, [fp, #-68]	; 0xffffffbc


		int seg = rtc_time.sec;
 c100790:	e55b3018 	ldrb	r3, [fp, #-24]	; 0xffffffe8
 c100794:	e50b3010 	str	r3, [fp, #-16]
		rtc_gettime( &rtc_time );
 c100798:	e24b3018 	sub	r3, fp, #24
 c10079c:	e1a00003 	mov	r0, r3
 c1007a0:	eb001c7e 	bl	c1079a0 <rtc_gettime>
		if(rtc_time.sec != seg){
 c1007a4:	e55b3018 	ldrb	r3, [fp, #-24]	; 0xffffffe8
 c1007a8:	e1a02003 	mov	r2, r3
 c1007ac:	e51b3010 	ldr	r3, [fp, #-16]
 c1007b0:	e1520003 	cmp	r2, r3
 c1007b4:	0a000004 	beq	c1007cc <main+0x380>
			segundos++;
 c1007b8:	e59f3470 	ldr	r3, [pc, #1136]	; c100c30 <main+0x7e4>
 c1007bc:	e5933000 	ldr	r3, [r3]
 c1007c0:	e2832001 	add	r2, r3, #1
 c1007c4:	e59f3464 	ldr	r3, [pc, #1124]	; c100c30 <main+0x7e4>
 c1007c8:	e5832000 	str	r2, [r3]
		}

		timeToString(&rtc_time, tiempoAct);
 c1007cc:	e24b3018 	sub	r3, fp, #24
 c1007d0:	e1a00003 	mov	r0, r3
 c1007d4:	e59f1488 	ldr	r1, [pc, #1160]	; c100c64 <main+0x818>
 c1007d8:	ebfffe3d 	bl	c1000d4 <timeToString>



		//rtc_time->sec

		if(MenuPrincipal){ 							//MENU
 c1007dc:	e59f340c 	ldr	r3, [pc, #1036]	; c100bf0 <main+0x7a4>
 c1007e0:	e5d33000 	ldrb	r3, [r3]
 c1007e4:	e3530000 	cmp	r3, #0
 c1007e8:	0a000012 	beq	c100838 <main+0x3ec>
			lcd_putWallpaper( INICIO );
 c1007ec:	e59f0464 	ldr	r0, [pc, #1124]	; c100c58 <main+0x80c>
 c1007f0:	eb0019ca 	bl	c106f20 <lcd_putWallpaper>
			lcd_draw_box( 25, 30, 295, 110, BLACK, 2 );
 c1007f4:	e3a0300f 	mov	r3, #15
 c1007f8:	e58d3000 	str	r3, [sp]
 c1007fc:	e3a03002 	mov	r3, #2
 c100800:	e58d3004 	str	r3, [sp, #4]
 c100804:	e3a00019 	mov	r0, #25
 c100808:	e3a0101e 	mov	r1, #30
 c10080c:	e59f2448 	ldr	r2, [pc, #1096]	; c100c5c <main+0x810>
 c100810:	e3a0306e 	mov	r3, #110	; 0x6e
 c100814:	eb00165c 	bl	c10618c <lcd_draw_box>
			lcd_puts_x3( 35, 40, BLACK, tiempoAct);
 c100818:	e3a00023 	mov	r0, #35	; 0x23
 c10081c:	e3a01028 	mov	r1, #40	; 0x28
 c100820:	e3a0200f 	mov	r2, #15
 c100824:	e59f3438 	ldr	r3, [pc, #1080]	; c100c64 <main+0x818>
 c100828:	eb001898 	bl	c106a90 <lcd_puts_x3>
			MenuPrincipal = FALSE;
 c10082c:	e59f33bc 	ldr	r3, [pc, #956]	; c100bf0 <main+0x7a4>
 c100830:	e3a02000 	mov	r2, #0
 c100834:	e5c32000 	strb	r2, [r3]
		}

		if(!MenuPrincipal && !Map && !relojMenu && !pasosFlag && !pulsoFlag && !SuenaAlarma && !peligro && !TempTermina){	//PONE LA HORA EN PANTALLA
 c100838:	e59f33b0 	ldr	r3, [pc, #944]	; c100bf0 <main+0x7a4>
 c10083c:	e5d33000 	ldrb	r3, [r3]
 c100840:	e3530000 	cmp	r3, #0
 c100844:	1a000020 	bne	c1008cc <main+0x480>
 c100848:	e59f33a4 	ldr	r3, [pc, #932]	; c100bf4 <main+0x7a8>
 c10084c:	e5d33000 	ldrb	r3, [r3]
 c100850:	e3530000 	cmp	r3, #0
 c100854:	1a00001c 	bne	c1008cc <main+0x480>
 c100858:	e59f339c 	ldr	r3, [pc, #924]	; c100bfc <main+0x7b0>
 c10085c:	e5d33000 	ldrb	r3, [r3]
 c100860:	e3530000 	cmp	r3, #0
 c100864:	1a000018 	bne	c1008cc <main+0x480>
 c100868:	e59f3394 	ldr	r3, [pc, #916]	; c100c04 <main+0x7b8>
 c10086c:	e5d33000 	ldrb	r3, [r3]
 c100870:	e3530000 	cmp	r3, #0
 c100874:	1a000014 	bne	c1008cc <main+0x480>
 c100878:	e59f3388 	ldr	r3, [pc, #904]	; c100c08 <main+0x7bc>
 c10087c:	e5d33000 	ldrb	r3, [r3]
 c100880:	e3530000 	cmp	r3, #0
 c100884:	1a000010 	bne	c1008cc <main+0x480>
 c100888:	e59f3338 	ldr	r3, [pc, #824]	; c100bc8 <main+0x77c>
 c10088c:	e5d33000 	ldrb	r3, [r3]
 c100890:	e3530000 	cmp	r3, #0
 c100894:	1a00000c 	bne	c1008cc <main+0x480>
 c100898:	e59f331c 	ldr	r3, [pc, #796]	; c100bbc <main+0x770>
 c10089c:	e5d33000 	ldrb	r3, [r3]
 c1008a0:	e3530000 	cmp	r3, #0
 c1008a4:	1a000008 	bne	c1008cc <main+0x480>
 c1008a8:	e59f3370 	ldr	r3, [pc, #880]	; c100c20 <main+0x7d4>
 c1008ac:	e5d33000 	ldrb	r3, [r3]
 c1008b0:	e3530000 	cmp	r3, #0
 c1008b4:	1a000004 	bne	c1008cc <main+0x480>
			lcd_puts_x3( 35, 40, BLACK, tiempoAct);
 c1008b8:	e3a00023 	mov	r0, #35	; 0x23
 c1008bc:	e3a01028 	mov	r1, #40	; 0x28
 c1008c0:	e3a0200f 	mov	r2, #15
 c1008c4:	e59f3398 	ldr	r3, [pc, #920]	; c100c64 <main+0x818>
 c1008c8:	eb001870 	bl	c106a90 <lcd_puts_x3>
		}

		if(ts_pressed() && !Map && !relojMenu && !pasosFlag && !pulsoFlag){  // REVISA SI HAY RESPUESTA TACTIL
 c1008cc:	eb0024b3 	bl	c109ba0 <ts_pressed>
 c1008d0:	e1a03000 	mov	r3, r0
 c1008d4:	e3530000 	cmp	r3, #0
 c1008d8:	0a000014 	beq	c100930 <main+0x4e4>
 c1008dc:	e59f3310 	ldr	r3, [pc, #784]	; c100bf4 <main+0x7a8>
 c1008e0:	e5d33000 	ldrb	r3, [r3]
 c1008e4:	e3530000 	cmp	r3, #0
 c1008e8:	1a000010 	bne	c100930 <main+0x4e4>
 c1008ec:	e59f3308 	ldr	r3, [pc, #776]	; c100bfc <main+0x7b0>
 c1008f0:	e5d33000 	ldrb	r3, [r3]
 c1008f4:	e3530000 	cmp	r3, #0
 c1008f8:	1a00000c 	bne	c100930 <main+0x4e4>
 c1008fc:	e59f3300 	ldr	r3, [pc, #768]	; c100c04 <main+0x7b8>
 c100900:	e5d33000 	ldrb	r3, [r3]
 c100904:	e3530000 	cmp	r3, #0
 c100908:	1a000008 	bne	c100930 <main+0x4e4>
 c10090c:	e59f32f4 	ldr	r3, [pc, #756]	; c100c08 <main+0x7bc>
 c100910:	e5d33000 	ldrb	r3, [r3]
 c100914:	e3530000 	cmp	r3, #0
 c100918:	1a000004 	bne	c100930 <main+0x4e4>
			ts_getpos( &x, &y);
 c10091c:	e24b2042 	sub	r2, fp, #66	; 0x42
 c100920:	e24b3044 	sub	r3, fp, #68	; 0x44
 c100924:	e1a00002 	mov	r0, r2
 c100928:	e1a01003 	mov	r1, r3
 c10092c:	eb002525 	bl	c109dc8 <ts_getpos>
		}

		//ts_timeout_getpos( &x, &y, 10 );

		if(((x>50 && y>30) && (x<255  && y<110)) || relojMenu)  //RELOJ
 c100930:	e15b34b2 	ldrh	r3, [fp, #-66]	; 0xffffffbe
 c100934:	e3530032 	cmp	r3, #50	; 0x32
 c100938:	9a000008 	bls	c100960 <main+0x514>
 c10093c:	e15b34b4 	ldrh	r3, [fp, #-68]	; 0xffffffbc
 c100940:	e353001e 	cmp	r3, #30
 c100944:	9a000005 	bls	c100960 <main+0x514>
 c100948:	e15b34b2 	ldrh	r3, [fp, #-66]	; 0xffffffbe
 c10094c:	e35300fe 	cmp	r3, #254	; 0xfe
 c100950:	8a000002 	bhi	c100960 <main+0x514>
 c100954:	e15b34b4 	ldrh	r3, [fp, #-68]	; 0xffffffbc
 c100958:	e353006d 	cmp	r3, #109	; 0x6d
 c10095c:	9a000003 	bls	c100970 <main+0x524>
 c100960:	e59f3294 	ldr	r3, [pc, #660]	; c100bfc <main+0x7b0>
 c100964:	e5d33000 	ldrb	r3, [r3]
 c100968:	e3530000 	cmp	r3, #0
 c10096c:	0a000003 	beq	c100980 <main+0x534>
		{
			MenuPrincipal = FALSE;
 c100970:	e59f3278 	ldr	r3, [pc, #632]	; c100bf0 <main+0x7a4>
 c100974:	e3a02000 	mov	r2, #0
 c100978:	e5c32000 	strb	r2, [r3]
			reloj();
 c10097c:	eb0004f4 	bl	c101d54 <reloj>



		}

		if( (x>0 && y>167 && x<  105&& y<240) || pasosFlag)  //PASOS
 c100980:	e15b34b2 	ldrh	r3, [fp, #-66]	; 0xffffffbe
 c100984:	e3530000 	cmp	r3, #0
 c100988:	0a000008 	beq	c1009b0 <main+0x564>
 c10098c:	e15b34b4 	ldrh	r3, [fp, #-68]	; 0xffffffbc
 c100990:	e35300a7 	cmp	r3, #167	; 0xa7
 c100994:	9a000005 	bls	c1009b0 <main+0x564>
 c100998:	e15b34b2 	ldrh	r3, [fp, #-66]	; 0xffffffbe
 c10099c:	e3530068 	cmp	r3, #104	; 0x68
 c1009a0:	8a000002 	bhi	c1009b0 <main+0x564>
 c1009a4:	e15b34b4 	ldrh	r3, [fp, #-68]	; 0xffffffbc
 c1009a8:	e35300ef 	cmp	r3, #239	; 0xef
 c1009ac:	9a000003 	bls	c1009c0 <main+0x574>
 c1009b0:	e59f324c 	ldr	r3, [pc, #588]	; c100c04 <main+0x7b8>
 c1009b4:	e5d33000 	ldrb	r3, [r3]
 c1009b8:	e3530000 	cmp	r3, #0
 c1009bc:	0a000003 	beq	c1009d0 <main+0x584>
		{
			MenuPrincipal = FALSE;
 c1009c0:	e59f3228 	ldr	r3, [pc, #552]	; c100bf0 <main+0x7a4>
 c1009c4:	e3a02000 	mov	r2, #0
 c1009c8:	e5c32000 	strb	r2, [r3]
			pasos();
 c1009cc:	eb0002bb 	bl	c1014c0 <pasos>
		}

		if( (x>106 && y>167 && x<  210&& y<240) || pulsoFlag )  // PULSO
 c1009d0:	e15b34b2 	ldrh	r3, [fp, #-66]	; 0xffffffbe
 c1009d4:	e353006a 	cmp	r3, #106	; 0x6a
 c1009d8:	9a000008 	bls	c100a00 <main+0x5b4>
 c1009dc:	e15b34b4 	ldrh	r3, [fp, #-68]	; 0xffffffbc
 c1009e0:	e35300a7 	cmp	r3, #167	; 0xa7
 c1009e4:	9a000005 	bls	c100a00 <main+0x5b4>
 c1009e8:	e15b34b2 	ldrh	r3, [fp, #-66]	; 0xffffffbe
 c1009ec:	e35300d1 	cmp	r3, #209	; 0xd1
 c1009f0:	8a000002 	bhi	c100a00 <main+0x5b4>
 c1009f4:	e15b34b4 	ldrh	r3, [fp, #-68]	; 0xffffffbc
 c1009f8:	e35300ef 	cmp	r3, #239	; 0xef
 c1009fc:	9a000003 	bls	c100a10 <main+0x5c4>
 c100a00:	e59f3200 	ldr	r3, [pc, #512]	; c100c08 <main+0x7bc>
 c100a04:	e5d33000 	ldrb	r3, [r3]
 c100a08:	e3530000 	cmp	r3, #0
 c100a0c:	0a000003 	beq	c100a20 <main+0x5d4>
		{
			MenuPrincipal = FALSE;
 c100a10:	e59f31d8 	ldr	r3, [pc, #472]	; c100bf0 <main+0x7a4>
 c100a14:	e3a02000 	mov	r2, #0
 c100a18:	e5c32000 	strb	r2, [r3]
			 pulso();
 c100a1c:	eb0003cd 	bl	c101958 <pulso>
		}
		if(( x>211 && y>167 && x< 320&& y<240 )||Map)  // MAPA
 c100a20:	e15b34b2 	ldrh	r3, [fp, #-66]	; 0xffffffbe
 c100a24:	e35300d3 	cmp	r3, #211	; 0xd3
 c100a28:	9a000009 	bls	c100a54 <main+0x608>
 c100a2c:	e15b34b4 	ldrh	r3, [fp, #-68]	; 0xffffffbc
 c100a30:	e35300a7 	cmp	r3, #167	; 0xa7
 c100a34:	9a000006 	bls	c100a54 <main+0x608>
 c100a38:	e15b24b2 	ldrh	r2, [fp, #-66]	; 0xffffffbe
 c100a3c:	e59f3224 	ldr	r3, [pc, #548]	; c100c68 <main+0x81c>
 c100a40:	e1520003 	cmp	r2, r3
 c100a44:	8a000002 	bhi	c100a54 <main+0x608>
 c100a48:	e15b34b4 	ldrh	r3, [fp, #-68]	; 0xffffffbc
 c100a4c:	e35300ef 	cmp	r3, #239	; 0xef
 c100a50:	9a000003 	bls	c100a64 <main+0x618>
 c100a54:	e59f3198 	ldr	r3, [pc, #408]	; c100bf4 <main+0x7a8>
 c100a58:	e5d33000 	ldrb	r3, [r3]
 c100a5c:	e3530000 	cmp	r3, #0
 c100a60:	0a000006 	beq	c100a80 <main+0x634>
		{
			MenuPrincipal = FALSE;
 c100a64:	e59f3184 	ldr	r3, [pc, #388]	; c100bf0 <main+0x7a4>
 c100a68:	e3a02000 	mov	r2, #0
 c100a6c:	e5c32000 	strb	r2, [r3]
			Map = TRUE;
 c100a70:	e59f317c 	ldr	r3, [pc, #380]	; c100bf4 <main+0x7a8>
 c100a74:	e3a02001 	mov	r2, #1
 c100a78:	e5c32000 	strb	r2, [r3]
			mapa();
 c100a7c:	eb0009f4 	bl	c103254 <mapa>
		}

		//funcionesPrincipales(newBeat, newStep );

		if( newBeat )
 c100a80:	e59f31e4 	ldr	r3, [pc, #484]	; c100c6c <main+0x820>
 c100a84:	e5d33000 	ldrb	r3, [r3]
 c100a88:	e20330ff 	and	r3, r3, #255	; 0xff
 c100a8c:	e3530000 	cmp	r3, #0
 c100a90:	0a000009 	beq	c100abc <main+0x670>
		{
			newBeat = FALSE;
 c100a94:	e59f31d0 	ldr	r3, [pc, #464]	; c100c6c <main+0x820>
 c100a98:	e3a02000 	mov	r2, #0
 c100a9c:	e5c32000 	strb	r2, [r3]
			led_toggle( LEFT_LED );
 c100aa0:	e3a00001 	mov	r0, #1
 c100aa4:	eb0019b6 	bl	c107184 <led_toggle>
			contB++;
 c100aa8:	e59f3184 	ldr	r3, [pc, #388]	; c100c34 <main+0x7e8>
 c100aac:	e5933000 	ldr	r3, [r3]
 c100ab0:	e2832001 	add	r2, r3, #1
 c100ab4:	e59f3178 	ldr	r3, [pc, #376]	; c100c34 <main+0x7e8>
 c100ab8:	e5832000 	str	r2, [r3]
		}
		if( newStep )
 c100abc:	e59f31ac 	ldr	r3, [pc, #428]	; c100c70 <main+0x824>
 c100ac0:	e5d33000 	ldrb	r3, [r3]
 c100ac4:	e20330ff 	and	r3, r3, #255	; 0xff
 c100ac8:	e3530000 	cmp	r3, #0
 c100acc:	0a000009 	beq	c100af8 <main+0x6ac>
		{
			newStep = FALSE;
 c100ad0:	e59f3198 	ldr	r3, [pc, #408]	; c100c70 <main+0x824>
 c100ad4:	e3a02000 	mov	r2, #0
 c100ad8:	e5c32000 	strb	r2, [r3]
			led_toggle( RIGHT_LED );
 c100adc:	e3a00002 	mov	r0, #2
 c100ae0:	eb0019a7 	bl	c107184 <led_toggle>
			contS++;
 c100ae4:	e59f314c 	ldr	r3, [pc, #332]	; c100c38 <main+0x7ec>
 c100ae8:	e5933000 	ldr	r3, [r3]
 c100aec:	e2832001 	add	r2, r3, #1
 c100af0:	e59f3140 	ldr	r3, [pc, #320]	; c100c38 <main+0x7ec>
 c100af4:	e5832000 	str	r2, [r3]
		}

		if(segundos == 10){
 c100af8:	e59f3130 	ldr	r3, [pc, #304]	; c100c30 <main+0x7e4>
 c100afc:	e5933000 	ldr	r3, [r3]
 c100b00:	e353000a 	cmp	r3, #10
 c100b04:	1a00001a 	bne	c100b74 <main+0x728>

			segundos = 0;
 c100b08:	e59f3120 	ldr	r3, [pc, #288]	; c100c30 <main+0x7e4>
 c100b0c:	e3a02000 	mov	r2, #0
 c100b10:	e5832000 	str	r2, [r3]
			latidosPorMinuto = contB*6;
 c100b14:	e59f3118 	ldr	r3, [pc, #280]	; c100c34 <main+0x7e8>
 c100b18:	e5932000 	ldr	r2, [r3]
 c100b1c:	e1a03002 	mov	r3, r2
 c100b20:	e1a03083 	lsl	r3, r3, #1
 c100b24:	e0833002 	add	r3, r3, r2
 c100b28:	e1a03083 	lsl	r3, r3, #1
 c100b2c:	e1a02003 	mov	r2, r3
 c100b30:	e59f3088 	ldr	r3, [pc, #136]	; c100bc0 <main+0x774>
 c100b34:	e5832000 	str	r2, [r3]
			pasosPorMinuto = contS*6;
 c100b38:	e59f30f8 	ldr	r3, [pc, #248]	; c100c38 <main+0x7ec>
 c100b3c:	e5932000 	ldr	r2, [r3]
 c100b40:	e1a03002 	mov	r3, r2
 c100b44:	e1a03083 	lsl	r3, r3, #1
 c100b48:	e0833002 	add	r3, r3, r2
 c100b4c:	e1a03083 	lsl	r3, r3, #1
 c100b50:	e1a02003 	mov	r2, r3
 c100b54:	e59f3068 	ldr	r3, [pc, #104]	; c100bc4 <main+0x778>
 c100b58:	e5832000 	str	r2, [r3]
			contB = 0;
 c100b5c:	e59f30d0 	ldr	r3, [pc, #208]	; c100c34 <main+0x7e8>
 c100b60:	e3a02000 	mov	r2, #0
 c100b64:	e5832000 	str	r2, [r3]
			contS = 0;
 c100b68:	e59f30c8 	ldr	r3, [pc, #200]	; c100c38 <main+0x7ec>
 c100b6c:	e3a02000 	mov	r2, #0
 c100b70:	e5832000 	str	r2, [r3]
		}

		compruebaAlarma(rtc_time);
 c100b74:	e24b3018 	sub	r3, fp, #24
 c100b78:	e8930003 	ldm	r3, {r0, r1}
 c100b7c:	eb000b4b 	bl	c1038b0 <compruebaAlarma>
		if(iniTemp){
 c100b80:	e59f3054 	ldr	r3, [pc, #84]	; c100bdc <main+0x790>
 c100b84:	e5d33000 	ldrb	r3, [r3]
 c100b88:	e3530000 	cmp	r3, #0
 c100b8c:	0a000002 	beq	c100b9c <main+0x750>
			compruebaTemporizador(rtc_time);
 c100b90:	e24b3018 	sub	r3, fp, #24
 c100b94:	e8930003 	ldm	r3, {r0, r1}
 c100b98:	eb000c34 	bl	c103c70 <compruebaTemporizador>
		}
		if(inicioCr){
 c100b9c:	e59f3070 	ldr	r3, [pc, #112]	; c100c14 <main+0x7c8>
 c100ba0:	e5d33000 	ldrb	r3, [r3]
 c100ba4:	e3530000 	cmp	r3, #0
 c100ba8:	0afffef3 	beq	c10077c <main+0x330>
			compruebaCronometro(rtc_time);
 c100bac:	e24b3018 	sub	r3, fp, #24
 c100bb0:	e8930003 	ldm	r3, {r0, r1}
 c100bb4:	eb000c08 	bl	c103bdc <compruebaCronometro>
		}


	}
 c100bb8:	eafffef0 	b	c100780 <main+0x334>
 c100bbc:	0c1ab418 	.word	0x0c1ab418
 c100bc0:	0c1ab424 	.word	0x0c1ab424
 c100bc4:	0c1ab41c 	.word	0x0c1ab41c
 c100bc8:	0c10efd0 	.word	0x0c10efd0
 c100bcc:	0c10eff8 	.word	0x0c10eff8
 c100bd0:	0c1ab43a 	.word	0x0c1ab43a
 c100bd4:	0c10efd9 	.word	0x0c10efd9
 c100bd8:	0c1ab419 	.word	0x0c1ab419
 c100bdc:	0c1ab420 	.word	0x0c1ab420
 c100be0:	0c10f010 	.word	0x0c10f010
 c100be4:	0c10efd1 	.word	0x0c10efd1
 c100be8:	0c1ab42c 	.word	0x0c1ab42c
 c100bec:	0c1ab428 	.word	0x0c1ab428
 c100bf0:	0c10e734 	.word	0x0c10e734
 c100bf4:	0c10eb8a 	.word	0x0c10eb8a
 c100bf8:	0c10e735 	.word	0x0c10e735
 c100bfc:	0c10eb8b 	.word	0x0c10eb8b
 c100c00:	0c10eb8c 	.word	0x0c10eb8c
 c100c04:	0c10eb8d 	.word	0x0c10eb8d
 c100c08:	0c10eb8e 	.word	0x0c10eb8e
 c100c0c:	0c10eb93 	.word	0x0c10eb93
 c100c10:	0c10e736 	.word	0x0c10e736
 c100c14:	0c10eff9 	.word	0x0c10eff9
 c100c18:	0c10eb94 	.word	0x0c10eb94
 c100c1c:	0c10eb95 	.word	0x0c10eb95
 c100c20:	0c1ab439 	.word	0x0c1ab439
 c100c24:	0c10eb8f 	.word	0x0c10eb8f
 c100c28:	0c10eb90 	.word	0x0c10eb90
 c100c2c:	0c10eb91 	.word	0x0c10eb91
 c100c30:	0c10eff0 	.word	0x0c10eff0
 c100c34:	0c10efd4 	.word	0x0c10efd4
 c100c38:	0c1ab414 	.word	0x0c1ab414
 c100c3c:	0c1ab41a 	.word	0x0c1ab41a
 c100c40:	0c10efd8 	.word	0x0c10efd8
 c100c44:	0c10efdc 	.word	0x0c10efdc
 c100c48:	0c10efbc 	.word	0x0c10efbc
 c100c4c:	0c10effc 	.word	0x0c10effc
 c100c50:	0c101408 	.word	0x0c101408
 c100c54:	0c101464 	.word	0x0c101464
 c100c58:	0c210000 	.word	0x0c210000
 c100c5c:	00000127 	.word	0x00000127
 c100c60:	0c10e74c 	.word	0x0c10e74c
 c100c64:	0c1ab430 	.word	0x0c1ab430
 c100c68:	0000013f 	.word	0x0000013f
 c100c6c:	0c10eb88 	.word	0x0c10eb88
 c100c70:	0c10eb89 	.word	0x0c10eb89

0c100c74 <lcd_putdouble>:
}
void lcd_putdouble(uint16 x, uint16 y, uint8 color, double d) {
 c100c74:	e1a0c00d 	mov	ip, sp
 c100c78:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c100c7c:	e24cb004 	sub	fp, ip, #4
 c100c80:	e24ddf49 	sub	sp, sp, #292	; 0x124
 c100c84:	e1a03002 	mov	r3, r2
 c100c88:	e59f2288 	ldr	r2, [pc, #648]	; c100f18 <lcd_putdouble+0x2a4>
 c100c8c:	e24bc014 	sub	ip, fp, #20
 c100c90:	e18c00b2 	strh	r0, [ip, r2]
 c100c94:	e59f2280 	ldr	r2, [pc, #640]	; c100f1c <lcd_putdouble+0x2a8>
 c100c98:	e24b0014 	sub	r0, fp, #20
 c100c9c:	e18010b2 	strh	r1, [r0, r2]
 c100ca0:	e54b3131 	strb	r3, [fp, #-305]	; 0xfffffecf
    char buf[256 + 1];
    char *p = buf + 256;
 c100ca4:	e24b3f4a 	sub	r3, fp, #296	; 0x128
 c100ca8:	e2833c01 	add	r3, r3, #256	; 0x100
 c100cac:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    uint8 c;

    *p = '\0';
 c100cb0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100cb4:	e3a02000 	mov	r2, #0
 c100cb8:	e5c32000 	strb	r2, [r3]
    // Obtener la parte fraccionaria
       int32 fractional_part = (int32)((d-(int32)d)*1000);
 c100cbc:	e99b0003 	ldmib	fp, {r0, r1}
 c100cc0:	eb002bd0 	bl	c10bc08 <__aeabi_d2iz>
 c100cc4:	e1a03000 	mov	r3, r0
 c100cc8:	e1a00003 	mov	r0, r3
 c100ccc:	eb002a1e 	bl	c10b54c <__aeabi_i2d>
 c100cd0:	e1a03000 	mov	r3, r0
 c100cd4:	e1a04001 	mov	r4, r1
 c100cd8:	e99b0003 	ldmib	fp, {r0, r1}
 c100cdc:	e1a02003 	mov	r2, r3
 c100ce0:	e1a03004 	mov	r3, r4
 c100ce4:	eb00294a 	bl	c10b214 <__aeabi_dsub>
 c100ce8:	e1a03000 	mov	r3, r0
 c100cec:	e1a04001 	mov	r4, r1
 c100cf0:	e1a00003 	mov	r0, r3
 c100cf4:	e1a01004 	mov	r1, r4
 c100cf8:	e3a02000 	mov	r2, #0
 c100cfc:	e3a03101 	mov	r3, #1073741824	; 0x40000000
 c100d00:	e283388f 	add	r3, r3, #9371648	; 0x8f0000
 c100d04:	e2833901 	add	r3, r3, #16384	; 0x4000
 c100d08:	eb002a46 	bl	c10b628 <__aeabi_dmul>
 c100d0c:	e1a03000 	mov	r3, r0
 c100d10:	e1a04001 	mov	r4, r1
 c100d14:	e1a00003 	mov	r0, r3
 c100d18:	e1a01004 	mov	r1, r4
 c100d1c:	eb002bb9 	bl	c10bc08 <__aeabi_d2iz>
 c100d20:	e1a03000 	mov	r3, r0
 c100d24:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

        // Convertir la parte fraccionaria a tres dígitos
        int i;
        for (i = 0; i < 3; ++i) {
 c100d28:	e3a03000 	mov	r3, #0
 c100d2c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 c100d30:	ea00001e 	b	c100db0 <lcd_putdouble+0x13c>
            c = fractional_part % 10;
 c100d34:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
 c100d38:	e59f31e0 	ldr	r3, [pc, #480]	; c100f20 <lcd_putdouble+0x2ac>
 c100d3c:	e0c32391 	smull	r2, r3, r1, r3
 c100d40:	e1a02143 	asr	r2, r3, #2
 c100d44:	e1a03fc1 	asr	r3, r1, #31
 c100d48:	e0632002 	rsb	r2, r3, r2
 c100d4c:	e1a03002 	mov	r3, r2
 c100d50:	e1a03103 	lsl	r3, r3, #2
 c100d54:	e0833002 	add	r3, r3, r2
 c100d58:	e1a03083 	lsl	r3, r3, #1
 c100d5c:	e0632001 	rsb	r2, r3, r1
 c100d60:	e1a03002 	mov	r3, r2
 c100d64:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
            *--p = '0' + c;
 c100d68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100d6c:	e2433001 	sub	r3, r3, #1
 c100d70:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c100d74:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
 c100d78:	e2833030 	add	r3, r3, #48	; 0x30
 c100d7c:	e20320ff 	and	r2, r3, #255	; 0xff
 c100d80:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100d84:	e5c32000 	strb	r2, [r3]

            fractional_part = fractional_part / 10;
 c100d88:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c100d8c:	e59f218c 	ldr	r2, [pc, #396]	; c100f20 <lcd_putdouble+0x2ac>
 c100d90:	e0c2c293 	smull	ip, r2, r3, r2
 c100d94:	e1a02142 	asr	r2, r2, #2
 c100d98:	e1a03fc3 	asr	r3, r3, #31
 c100d9c:	e0633002 	rsb	r3, r3, r2
 c100da0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    // Obtener la parte fraccionaria
       int32 fractional_part = (int32)((d-(int32)d)*1000);

        // Convertir la parte fraccionaria a tres dígitos
        int i;
        for (i = 0; i < 3; ++i) {
 c100da4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c100da8:	e2833001 	add	r3, r3, #1
 c100dac:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 c100db0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c100db4:	e3530002 	cmp	r3, #2
 c100db8:	daffffdd 	ble	c100d34 <lcd_putdouble+0xc0>
            *--p = '0' + c;

            fractional_part = fractional_part / 10;
        }
    // Manejar números negativos
    if (d < 0) {
 c100dbc:	e3a03001 	mov	r3, #1
 c100dc0:	e1a04003 	mov	r4, r3
 c100dc4:	e99b0003 	ldmib	fp, {r0, r1}
 c100dc8:	e3a02000 	mov	r2, #0
 c100dcc:	e3a03000 	mov	r3, #0
 c100dd0:	eb002b74 	bl	c10bba8 <__aeabi_dcmplt>
 c100dd4:	e1a03000 	mov	r3, r0
 c100dd8:	e3530000 	cmp	r3, #0
 c100ddc:	1a000001 	bne	c100de8 <lcd_putdouble+0x174>
 c100de0:	e3a03000 	mov	r3, #0
 c100de4:	e1a04003 	mov	r4, r3
 c100de8:	e20430ff 	and	r3, r4, #255	; 0xff
 c100dec:	e3530000 	cmp	r3, #0
 c100df0:	0a000010 	beq	c100e38 <lcd_putdouble+0x1c4>
        lcd_puts(x, y, color, "-");
 c100df4:	e59f311c 	ldr	r3, [pc, #284]	; c100f18 <lcd_putdouble+0x2a4>
 c100df8:	e24b0014 	sub	r0, fp, #20
 c100dfc:	e19010b3 	ldrh	r1, [r0, r3]
 c100e00:	e59f3114 	ldr	r3, [pc, #276]	; c100f1c <lcd_putdouble+0x2a8>
 c100e04:	e24bc014 	sub	ip, fp, #20
 c100e08:	e19c20b3 	ldrh	r2, [ip, r3]
 c100e0c:	e55b3131 	ldrb	r3, [fp, #-305]	; 0xfffffecf
 c100e10:	e1a00001 	mov	r0, r1
 c100e14:	e1a01002 	mov	r1, r2
 c100e18:	e1a02003 	mov	r2, r3
 c100e1c:	e59f3100 	ldr	r3, [pc, #256]	; c100f24 <lcd_putdouble+0x2b0>
 c100e20:	eb00155d 	bl	c10639c <lcd_puts>
        d *= -1;
 c100e24:	e59b3004 	ldr	r3, [fp, #4]
 c100e28:	e58b3004 	str	r3, [fp, #4]
 c100e2c:	e59b3008 	ldr	r3, [fp, #8]
 c100e30:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000
 c100e34:	e58b3008 	str	r3, [fp, #8]
    }

    *--p = '.';
 c100e38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100e3c:	e2433001 	sub	r3, r3, #1
 c100e40:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c100e44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100e48:	e3a0202e 	mov	r2, #46	; 0x2e
 c100e4c:	e5c32000 	strb	r2, [r3]
    // Convertir la parte entera del número a una cadena de caracteres
    int32 j = (int32)d;
 c100e50:	e99b0003 	ldmib	fp, {r0, r1}
 c100e54:	eb002b6b 	bl	c10bc08 <__aeabi_d2iz>
 c100e58:	e1a03000 	mov	r3, r0
 c100e5c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    do {
        c = j % 10;
 c100e60:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
 c100e64:	e59f30b4 	ldr	r3, [pc, #180]	; c100f20 <lcd_putdouble+0x2ac>
 c100e68:	e0c30391 	smull	r0, r3, r1, r3
 c100e6c:	e1a02143 	asr	r2, r3, #2
 c100e70:	e1a03fc1 	asr	r3, r1, #31
 c100e74:	e0632002 	rsb	r2, r3, r2
 c100e78:	e1a03002 	mov	r3, r2
 c100e7c:	e1a03103 	lsl	r3, r3, #2
 c100e80:	e0833002 	add	r3, r3, r2
 c100e84:	e1a03083 	lsl	r3, r3, #1
 c100e88:	e0632001 	rsb	r2, r3, r1
 c100e8c:	e1a03002 	mov	r3, r2
 c100e90:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
        *--p = '0' + c;
 c100e94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100e98:	e2433001 	sub	r3, r3, #1
 c100e9c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c100ea0:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
 c100ea4:	e2833030 	add	r3, r3, #48	; 0x30
 c100ea8:	e20320ff 	and	r2, r3, #255	; 0xff
 c100eac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100eb0:	e5c32000 	strb	r2, [r3]
        j = j / 10;
 c100eb4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c100eb8:	e59f2060 	ldr	r2, [pc, #96]	; c100f20 <lcd_putdouble+0x2ac>
 c100ebc:	e0c21293 	smull	r1, r2, r3, r2
 c100ec0:	e1a02142 	asr	r2, r2, #2
 c100ec4:	e1a03fc3 	asr	r3, r3, #31
 c100ec8:	e0633002 	rsb	r3, r3, r2
 c100ecc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    } while (j);
 c100ed0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c100ed4:	e3530000 	cmp	r3, #0
 c100ed8:	1affffe0 	bne	c100e60 <lcd_putdouble+0x1ec>

    lcd_puts(x, y, color, p);
 c100edc:	e59f3034 	ldr	r3, [pc, #52]	; c100f18 <lcd_putdouble+0x2a4>
 c100ee0:	e24b2014 	sub	r2, fp, #20
 c100ee4:	e19210b3 	ldrh	r1, [r2, r3]
 c100ee8:	e59f302c 	ldr	r3, [pc, #44]	; c100f1c <lcd_putdouble+0x2a8>
 c100eec:	e24bc014 	sub	ip, fp, #20
 c100ef0:	e19c20b3 	ldrh	r2, [ip, r3]
 c100ef4:	e55b3131 	ldrb	r3, [fp, #-305]	; 0xfffffecf
 c100ef8:	e1a00001 	mov	r0, r1
 c100efc:	e1a01002 	mov	r1, r2
 c100f00:	e1a02003 	mov	r2, r3
 c100f04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100f08:	eb001523 	bl	c10639c <lcd_puts>
}
 c100f0c:	e24bd010 	sub	sp, fp, #16
 c100f10:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c100f14:	e12fff1e 	bx	lr
 c100f18:	fffffee6 	.word	0xfffffee6
 c100f1c:	fffffee4 	.word	0xfffffee4
 c100f20:	66666667 	.word	0x66666667
 c100f24:	0c10c88c 	.word	0x0c10c88c

0c100f28 <lcd_putdouble2Decimales>:
void lcd_putdouble2Decimales(uint16 x, uint16 y, uint8 color, double d) {
 c100f28:	e1a0c00d 	mov	ip, sp
 c100f2c:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c100f30:	e24cb004 	sub	fp, ip, #4
 c100f34:	e24ddf49 	sub	sp, sp, #292	; 0x124
 c100f38:	e1a03002 	mov	r3, r2
 c100f3c:	e59f2284 	ldr	r2, [pc, #644]	; c1011c8 <lcd_putdouble2Decimales+0x2a0>
 c100f40:	e24bc014 	sub	ip, fp, #20
 c100f44:	e18c00b2 	strh	r0, [ip, r2]
 c100f48:	e59f227c 	ldr	r2, [pc, #636]	; c1011cc <lcd_putdouble2Decimales+0x2a4>
 c100f4c:	e24b0014 	sub	r0, fp, #20
 c100f50:	e18010b2 	strh	r1, [r0, r2]
 c100f54:	e54b3131 	strb	r3, [fp, #-305]	; 0xfffffecf
    char buf[256 + 1];
    char *p = buf + 256;
 c100f58:	e24b3f4a 	sub	r3, fp, #296	; 0x128
 c100f5c:	e2833c01 	add	r3, r3, #256	; 0x100
 c100f60:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    uint8 c;

    *p = '\0';
 c100f64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100f68:	e3a02000 	mov	r2, #0
 c100f6c:	e5c32000 	strb	r2, [r3]
    // Obtener la parte fraccionaria
       int32 fractional_part = (int32)((d-(int32)d)*100);
 c100f70:	e99b0003 	ldmib	fp, {r0, r1}
 c100f74:	eb002b23 	bl	c10bc08 <__aeabi_d2iz>
 c100f78:	e1a03000 	mov	r3, r0
 c100f7c:	e1a00003 	mov	r0, r3
 c100f80:	eb002971 	bl	c10b54c <__aeabi_i2d>
 c100f84:	e1a03000 	mov	r3, r0
 c100f88:	e1a04001 	mov	r4, r1
 c100f8c:	e99b0003 	ldmib	fp, {r0, r1}
 c100f90:	e1a02003 	mov	r2, r3
 c100f94:	e1a03004 	mov	r3, r4
 c100f98:	eb00289d 	bl	c10b214 <__aeabi_dsub>
 c100f9c:	e1a03000 	mov	r3, r0
 c100fa0:	e1a04001 	mov	r4, r1
 c100fa4:	e1a00003 	mov	r0, r3
 c100fa8:	e1a01004 	mov	r1, r4
 c100fac:	e3a02000 	mov	r2, #0
 c100fb0:	e3a03101 	mov	r3, #1073741824	; 0x40000000
 c100fb4:	e2833859 	add	r3, r3, #5832704	; 0x590000
 c100fb8:	eb00299a 	bl	c10b628 <__aeabi_dmul>
 c100fbc:	e1a03000 	mov	r3, r0
 c100fc0:	e1a04001 	mov	r4, r1
 c100fc4:	e1a00003 	mov	r0, r3
 c100fc8:	e1a01004 	mov	r1, r4
 c100fcc:	eb002b0d 	bl	c10bc08 <__aeabi_d2iz>
 c100fd0:	e1a03000 	mov	r3, r0
 c100fd4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

        // Convertir la parte fraccionaria a tres dígitos
        int i;
        for (i = 0; i < 2; ++i) {
 c100fd8:	e3a03000 	mov	r3, #0
 c100fdc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 c100fe0:	ea00001e 	b	c101060 <lcd_putdouble2Decimales+0x138>
            c = fractional_part % 10;
 c100fe4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
 c100fe8:	e59f31e0 	ldr	r3, [pc, #480]	; c1011d0 <lcd_putdouble2Decimales+0x2a8>
 c100fec:	e0c32391 	smull	r2, r3, r1, r3
 c100ff0:	e1a02143 	asr	r2, r3, #2
 c100ff4:	e1a03fc1 	asr	r3, r1, #31
 c100ff8:	e0632002 	rsb	r2, r3, r2
 c100ffc:	e1a03002 	mov	r3, r2
 c101000:	e1a03103 	lsl	r3, r3, #2
 c101004:	e0833002 	add	r3, r3, r2
 c101008:	e1a03083 	lsl	r3, r3, #1
 c10100c:	e0632001 	rsb	r2, r3, r1
 c101010:	e1a03002 	mov	r3, r2
 c101014:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
            *--p = '0' + c;
 c101018:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10101c:	e2433001 	sub	r3, r3, #1
 c101020:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c101024:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
 c101028:	e2833030 	add	r3, r3, #48	; 0x30
 c10102c:	e20320ff 	and	r2, r3, #255	; 0xff
 c101030:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c101034:	e5c32000 	strb	r2, [r3]

            fractional_part = fractional_part / 10;
 c101038:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c10103c:	e59f218c 	ldr	r2, [pc, #396]	; c1011d0 <lcd_putdouble2Decimales+0x2a8>
 c101040:	e0c2c293 	smull	ip, r2, r3, r2
 c101044:	e1a02142 	asr	r2, r2, #2
 c101048:	e1a03fc3 	asr	r3, r3, #31
 c10104c:	e0633002 	rsb	r3, r3, r2
 c101050:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    // Obtener la parte fraccionaria
       int32 fractional_part = (int32)((d-(int32)d)*100);

        // Convertir la parte fraccionaria a tres dígitos
        int i;
        for (i = 0; i < 2; ++i) {
 c101054:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c101058:	e2833001 	add	r3, r3, #1
 c10105c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 c101060:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c101064:	e3530001 	cmp	r3, #1
 c101068:	daffffdd 	ble	c100fe4 <lcd_putdouble2Decimales+0xbc>
            *--p = '0' + c;

            fractional_part = fractional_part / 10;
        }
    // Manejar números negativos
    if (d < 0) {
 c10106c:	e3a03001 	mov	r3, #1
 c101070:	e1a04003 	mov	r4, r3
 c101074:	e99b0003 	ldmib	fp, {r0, r1}
 c101078:	e3a02000 	mov	r2, #0
 c10107c:	e3a03000 	mov	r3, #0
 c101080:	eb002ac8 	bl	c10bba8 <__aeabi_dcmplt>
 c101084:	e1a03000 	mov	r3, r0
 c101088:	e3530000 	cmp	r3, #0
 c10108c:	1a000001 	bne	c101098 <lcd_putdouble2Decimales+0x170>
 c101090:	e3a03000 	mov	r3, #0
 c101094:	e1a04003 	mov	r4, r3
 c101098:	e20430ff 	and	r3, r4, #255	; 0xff
 c10109c:	e3530000 	cmp	r3, #0
 c1010a0:	0a000010 	beq	c1010e8 <lcd_putdouble2Decimales+0x1c0>
        lcd_puts(x, y, color, "-");
 c1010a4:	e59f311c 	ldr	r3, [pc, #284]	; c1011c8 <lcd_putdouble2Decimales+0x2a0>
 c1010a8:	e24b0014 	sub	r0, fp, #20
 c1010ac:	e19010b3 	ldrh	r1, [r0, r3]
 c1010b0:	e59f3114 	ldr	r3, [pc, #276]	; c1011cc <lcd_putdouble2Decimales+0x2a4>
 c1010b4:	e24bc014 	sub	ip, fp, #20
 c1010b8:	e19c20b3 	ldrh	r2, [ip, r3]
 c1010bc:	e55b3131 	ldrb	r3, [fp, #-305]	; 0xfffffecf
 c1010c0:	e1a00001 	mov	r0, r1
 c1010c4:	e1a01002 	mov	r1, r2
 c1010c8:	e1a02003 	mov	r2, r3
 c1010cc:	e59f3100 	ldr	r3, [pc, #256]	; c1011d4 <lcd_putdouble2Decimales+0x2ac>
 c1010d0:	eb0014b1 	bl	c10639c <lcd_puts>
        d *= -1;
 c1010d4:	e59b3004 	ldr	r3, [fp, #4]
 c1010d8:	e58b3004 	str	r3, [fp, #4]
 c1010dc:	e59b3008 	ldr	r3, [fp, #8]
 c1010e0:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000
 c1010e4:	e58b3008 	str	r3, [fp, #8]
    }

    *--p = '.';
 c1010e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1010ec:	e2433001 	sub	r3, r3, #1
 c1010f0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c1010f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1010f8:	e3a0202e 	mov	r2, #46	; 0x2e
 c1010fc:	e5c32000 	strb	r2, [r3]
    // Convertir la parte entera del número a una cadena de caracteres
    int32 j = (int32)d;
 c101100:	e99b0003 	ldmib	fp, {r0, r1}
 c101104:	eb002abf 	bl	c10bc08 <__aeabi_d2iz>
 c101108:	e1a03000 	mov	r3, r0
 c10110c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    do {
        c = j % 10;
 c101110:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
 c101114:	e59f30b4 	ldr	r3, [pc, #180]	; c1011d0 <lcd_putdouble2Decimales+0x2a8>
 c101118:	e0c30391 	smull	r0, r3, r1, r3
 c10111c:	e1a02143 	asr	r2, r3, #2
 c101120:	e1a03fc1 	asr	r3, r1, #31
 c101124:	e0632002 	rsb	r2, r3, r2
 c101128:	e1a03002 	mov	r3, r2
 c10112c:	e1a03103 	lsl	r3, r3, #2
 c101130:	e0833002 	add	r3, r3, r2
 c101134:	e1a03083 	lsl	r3, r3, #1
 c101138:	e0632001 	rsb	r2, r3, r1
 c10113c:	e1a03002 	mov	r3, r2
 c101140:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
        *--p = '0' + c;
 c101144:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c101148:	e2433001 	sub	r3, r3, #1
 c10114c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c101150:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
 c101154:	e2833030 	add	r3, r3, #48	; 0x30
 c101158:	e20320ff 	and	r2, r3, #255	; 0xff
 c10115c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c101160:	e5c32000 	strb	r2, [r3]
        j = j / 10;
 c101164:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c101168:	e59f2060 	ldr	r2, [pc, #96]	; c1011d0 <lcd_putdouble2Decimales+0x2a8>
 c10116c:	e0c21293 	smull	r1, r2, r3, r2
 c101170:	e1a02142 	asr	r2, r2, #2
 c101174:	e1a03fc3 	asr	r3, r3, #31
 c101178:	e0633002 	rsb	r3, r3, r2
 c10117c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    } while (j);
 c101180:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c101184:	e3530000 	cmp	r3, #0
 c101188:	1affffe0 	bne	c101110 <lcd_putdouble2Decimales+0x1e8>

    lcd_puts(x, y, color, p);
 c10118c:	e59f3034 	ldr	r3, [pc, #52]	; c1011c8 <lcd_putdouble2Decimales+0x2a0>
 c101190:	e24b2014 	sub	r2, fp, #20
 c101194:	e19210b3 	ldrh	r1, [r2, r3]
 c101198:	e59f302c 	ldr	r3, [pc, #44]	; c1011cc <lcd_putdouble2Decimales+0x2a4>
 c10119c:	e24bc014 	sub	ip, fp, #20
 c1011a0:	e19c20b3 	ldrh	r2, [ip, r3]
 c1011a4:	e55b3131 	ldrb	r3, [fp, #-305]	; 0xfffffecf
 c1011a8:	e1a00001 	mov	r0, r1
 c1011ac:	e1a01002 	mov	r1, r2
 c1011b0:	e1a02003 	mov	r2, r3
 c1011b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1011b8:	eb001477 	bl	c10639c <lcd_puts>
}
 c1011bc:	e24bd010 	sub	sp, fp, #16
 c1011c0:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c1011c4:	e12fff1e 	bx	lr
 c1011c8:	fffffee6 	.word	0xfffffee6
 c1011cc:	fffffee4 	.word	0xfffffee4
 c1011d0:	66666667 	.word	0x66666667
 c1011d4:	0c10c88c 	.word	0x0c10c88c

0c1011d8 <hexToDecimal>:

        integer_part = integer_part / 10;
    } while (integer_part);
    lcd_puts(x, y, color, p);
}*/
int hexToDecimal(const char *hex) {
 c1011d8:	e1a0c00d 	mov	ip, sp
 c1011dc:	e92dd800 	push	{fp, ip, lr, pc}
 c1011e0:	e24cb004 	sub	fp, ip, #4
 c1011e4:	e24dd018 	sub	sp, sp, #24
 c1011e8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
	int decimal = 0;
 c1011ec:	e3a03000 	mov	r3, #0
 c1011f0:	e50b3010 	str	r3, [fp, #-16]
	int base = 1;
 c1011f4:	e3a03001 	mov	r3, #1
 c1011f8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	int i = 0;
 c1011fc:	e3a03000 	mov	r3, #0
 c101200:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

	// Encuentra la longitud de la cadena hex
	while (hex[i] != '\0') {
 c101204:	ea000002 	b	c101214 <hexToDecimal+0x3c>
		i++;
 c101208:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10120c:	e2833001 	add	r3, r3, #1
 c101210:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	int decimal = 0;
	int base = 1;
	int i = 0;

	// Encuentra la longitud de la cadena hex
	while (hex[i] != '\0') {
 c101214:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c101218:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c10121c:	e0823003 	add	r3, r2, r3
 c101220:	e5d33000 	ldrb	r3, [r3]
 c101224:	e3530000 	cmp	r3, #0
 c101228:	1afffff6 	bne	c101208 <hexToDecimal+0x30>
		i++;
	}
	i--;
 c10122c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c101230:	e2433001 	sub	r3, r3, #1
 c101234:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

	// Convierte caracteres hexadecimales a decimal
	while (i >= 0) {
 c101238:	ea00003c 	b	c101330 <hexToDecimal+0x158>
		// Si el carácter es un dígito, conviértelo a decimal
		if (isdigit(hex[i])) {
 c10123c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c101240:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c101244:	e0823003 	add	r3, r2, r3
 c101248:	e5d33000 	ldrb	r3, [r3]
 c10124c:	e2433030 	sub	r3, r3, #48	; 0x30
 c101250:	e3530009 	cmp	r3, #9
 c101254:	8a00000a 	bhi	c101284 <hexToDecimal+0xac>
			decimal += (hex[i] - '0') * base;
 c101258:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10125c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c101260:	e0823003 	add	r3, r2, r3
 c101264:	e5d33000 	ldrb	r3, [r3]
 c101268:	e2433030 	sub	r3, r3, #48	; 0x30
 c10126c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c101270:	e0030392 	mul	r3, r2, r3
 c101274:	e51b2010 	ldr	r2, [fp, #-16]
 c101278:	e0823003 	add	r3, r2, r3
 c10127c:	e50b3010 	str	r3, [fp, #-16]
 c101280:	ea000024 	b	c101318 <hexToDecimal+0x140>
		}
		// Si el carácter es una letra (A-F o a-f), conviértelo a decimal
		else if ((hex[i] >= 'A' && hex[i] <= 'F') || (hex[i] >= 'a' && hex[i] <= 'f')) {
 c101284:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c101288:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c10128c:	e0823003 	add	r3, r2, r3
 c101290:	e5d33000 	ldrb	r3, [r3]
 c101294:	e3530040 	cmp	r3, #64	; 0x40
 c101298:	9a000005 	bls	c1012b4 <hexToDecimal+0xdc>
 c10129c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1012a0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c1012a4:	e0823003 	add	r3, r2, r3
 c1012a8:	e5d33000 	ldrb	r3, [r3]
 c1012ac:	e3530046 	cmp	r3, #70	; 0x46
 c1012b0:	9a00000b 	bls	c1012e4 <hexToDecimal+0x10c>
 c1012b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1012b8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c1012bc:	e0823003 	add	r3, r2, r3
 c1012c0:	e5d33000 	ldrb	r3, [r3]
 c1012c4:	e3530060 	cmp	r3, #96	; 0x60
 c1012c8:	9a000012 	bls	c101318 <hexToDecimal+0x140>
 c1012cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1012d0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c1012d4:	e0823003 	add	r3, r2, r3
 c1012d8:	e5d33000 	ldrb	r3, [r3]
 c1012dc:	e3530066 	cmp	r3, #102	; 0x66
 c1012e0:	8a00000c 	bhi	c101318 <hexToDecimal+0x140>
			decimal += (toupper(hex[i]) - 'A' + 10) * base;
 c1012e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1012e8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c1012ec:	e0823003 	add	r3, r2, r3
 c1012f0:	e5d33000 	ldrb	r3, [r3]
 c1012f4:	e1a00003 	mov	r0, r3
 c1012f8:	eb002d5a 	bl	c10c868 <toupper>
 c1012fc:	e1a03000 	mov	r3, r0
 c101300:	e2433037 	sub	r3, r3, #55	; 0x37
 c101304:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c101308:	e0030392 	mul	r3, r2, r3
 c10130c:	e51b2010 	ldr	r2, [fp, #-16]
 c101310:	e0823003 	add	r3, r2, r3
 c101314:	e50b3010 	str	r3, [fp, #-16]
		}

		// Actualiza la base y mueve al siguiente dígito
		base *= 16;
 c101318:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10131c:	e1a03203 	lsl	r3, r3, #4
 c101320:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		i--;
 c101324:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c101328:	e2433001 	sub	r3, r3, #1
 c10132c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
		i++;
	}
	i--;

	// Convierte caracteres hexadecimales a decimal
	while (i >= 0) {
 c101330:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c101334:	e3530000 	cmp	r3, #0
 c101338:	aaffffbf 	bge	c10123c <hexToDecimal+0x64>
		// Actualiza la base y mueve al siguiente dígito
		base *= 16;
		i--;
	}

	return decimal;
 c10133c:	e51b3010 	ldr	r3, [fp, #-16]
}
 c101340:	e1a00003 	mov	r0, r3
 c101344:	e24bd00c 	sub	sp, fp, #12
 c101348:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10134c:	e12fff1e 	bx	lr

0c101350 <hexadecimalAString>:
char* hexadecimalAString(int32 i){
 c101350:	e1a0c00d 	mov	ip, sp
 c101354:	e92dd800 	push	{fp, ip, lr, pc}
 c101358:	e24cb004 	sub	fp, ip, #4
 c10135c:	e24dd018 	sub	sp, sp, #24
 c101360:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
	char buf[8 + 1];
	char *p = buf + 8;
 c101364:	e24b301c 	sub	r3, fp, #28
 c101368:	e2833008 	add	r3, r3, #8
 c10136c:	e50b3010 	str	r3, [fp, #-16]
	uint8 c;

	*p = '\0';
 c101370:	e51b3010 	ldr	r3, [fp, #-16]
 c101374:	e3a02000 	mov	r2, #0
 c101378:	e5c32000 	strb	r2, [r3]

	do {
		c = i & 0xf;
 c10137c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c101380:	e20330ff 	and	r3, r3, #255	; 0xff
 c101384:	e203300f 	and	r3, r3, #15
 c101388:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
		if( c < 10 )
 c10138c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c101390:	e3530009 	cmp	r3, #9
 c101394:	8a000008 	bhi	c1013bc <hexadecimalAString+0x6c>
			*--p = '0' + c;
 c101398:	e51b3010 	ldr	r3, [fp, #-16]
 c10139c:	e2433001 	sub	r3, r3, #1
 c1013a0:	e50b3010 	str	r3, [fp, #-16]
 c1013a4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1013a8:	e2833030 	add	r3, r3, #48	; 0x30
 c1013ac:	e20320ff 	and	r2, r3, #255	; 0xff
 c1013b0:	e51b3010 	ldr	r3, [fp, #-16]
 c1013b4:	e5c32000 	strb	r2, [r3]
 c1013b8:	ea000007 	b	c1013dc <hexadecimalAString+0x8c>
		else
			*--p = 'a' + c - 10;
 c1013bc:	e51b3010 	ldr	r3, [fp, #-16]
 c1013c0:	e2433001 	sub	r3, r3, #1
 c1013c4:	e50b3010 	str	r3, [fp, #-16]
 c1013c8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1013cc:	e2833057 	add	r3, r3, #87	; 0x57
 c1013d0:	e20320ff 	and	r2, r3, #255	; 0xff
 c1013d4:	e51b3010 	ldr	r3, [fp, #-16]
 c1013d8:	e5c32000 	strb	r2, [r3]
		i = i >> 4;
 c1013dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1013e0:	e1a03243 	asr	r3, r3, #4
 c1013e4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
	} while( i );
 c1013e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1013ec:	e3530000 	cmp	r3, #0
 c1013f0:	1affffe1 	bne	c10137c <hexadecimalAString+0x2c>
	return p;
 c1013f4:	e51b3010 	ldr	r3, [fp, #-16]
}
 c1013f8:	e1a00003 	mov	r0, r3
 c1013fc:	e24bd00c 	sub	sp, fp, #12
 c101400:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101404:	e12fff1e 	bx	lr

0c101408 <beatHandler>:

void beatHandler( void )
{
 c101408:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10140c:	e1a0c00d 	mov	ip, sp
 c101410:	e92dd80c 	push	{r2, r3, fp, ip, lr, pc}
 c101414:	e24cb004 	sub	fp, ip, #4
	newBeat = TRUE;
 c101418:	e59f3038 	ldr	r3, [pc, #56]	; c101458 <beatHandler+0x50>
 c10141c:	e3a02001 	mov	r2, #1
 c101420:	e5c32000 	strb	r2, [r3]
	nPulsos = nPulsos + 1;
 c101424:	e59f3030 	ldr	r3, [pc, #48]	; c10145c <beatHandler+0x54>
 c101428:	e5d33000 	ldrb	r3, [r3]
 c10142c:	e2833001 	add	r3, r3, #1
 c101430:	e20320ff 	and	r2, r3, #255	; 0xff
 c101434:	e59f3020 	ldr	r3, [pc, #32]	; c10145c <beatHandler+0x54>
 c101438:	e5c32000 	strb	r2, [r3]
	I_ISPC  = BIT_BEATEMULATOR;
 c10143c:	e59f301c 	ldr	r3, [pc, #28]	; c101460 <beatHandler+0x58>
 c101440:	e3a02b01 	mov	r2, #1024	; 0x400
 c101444:	e5832000 	str	r2, [r3]
}
 c101448:	e24bd014 	sub	sp, fp, #20
 c10144c:	e89d680c 	ldm	sp, {r2, r3, fp, sp, lr}
 c101450:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c101454:	e25ef004 	subs	pc, lr, #4
 c101458:	0c10eb88 	.word	0x0c10eb88
 c10145c:	0c10efd8 	.word	0x0c10efd8
 c101460:	01e00024 	.word	0x01e00024

0c101464 <stepHandler>:

void stepHandler( void )
{
 c101464:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101468:	e1a0c00d 	mov	ip, sp
 c10146c:	e92dd80c 	push	{r2, r3, fp, ip, lr, pc}
 c101470:	e24cb004 	sub	fp, ip, #4

	newStep = TRUE;
 c101474:	e59f3038 	ldr	r3, [pc, #56]	; c1014b4 <stepHandler+0x50>
 c101478:	e3a02001 	mov	r2, #1
 c10147c:	e5c32000 	strb	r2, [r3]
	nPasos = nPasos + 1;
 c101480:	e59f3030 	ldr	r3, [pc, #48]	; c1014b8 <stepHandler+0x54>
 c101484:	e5d33000 	ldrb	r3, [r3]
 c101488:	e2833001 	add	r3, r3, #1
 c10148c:	e20320ff 	and	r2, r3, #255	; 0xff
 c101490:	e59f3020 	ldr	r3, [pc, #32]	; c1014b8 <stepHandler+0x54>
 c101494:	e5c32000 	strb	r2, [r3]
	I_ISPC  = BIT_STEPEMULATOR;
 c101498:	e59f301c 	ldr	r3, [pc, #28]	; c1014bc <stepHandler+0x58>
 c10149c:	e3a02b02 	mov	r2, #2048	; 0x800
 c1014a0:	e5832000 	str	r2, [r3]
}
 c1014a4:	e24bd014 	sub	sp, fp, #20
 c1014a8:	e89d680c 	ldm	sp, {r2, r3, fp, sp, lr}
 c1014ac:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c1014b0:	e25ef004 	subs	pc, lr, #4
 c1014b4:	0c10eb89 	.word	0x0c10eb89
 c1014b8:	0c1ab41a 	.word	0x0c1ab41a
 c1014bc:	01e00024 	.word	0x01e00024

0c1014c0 <pasos>:

void pasos(void){
 c1014c0:	e1a0c00d 	mov	ip, sp
 c1014c4:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c1014c8:	e24cb004 	sub	fp, ip, #4
 c1014cc:	e24dd01c 	sub	sp, sp, #28
	uint16 x, y;
	uint8 metros;
	uint8 ritmo;
	uint8 ritmoMax = 0;
 c1014d0:	e3a03000 	mov	r3, #0
 c1014d4:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb



	if (!pasosFlag){        //si viene por tactil
 c1014d8:	e59f3434 	ldr	r3, [pc, #1076]	; c101914 <pasos+0x454>
 c1014dc:	e5d33000 	ldrb	r3, [r3]
 c1014e0:	e3530000 	cmp	r3, #0
 c1014e4:	1a000041 	bne	c1015f0 <pasos+0x130>
		pasosFlag = TRUE;
 c1014e8:	e59f3424 	ldr	r3, [pc, #1060]	; c101914 <pasos+0x454>
 c1014ec:	e3a02001 	mov	r2, #1
 c1014f0:	e5c32000 	strb	r2, [r3]
		lcd_clear();
 c1014f4:	eb001222 	bl	c105d84 <lcd_clear>
		//recuadro back

		lcd_puts( 5, 8, BLACK, "back" );
 c1014f8:	e3a00005 	mov	r0, #5
 c1014fc:	e3a01008 	mov	r1, #8
 c101500:	e3a0200f 	mov	r2, #15
 c101504:	e59f340c 	ldr	r3, [pc, #1036]	; c101918 <pasos+0x458>
 c101508:	eb0013a3 	bl	c10639c <lcd_puts>
		lcd_draw_box( 0, 0, 45,30, BLACK, 2 );
 c10150c:	e3a0300f 	mov	r3, #15
 c101510:	e58d3000 	str	r3, [sp]
 c101514:	e3a03002 	mov	r3, #2
 c101518:	e58d3004 	str	r3, [sp, #4]
 c10151c:	e3a00000 	mov	r0, #0
 c101520:	e3a01000 	mov	r1, #0
 c101524:	e3a0202d 	mov	r2, #45	; 0x2d
 c101528:	e3a0301e 	mov	r3, #30
 c10152c:	eb001316 	bl	c10618c <lcd_draw_box>

		//recuadro central
		lcd_draw_box( 25, 45, 300, 180, BLACK, 2 );
 c101530:	e3a0300f 	mov	r3, #15
 c101534:	e58d3000 	str	r3, [sp]
 c101538:	e3a03002 	mov	r3, #2
 c10153c:	e58d3004 	str	r3, [sp, #4]
 c101540:	e3a00019 	mov	r0, #25
 c101544:	e3a0102d 	mov	r1, #45	; 0x2d
 c101548:	e3a02f4b 	mov	r2, #300	; 0x12c
 c10154c:	e3a030b4 	mov	r3, #180	; 0xb4
 c101550:	eb00130d 	bl	c10618c <lcd_draw_box>
		lcd_puts( 35, 55, BLACK, "Pasos totales: ");
 c101554:	e3a00023 	mov	r0, #35	; 0x23
 c101558:	e3a01037 	mov	r1, #55	; 0x37
 c10155c:	e3a0200f 	mov	r2, #15
 c101560:	e59f33b4 	ldr	r3, [pc, #948]	; c10191c <pasos+0x45c>
 c101564:	eb00138c 	bl	c10639c <lcd_puts>
		lcd_puts( 35, 80, BLACK, "Distancia recorrida (m): ");
 c101568:	e3a00023 	mov	r0, #35	; 0x23
 c10156c:	e3a01050 	mov	r1, #80	; 0x50
 c101570:	e3a0200f 	mov	r2, #15
 c101574:	e59f33a4 	ldr	r3, [pc, #932]	; c101920 <pasos+0x460>
 c101578:	eb001387 	bl	c10639c <lcd_puts>
		lcd_puts( 35, 105, BLACK, "Velocidad (m/s): ");
 c10157c:	e3a00023 	mov	r0, #35	; 0x23
 c101580:	e3a01069 	mov	r1, #105	; 0x69
 c101584:	e3a0200f 	mov	r2, #15
 c101588:	e59f3394 	ldr	r3, [pc, #916]	; c101924 <pasos+0x464>
 c10158c:	eb001382 	bl	c10639c <lcd_puts>
		lcd_puts( 35, 130, BLACK, "Ritmo actual (pasos/min): ");
 c101590:	e3a00023 	mov	r0, #35	; 0x23
 c101594:	e3a01082 	mov	r1, #130	; 0x82
 c101598:	e3a0200f 	mov	r2, #15
 c10159c:	e59f3384 	ldr	r3, [pc, #900]	; c101928 <pasos+0x468>
 c1015a0:	eb00137d 	bl	c10639c <lcd_puts>
		lcd_puts( 35, 155, BLACK, "Ritmo maximo (pasos/min): ");
 c1015a4:	e3a00023 	mov	r0, #35	; 0x23
 c1015a8:	e3a0109b 	mov	r1, #155	; 0x9b
 c1015ac:	e3a0200f 	mov	r2, #15
 c1015b0:	e59f3374 	ldr	r3, [pc, #884]	; c10192c <pasos+0x46c>
 c1015b4:	eb001378 	bl	c10639c <lcd_puts>

		//recuadro reset
		lcd_puts_x2( 120, 195, BLACK, "RESET" );
 c1015b8:	e3a00078 	mov	r0, #120	; 0x78
 c1015bc:	e3a010c3 	mov	r1, #195	; 0xc3
 c1015c0:	e3a0200f 	mov	r2, #15
 c1015c4:	e59f3364 	ldr	r3, [pc, #868]	; c101930 <pasos+0x470>
 c1015c8:	eb0014f2 	bl	c106998 <lcd_puts_x2>
		lcd_draw_box( 115, 195, 205, 225, BLACK, 2 );
 c1015cc:	e3a0300f 	mov	r3, #15
 c1015d0:	e58d3000 	str	r3, [sp]
 c1015d4:	e3a03002 	mov	r3, #2
 c1015d8:	e58d3004 	str	r3, [sp, #4]
 c1015dc:	e3a00073 	mov	r0, #115	; 0x73
 c1015e0:	e3a010c3 	mov	r1, #195	; 0xc3
 c1015e4:	e3a020cd 	mov	r2, #205	; 0xcd
 c1015e8:	e3a030e1 	mov	r3, #225	; 0xe1
 c1015ec:	eb0012e6 	bl	c10618c <lcd_draw_box>
	}
	if(!backP){
 c1015f0:	e59f333c 	ldr	r3, [pc, #828]	; c101934 <pasos+0x474>
 c1015f4:	e5d33000 	ldrb	r3, [r3]
 c1015f8:	e3530000 	cmp	r3, #0
 c1015fc:	1a0000b7 	bne	c1018e0 <pasos+0x420>
		if(pasosPorMinuto < 10 && segundos == 0){
 c101600:	e59f3330 	ldr	r3, [pc, #816]	; c101938 <pasos+0x478>
 c101604:	e5933000 	ldr	r3, [r3]
 c101608:	e3530009 	cmp	r3, #9
 c10160c:	ca000008 	bgt	c101634 <pasos+0x174>
 c101610:	e59f3324 	ldr	r3, [pc, #804]	; c10193c <pasos+0x47c>
 c101614:	e5933000 	ldr	r3, [r3]
 c101618:	e3530000 	cmp	r3, #0
 c10161c:	1a000004 	bne	c101634 <pasos+0x174>
			lcd_clear_area( 278, 48,305, 177);
 c101620:	e59f0318 	ldr	r0, [pc, #792]	; c101940 <pasos+0x480>
 c101624:	e3a01030 	mov	r1, #48	; 0x30
 c101628:	e59f2314 	ldr	r2, [pc, #788]	; c101944 <pasos+0x484>
 c10162c:	e3a030b1 	mov	r3, #177	; 0xb1
 c101630:	eb0011fb 	bl	c105e24 <lcd_clear_area>

		}
		lcd_putint( 240, 55, BLACK, nPasos);
 c101634:	e59f330c 	ldr	r3, [pc, #780]	; c101948 <pasos+0x488>
 c101638:	e5d33000 	ldrb	r3, [r3]
 c10163c:	e3a000f0 	mov	r0, #240	; 0xf0
 c101640:	e3a01037 	mov	r1, #55	; 0x37
 c101644:	e3a0200f 	mov	r2, #15
 c101648:	eb001391 	bl	c106494 <lcd_putint>
		metrosRecorridos = (nPasos*(int32)mPorPasos);
 c10164c:	e59f32f4 	ldr	r3, [pc, #756]	; c101948 <pasos+0x488>
 c101650:	e5d33000 	ldrb	r3, [r3]
 c101654:	e1a02003 	mov	r2, r3
 c101658:	e1a03002 	mov	r3, r2
 c10165c:	e1a03083 	lsl	r3, r3, #1
 c101660:	e0833002 	add	r3, r3, r2
 c101664:	e1a01183 	lsl	r1, r3, #3
 c101668:	e0833001 	add	r3, r3, r1
 c10166c:	e1a03203 	lsl	r3, r3, #4
 c101670:	e0833002 	add	r3, r3, r2
 c101674:	e1a02183 	lsl	r2, r3, #3
 c101678:	e0632002 	rsb	r2, r3, r2
 c10167c:	e59f32c8 	ldr	r3, [pc, #712]	; c10194c <pasos+0x48c>
 c101680:	e5832000 	str	r2, [r3]
		lcd_putdouble2Decimales(240, 80, BLACK, TOFLT(metrosRecorridos, QM));
 c101684:	e59f32c0 	ldr	r3, [pc, #704]	; c10194c <pasos+0x48c>
 c101688:	e5933000 	ldr	r3, [r3]
 c10168c:	e1a00003 	mov	r0, r3
 c101690:	eb0027ad 	bl	c10b54c <__aeabi_i2d>
 c101694:	e1a03000 	mov	r3, r0
 c101698:	e1a04001 	mov	r4, r1
 c10169c:	e1a00003 	mov	r0, r3
 c1016a0:	e1a01004 	mov	r1, r4
 c1016a4:	e3a02000 	mov	r2, #0
 c1016a8:	e3a03101 	mov	r3, #1073741824	; 0x40000000
 c1016ac:	e283360b 	add	r3, r3, #11534336	; 0xb00000
 c1016b0:	eb002880 	bl	c10b8b8 <__aeabi_ddiv>
 c1016b4:	e1a03000 	mov	r3, r0
 c1016b8:	e1a04001 	mov	r4, r1
 c1016bc:	e88d0018 	stm	sp, {r3, r4}
 c1016c0:	e3a000f0 	mov	r0, #240	; 0xf0
 c1016c4:	e3a01050 	mov	r1, #80	; 0x50
 c1016c8:	e3a0200f 	mov	r2, #15
 c1016cc:	ebfffe15 	bl	c100f28 <lcd_putdouble2Decimales>

		//lcd_putQ4_12(240, 80, BLACK, metrosRecorridos);
		//lcd_putint( 255, 80, BLACK, metros);
		ritmo = pasosPorMinuto;
 c1016d0:	e59f3260 	ldr	r3, [pc, #608]	; c101938 <pasos+0x478>
 c1016d4:	e5933000 	ldr	r3, [r3]
 c1016d8:	e54b3016 	strb	r3, [fp, #-22]	; 0xffffffea
		int32 velocidad = (getStepsPerMin() * (int32)mPorPasos)/60;
 c1016dc:	eb000acc 	bl	c104214 <getStepsPerMin>
 c1016e0:	e1a02000 	mov	r2, r0
 c1016e4:	e1a03002 	mov	r3, r2
 c1016e8:	e1a03083 	lsl	r3, r3, #1
 c1016ec:	e0833002 	add	r3, r3, r2
 c1016f0:	e1a01183 	lsl	r1, r3, #3
 c1016f4:	e0833001 	add	r3, r3, r1
 c1016f8:	e1a03203 	lsl	r3, r3, #4
 c1016fc:	e0833002 	add	r3, r3, r2
 c101700:	e1a02183 	lsl	r2, r3, #3
 c101704:	e0633002 	rsb	r3, r3, r2
 c101708:	e59f2240 	ldr	r2, [pc, #576]	; c101950 <pasos+0x490>
 c10170c:	e0c21293 	smull	r1, r2, r3, r2
 c101710:	e0822003 	add	r2, r2, r3
 c101714:	e1a022c2 	asr	r2, r2, #5
 c101718:	e1a03fc3 	asr	r3, r3, #31
 c10171c:	e0633002 	rsb	r3, r3, r2
 c101720:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
		lcd_putdouble(240, 105, BLACK, TOFLT(velocidad, QM));
 c101724:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
 c101728:	eb002787 	bl	c10b54c <__aeabi_i2d>
 c10172c:	e1a03000 	mov	r3, r0
 c101730:	e1a04001 	mov	r4, r1
 c101734:	e1a00003 	mov	r0, r3
 c101738:	e1a01004 	mov	r1, r4
 c10173c:	e3a02000 	mov	r2, #0
 c101740:	e3a03101 	mov	r3, #1073741824	; 0x40000000
 c101744:	e283360b 	add	r3, r3, #11534336	; 0xb00000
 c101748:	eb00285a 	bl	c10b8b8 <__aeabi_ddiv>
 c10174c:	e1a03000 	mov	r3, r0
 c101750:	e1a04001 	mov	r4, r1
 c101754:	e88d0018 	stm	sp, {r3, r4}
 c101758:	e3a000f0 	mov	r0, #240	; 0xf0
 c10175c:	e3a01069 	mov	r1, #105	; 0x69
 c101760:	e3a0200f 	mov	r2, #15
 c101764:	ebfffd42 	bl	c100c74 <lcd_putdouble>
		//lcd_puts( 255, 105, BLACK, v);
		lcd_putint( 240, 130, BLACK, ritmo);
 c101768:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
 c10176c:	e3a000f0 	mov	r0, #240	; 0xf0
 c101770:	e3a01082 	mov	r1, #130	; 0x82
 c101774:	e3a0200f 	mov	r2, #15
 c101778:	eb001345 	bl	c106494 <lcd_putint>
		if (ritmo > ritmoMax){
 c10177c:	e55b2016 	ldrb	r2, [fp, #-22]	; 0xffffffea
 c101780:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c101784:	e1520003 	cmp	r2, r3
 c101788:	9a000001 	bls	c101794 <pasos+0x2d4>
			ritmoMax = ritmo;
 c10178c:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
 c101790:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
		}
		lcd_putint( 240, 155, BLACK, ritmoMax);
 c101794:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c101798:	e3a000f0 	mov	r0, #240	; 0xf0
 c10179c:	e3a0109b 	mov	r1, #155	; 0x9b
 c1017a0:	e3a0200f 	mov	r2, #15
 c1017a4:	eb00133a 	bl	c106494 <lcd_putint>

		if(ts_pressed()){
 c1017a8:	eb0020fc 	bl	c109ba0 <ts_pressed>
 c1017ac:	e1a03000 	mov	r3, r0
 c1017b0:	e3530000 	cmp	r3, #0
 c1017b4:	0a000004 	beq	c1017cc <pasos+0x30c>
			ts_getpos( &x, &y);
 c1017b8:	e24b201e 	sub	r2, fp, #30
 c1017bc:	e24b3020 	sub	r3, fp, #32
 c1017c0:	e1a00002 	mov	r0, r2
 c1017c4:	e1a01003 	mov	r1, r3
 c1017c8:	eb00217e 	bl	c109dc8 <ts_getpos>
		}
		//BACK
		if( x>0 && y>0 && x<45  && y<30){
 c1017cc:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
 c1017d0:	e3530000 	cmp	r3, #0
 c1017d4:	0a00000b 	beq	c101808 <pasos+0x348>
 c1017d8:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
 c1017dc:	e3530000 	cmp	r3, #0
 c1017e0:	0a000008 	beq	c101808 <pasos+0x348>
 c1017e4:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
 c1017e8:	e353002c 	cmp	r3, #44	; 0x2c
 c1017ec:	8a000005 	bhi	c101808 <pasos+0x348>
 c1017f0:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
 c1017f4:	e353001d 	cmp	r3, #29
 c1017f8:	8a000002 	bhi	c101808 <pasos+0x348>
			backP = TRUE;
 c1017fc:	e59f3130 	ldr	r3, [pc, #304]	; c101934 <pasos+0x474>
 c101800:	e3a02001 	mov	r2, #1
 c101804:	e5c32000 	strb	r2, [r3]
		}

		//RESET
		if (x > 115 && y > 195 && x < 205 && y < 225){
 c101808:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
 c10180c:	e3530073 	cmp	r3, #115	; 0x73
 c101810:	9a00003c 	bls	c101908 <pasos+0x448>
 c101814:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
 c101818:	e35300c3 	cmp	r3, #195	; 0xc3
 c10181c:	9a000039 	bls	c101908 <pasos+0x448>
 c101820:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
 c101824:	e35300cc 	cmp	r3, #204	; 0xcc
 c101828:	8a000036 	bhi	c101908 <pasos+0x448>
 c10182c:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
 c101830:	e35300e0 	cmp	r3, #224	; 0xe0
 c101834:	8a000033 	bhi	c101908 <pasos+0x448>
			//lcd_clear_area( 235, 48,305, 182);
			//recuadro back
			lcd_clear_area( 278, 48,305, 177);
 c101838:	e59f0100 	ldr	r0, [pc, #256]	; c101940 <pasos+0x480>
 c10183c:	e3a01030 	mov	r1, #48	; 0x30
 c101840:	e59f20fc 	ldr	r2, [pc, #252]	; c101944 <pasos+0x484>
 c101844:	e3a030b1 	mov	r3, #177	; 0xb1
 c101848:	eb001175 	bl	c105e24 <lcd_clear_area>
			lcd_puts( 5, 8, BLACK, "back" );
 c10184c:	e3a00005 	mov	r0, #5
 c101850:	e3a01008 	mov	r1, #8
 c101854:	e3a0200f 	mov	r2, #15
 c101858:	e59f30b8 	ldr	r3, [pc, #184]	; c101918 <pasos+0x458>
 c10185c:	eb0012ce 	bl	c10639c <lcd_puts>
			lcd_draw_box( 0, 0, 45,30, BLACK, 2 );
 c101860:	e3a0300f 	mov	r3, #15
 c101864:	e58d3000 	str	r3, [sp]
 c101868:	e3a03002 	mov	r3, #2
 c10186c:	e58d3004 	str	r3, [sp, #4]
 c101870:	e3a00000 	mov	r0, #0
 c101874:	e3a01000 	mov	r1, #0
 c101878:	e3a0202d 	mov	r2, #45	; 0x2d
 c10187c:	e3a0301e 	mov	r3, #30
 c101880:	eb001241 	bl	c10618c <lcd_draw_box>
			nPasos = 0;
 c101884:	e59f30bc 	ldr	r3, [pc, #188]	; c101948 <pasos+0x488>
 c101888:	e3a02000 	mov	r2, #0
 c10188c:	e5c32000 	strb	r2, [r3]
			metrosRecorridos = 0;
 c101890:	e59f30b4 	ldr	r3, [pc, #180]	; c10194c <pasos+0x48c>
 c101894:	e3a02000 	mov	r2, #0
 c101898:	e5832000 	str	r2, [r3]
			ritmoMax = ritmo;
 c10189c:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
 c1018a0:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
			//ritmoMax = ritmo;
			//lcd_putint( 255, 155, BLACK, ritmoMax);


			//recuadro reset
			lcd_puts_x2( 120, 195, BLACK, "RESET" );
 c1018a4:	e3a00078 	mov	r0, #120	; 0x78
 c1018a8:	e3a010c3 	mov	r1, #195	; 0xc3
 c1018ac:	e3a0200f 	mov	r2, #15
 c1018b0:	e59f3078 	ldr	r3, [pc, #120]	; c101930 <pasos+0x470>
 c1018b4:	eb001437 	bl	c106998 <lcd_puts_x2>
			lcd_draw_box( 115, 195, 205, 225, BLACK, 2 );
 c1018b8:	e3a0300f 	mov	r3, #15
 c1018bc:	e58d3000 	str	r3, [sp]
 c1018c0:	e3a03002 	mov	r3, #2
 c1018c4:	e58d3004 	str	r3, [sp, #4]
 c1018c8:	e3a00073 	mov	r0, #115	; 0x73
 c1018cc:	e3a010c3 	mov	r1, #195	; 0xc3
 c1018d0:	e3a020cd 	mov	r2, #205	; 0xcd
 c1018d4:	e3a030e1 	mov	r3, #225	; 0xe1
 c1018d8:	eb00122b 	bl	c10618c <lcd_draw_box>
 c1018dc:	ea000009 	b	c101908 <pasos+0x448>
		}
	}
	else{
		lcd_clear();
 c1018e0:	eb001127 	bl	c105d84 <lcd_clear>
		MenuPrincipal=TRUE;
 c1018e4:	e59f3068 	ldr	r3, [pc, #104]	; c101954 <pasos+0x494>
 c1018e8:	e3a02001 	mov	r2, #1
 c1018ec:	e5c32000 	strb	r2, [r3]
		pasosFlag = FALSE;
 c1018f0:	e59f301c 	ldr	r3, [pc, #28]	; c101914 <pasos+0x454>
 c1018f4:	e3a02000 	mov	r2, #0
 c1018f8:	e5c32000 	strb	r2, [r3]
		backP = FALSE;
 c1018fc:	e59f3030 	ldr	r3, [pc, #48]	; c101934 <pasos+0x474>
 c101900:	e3a02000 	mov	r2, #0
 c101904:	e5c32000 	strb	r2, [r3]
	}

}
 c101908:	e24bd010 	sub	sp, fp, #16
 c10190c:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c101910:	e12fff1e 	bx	lr
 c101914:	0c10eb8d 	.word	0x0c10eb8d
 c101918:	0c10c890 	.word	0x0c10c890
 c10191c:	0c10c898 	.word	0x0c10c898
 c101920:	0c10c8a8 	.word	0x0c10c8a8
 c101924:	0c10c8c4 	.word	0x0c10c8c4
 c101928:	0c10c8d8 	.word	0x0c10c8d8
 c10192c:	0c10c8f4 	.word	0x0c10c8f4
 c101930:	0c10c910 	.word	0x0c10c910
 c101934:	0c10eb8f 	.word	0x0c10eb8f
 c101938:	0c1ab41c 	.word	0x0c1ab41c
 c10193c:	0c10eff0 	.word	0x0c10eff0
 c101940:	00000116 	.word	0x00000116
 c101944:	00000131 	.word	0x00000131
 c101948:	0c1ab41a 	.word	0x0c1ab41a
 c10194c:	0c10eff4 	.word	0x0c10eff4
 c101950:	88888889 	.word	0x88888889
 c101954:	0c10e734 	.word	0x0c10e734

0c101958 <pulso>:

void pulso(void){
 c101958:	e1a0c00d 	mov	ip, sp
 c10195c:	e92dd800 	push	{fp, ip, lr, pc}
 c101960:	e24cb004 	sub	fp, ip, #4
 c101964:	e24dd018 	sub	sp, sp, #24
	uint16 x, y;

	uint8 reposo = 0;
 c101968:	e3a03000 	mov	r3, #0
 c10196c:	e54b300d 	strb	r3, [fp, #-13]
	uint8 reserva = 0;
 c101970:	e3a03000 	mov	r3, #0
 c101974:	e54b300f 	strb	r3, [fp, #-15]
	uint8 ritmo;
	uint8 puls;
	uint8 pulsMax = 0;
 c101978:	e3a03000 	mov	r3, #0
 c10197c:	e54b300e 	strb	r3, [fp, #-14]

	if (!pulsoFlag){
 c101980:	e59f338c 	ldr	r3, [pc, #908]	; c101d14 <pulso+0x3bc>
 c101984:	e5d33000 	ldrb	r3, [r3]
 c101988:	e3530000 	cmp	r3, #0
 c10198c:	1a000041 	bne	c101a98 <pulso+0x140>
		pulsoFlag = TRUE;
 c101990:	e59f337c 	ldr	r3, [pc, #892]	; c101d14 <pulso+0x3bc>
 c101994:	e3a02001 	mov	r2, #1
 c101998:	e5c32000 	strb	r2, [r3]
		lcd_clear();
 c10199c:	eb0010f8 	bl	c105d84 <lcd_clear>
		//recuadro back

		lcd_puts( 5, 8, BLACK, "back" );
 c1019a0:	e3a00005 	mov	r0, #5
 c1019a4:	e3a01008 	mov	r1, #8
 c1019a8:	e3a0200f 	mov	r2, #15
 c1019ac:	e59f3364 	ldr	r3, [pc, #868]	; c101d18 <pulso+0x3c0>
 c1019b0:	eb001279 	bl	c10639c <lcd_puts>
		lcd_draw_box( 0, 0, 45,30, BLACK, 2 );
 c1019b4:	e3a0300f 	mov	r3, #15
 c1019b8:	e58d3000 	str	r3, [sp]
 c1019bc:	e3a03002 	mov	r3, #2
 c1019c0:	e58d3004 	str	r3, [sp, #4]
 c1019c4:	e3a00000 	mov	r0, #0
 c1019c8:	e3a01000 	mov	r1, #0
 c1019cc:	e3a0202d 	mov	r2, #45	; 0x2d
 c1019d0:	e3a0301e 	mov	r3, #30
 c1019d4:	eb0011ec 	bl	c10618c <lcd_draw_box>

		//recuadro central
		lcd_draw_box( 25, 45, 300, 180, BLACK, 2 );
 c1019d8:	e3a0300f 	mov	r3, #15
 c1019dc:	e58d3000 	str	r3, [sp]
 c1019e0:	e3a03002 	mov	r3, #2
 c1019e4:	e58d3004 	str	r3, [sp, #4]
 c1019e8:	e3a00019 	mov	r0, #25
 c1019ec:	e3a0102d 	mov	r1, #45	; 0x2d
 c1019f0:	e3a02f4b 	mov	r2, #300	; 0x12c
 c1019f4:	e3a030b4 	mov	r3, #180	; 0xb4
 c1019f8:	eb0011e3 	bl	c10618c <lcd_draw_box>
		lcd_puts( 35, 55, BLACK, "Pulsaciones totales: ");
 c1019fc:	e3a00023 	mov	r0, #35	; 0x23
 c101a00:	e3a01037 	mov	r1, #55	; 0x37
 c101a04:	e3a0200f 	mov	r2, #15
 c101a08:	e59f330c 	ldr	r3, [pc, #780]	; c101d1c <pulso+0x3c4>
 c101a0c:	eb001262 	bl	c10639c <lcd_puts>
		lcd_puts( 35, 80, BLACK, "Pulso en reposo: ");
 c101a10:	e3a00023 	mov	r0, #35	; 0x23
 c101a14:	e3a01050 	mov	r1, #80	; 0x50
 c101a18:	e3a0200f 	mov	r2, #15
 c101a1c:	e59f32fc 	ldr	r3, [pc, #764]	; c101d20 <pulso+0x3c8>
 c101a20:	eb00125d 	bl	c10639c <lcd_puts>
		lcd_puts( 35, 105, BLACK, "Reserva cardiaca: ");   //max - reposo
 c101a24:	e3a00023 	mov	r0, #35	; 0x23
 c101a28:	e3a01069 	mov	r1, #105	; 0x69
 c101a2c:	e3a0200f 	mov	r2, #15
 c101a30:	e59f32ec 	ldr	r3, [pc, #748]	; c101d24 <pulso+0x3cc>
 c101a34:	eb001258 	bl	c10639c <lcd_puts>
		lcd_puts( 35, 130, BLACK, "Pulso actual (puls/min): ");
 c101a38:	e3a00023 	mov	r0, #35	; 0x23
 c101a3c:	e3a01082 	mov	r1, #130	; 0x82
 c101a40:	e3a0200f 	mov	r2, #15
 c101a44:	e59f32dc 	ldr	r3, [pc, #732]	; c101d28 <pulso+0x3d0>
 c101a48:	eb001253 	bl	c10639c <lcd_puts>
		lcd_puts( 35, 155, BLACK, "Pulso maximo (puls/min): ");
 c101a4c:	e3a00023 	mov	r0, #35	; 0x23
 c101a50:	e3a0109b 	mov	r1, #155	; 0x9b
 c101a54:	e3a0200f 	mov	r2, #15
 c101a58:	e59f32cc 	ldr	r3, [pc, #716]	; c101d2c <pulso+0x3d4>
 c101a5c:	eb00124e 	bl	c10639c <lcd_puts>

		//recuadro reset
		lcd_puts_x2( 120, 195, BLACK, "RESET" );
 c101a60:	e3a00078 	mov	r0, #120	; 0x78
 c101a64:	e3a010c3 	mov	r1, #195	; 0xc3
 c101a68:	e3a0200f 	mov	r2, #15
 c101a6c:	e59f32bc 	ldr	r3, [pc, #700]	; c101d30 <pulso+0x3d8>
 c101a70:	eb0013c8 	bl	c106998 <lcd_puts_x2>
		lcd_draw_box( 115, 195, 205, 225, BLACK, 2 );
 c101a74:	e3a0300f 	mov	r3, #15
 c101a78:	e58d3000 	str	r3, [sp]
 c101a7c:	e3a03002 	mov	r3, #2
 c101a80:	e58d3004 	str	r3, [sp, #4]
 c101a84:	e3a00073 	mov	r0, #115	; 0x73
 c101a88:	e3a010c3 	mov	r1, #195	; 0xc3
 c101a8c:	e3a020cd 	mov	r2, #205	; 0xcd
 c101a90:	e3a030e1 	mov	r3, #225	; 0xe1
 c101a94:	eb0011bc 	bl	c10618c <lcd_draw_box>
	}
	if(!backPs){
 c101a98:	e59f3294 	ldr	r3, [pc, #660]	; c101d34 <pulso+0x3dc>
 c101a9c:	e5d33000 	ldrb	r3, [r3]
 c101aa0:	e3530000 	cmp	r3, #0
 c101aa4:	1a00008d 	bne	c101ce0 <pulso+0x388>
		if(latidosPorMinuto < 10 && segundos == 0){
 c101aa8:	e59f3288 	ldr	r3, [pc, #648]	; c101d38 <pulso+0x3e0>
 c101aac:	e5933000 	ldr	r3, [r3]
 c101ab0:	e3530009 	cmp	r3, #9
 c101ab4:	ca000008 	bgt	c101adc <pulso+0x184>
 c101ab8:	e59f327c 	ldr	r3, [pc, #636]	; c101d3c <pulso+0x3e4>
 c101abc:	e5933000 	ldr	r3, [r3]
 c101ac0:	e3530000 	cmp	r3, #0
 c101ac4:	1a000004 	bne	c101adc <pulso+0x184>
				lcd_clear_area( 278, 48,305, 177);
 c101ac8:	e59f0270 	ldr	r0, [pc, #624]	; c101d40 <pulso+0x3e8>
 c101acc:	e3a01030 	mov	r1, #48	; 0x30
 c101ad0:	e59f226c 	ldr	r2, [pc, #620]	; c101d44 <pulso+0x3ec>
 c101ad4:	e3a030b1 	mov	r3, #177	; 0xb1
 c101ad8:	eb0010d1 	bl	c105e24 <lcd_clear_area>
			}
		lcd_putint( 240, 55, BLACK, nPulsos);
 c101adc:	e59f3264 	ldr	r3, [pc, #612]	; c101d48 <pulso+0x3f0>
 c101ae0:	e5d33000 	ldrb	r3, [r3]
 c101ae4:	e3a000f0 	mov	r0, #240	; 0xf0
 c101ae8:	e3a01037 	mov	r1, #55	; 0x37
 c101aec:	e3a0200f 	mov	r2, #15
 c101af0:	eb001267 	bl	c106494 <lcd_putint>
		ritmo = pasosPorMinuto;
 c101af4:	e59f3250 	ldr	r3, [pc, #592]	; c101d4c <pulso+0x3f4>
 c101af8:	e5933000 	ldr	r3, [r3]
 c101afc:	e54b3010 	strb	r3, [fp, #-16]
		puls = latidosPorMinuto;
 c101b00:	e59f3230 	ldr	r3, [pc, #560]	; c101d38 <pulso+0x3e0>
 c101b04:	e5933000 	ldr	r3, [r3]
 c101b08:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
		if (ritmo == 0){
 c101b0c:	e55b3010 	ldrb	r3, [fp, #-16]
 c101b10:	e3530000 	cmp	r3, #0
 c101b14:	1a000006 	bne	c101b34 <pulso+0x1dc>
			reposo = puls;
 c101b18:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c101b1c:	e54b300d 	strb	r3, [fp, #-13]
			lcd_putint( 240, 80, BLACK, reposo);
 c101b20:	e55b300d 	ldrb	r3, [fp, #-13]
 c101b24:	e3a000f0 	mov	r0, #240	; 0xf0
 c101b28:	e3a01050 	mov	r1, #80	; 0x50
 c101b2c:	e3a0200f 	mov	r2, #15
 c101b30:	eb001257 	bl	c106494 <lcd_putint>
		}
		lcd_putint( 240, 130, BLACK, puls);
 c101b34:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c101b38:	e3a000f0 	mov	r0, #240	; 0xf0
 c101b3c:	e3a01082 	mov	r1, #130	; 0x82
 c101b40:	e3a0200f 	mov	r2, #15
 c101b44:	eb001252 	bl	c106494 <lcd_putint>
		if (puls > pulsMax){
 c101b48:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
 c101b4c:	e55b300e 	ldrb	r3, [fp, #-14]
 c101b50:	e1520003 	cmp	r2, r3
 c101b54:	9a000001 	bls	c101b60 <pulso+0x208>
			pulsMax = puls;
 c101b58:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c101b5c:	e54b300e 	strb	r3, [fp, #-14]
		}
		lcd_putint( 240, 155, BLACK, pulsMax);
 c101b60:	e55b300e 	ldrb	r3, [fp, #-14]
 c101b64:	e3a000f0 	mov	r0, #240	; 0xf0
 c101b68:	e3a0109b 	mov	r1, #155	; 0x9b
 c101b6c:	e3a0200f 	mov	r2, #15
 c101b70:	eb001247 	bl	c106494 <lcd_putint>
		if (reposo != 0){
 c101b74:	e55b300d 	ldrb	r3, [fp, #-13]
 c101b78:	e3530000 	cmp	r3, #0
 c101b7c:	0a000008 	beq	c101ba4 <pulso+0x24c>
			reserva = pulsMax - reposo;
 c101b80:	e55b200e 	ldrb	r2, [fp, #-14]
 c101b84:	e55b300d 	ldrb	r3, [fp, #-13]
 c101b88:	e0633002 	rsb	r3, r3, r2
 c101b8c:	e54b300f 	strb	r3, [fp, #-15]
			lcd_putint( 240, 105, BLACK, reserva);
 c101b90:	e55b300f 	ldrb	r3, [fp, #-15]
 c101b94:	e3a000f0 	mov	r0, #240	; 0xf0
 c101b98:	e3a01069 	mov	r1, #105	; 0x69
 c101b9c:	e3a0200f 	mov	r2, #15
 c101ba0:	eb00123b 	bl	c106494 <lcd_putint>
		}


		if(ts_pressed()){
 c101ba4:	eb001ffd 	bl	c109ba0 <ts_pressed>
 c101ba8:	e1a03000 	mov	r3, r0
 c101bac:	e3530000 	cmp	r3, #0
 c101bb0:	0a000004 	beq	c101bc8 <pulso+0x270>
			ts_getpos( &x, &y);
 c101bb4:	e24b2014 	sub	r2, fp, #20
 c101bb8:	e24b3016 	sub	r3, fp, #22
 c101bbc:	e1a00002 	mov	r0, r2
 c101bc0:	e1a01003 	mov	r1, r3
 c101bc4:	eb00207f 	bl	c109dc8 <ts_getpos>
		}

		//BACK
		if( x>0 && y>0 && x<45  && y<30){
 c101bc8:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
 c101bcc:	e3530000 	cmp	r3, #0
 c101bd0:	0a00000b 	beq	c101c04 <pulso+0x2ac>
 c101bd4:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c101bd8:	e3530000 	cmp	r3, #0
 c101bdc:	0a000008 	beq	c101c04 <pulso+0x2ac>
 c101be0:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
 c101be4:	e353002c 	cmp	r3, #44	; 0x2c
 c101be8:	8a000005 	bhi	c101c04 <pulso+0x2ac>
 c101bec:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c101bf0:	e353001d 	cmp	r3, #29
 c101bf4:	8a000002 	bhi	c101c04 <pulso+0x2ac>
			backPs = TRUE;
 c101bf8:	e59f3134 	ldr	r3, [pc, #308]	; c101d34 <pulso+0x3dc>
 c101bfc:	e3a02001 	mov	r2, #1
 c101c00:	e5c32000 	strb	r2, [r3]
		}
		//RESET
		if (x > 115 && y > 195 && x < 205 && y < 225){
 c101c04:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
 c101c08:	e3530073 	cmp	r3, #115	; 0x73
 c101c0c:	9a00003d 	bls	c101d08 <pulso+0x3b0>
 c101c10:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c101c14:	e35300c3 	cmp	r3, #195	; 0xc3
 c101c18:	9a00003a 	bls	c101d08 <pulso+0x3b0>
 c101c1c:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
 c101c20:	e35300cc 	cmp	r3, #204	; 0xcc
 c101c24:	8a000037 	bhi	c101d08 <pulso+0x3b0>
 c101c28:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c101c2c:	e35300e0 	cmp	r3, #224	; 0xe0
 c101c30:	8a000034 	bhi	c101d08 <pulso+0x3b0>
			//lcd_clear();
			lcd_clear_area( 278, 48,305, 177);
 c101c34:	e59f0104 	ldr	r0, [pc, #260]	; c101d40 <pulso+0x3e8>
 c101c38:	e3a01030 	mov	r1, #48	; 0x30
 c101c3c:	e59f2100 	ldr	r2, [pc, #256]	; c101d44 <pulso+0x3ec>
 c101c40:	e3a030b1 	mov	r3, #177	; 0xb1
 c101c44:	eb001076 	bl	c105e24 <lcd_clear_area>
			//lcd_clear_area( 235, 48,305, 182);
			//recuadro back
			lcd_puts( 5, 8, BLACK, "back" );
 c101c48:	e3a00005 	mov	r0, #5
 c101c4c:	e3a01008 	mov	r1, #8
 c101c50:	e3a0200f 	mov	r2, #15
 c101c54:	e59f30bc 	ldr	r3, [pc, #188]	; c101d18 <pulso+0x3c0>
 c101c58:	eb0011cf 	bl	c10639c <lcd_puts>
			lcd_draw_box( 0, 0, 45,30, BLACK, 2 );
 c101c5c:	e3a0300f 	mov	r3, #15
 c101c60:	e58d3000 	str	r3, [sp]
 c101c64:	e3a03002 	mov	r3, #2
 c101c68:	e58d3004 	str	r3, [sp, #4]
 c101c6c:	e3a00000 	mov	r0, #0
 c101c70:	e3a01000 	mov	r1, #0
 c101c74:	e3a0202d 	mov	r2, #45	; 0x2d
 c101c78:	e3a0301e 	mov	r3, #30
 c101c7c:	eb001142 	bl	c10618c <lcd_draw_box>
			lcd_puts( 35, 80, BLACK, "Pulsaciones en reposo: ");
			lcd_puts( 35, 105, BLACK, "Reserva cardiaca: ");
			lcd_puts( 35, 130, BLACK, "Pulso actual (puls/min): ");
			lcd_puts( 35, 155, BLACK, "Pulso maximo (puls/min): ");
			*/
			nPulsos = 0;
 c101c80:	e59f30c0 	ldr	r3, [pc, #192]	; c101d48 <pulso+0x3f0>
 c101c84:	e3a02000 	mov	r2, #0
 c101c88:	e5c32000 	strb	r2, [r3]
			//lcd_putint( 255, 55, BLACK, nPulsos);
			reposo = 0;
 c101c8c:	e3a03000 	mov	r3, #0
 c101c90:	e54b300d 	strb	r3, [fp, #-13]
			reserva = 0;
 c101c94:	e3a03000 	mov	r3, #0
 c101c98:	e54b300f 	strb	r3, [fp, #-15]
			//lcd_putint( 255, 130, BLACK, puls);
			pulsMax = puls;
 c101c9c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c101ca0:	e54b300e 	strb	r3, [fp, #-14]
			//lcd_putint( 255, 155, BLACK, pulsMax);

			//recuadro reset
			lcd_puts_x2( 120, 195, BLACK, "RESET" );
 c101ca4:	e3a00078 	mov	r0, #120	; 0x78
 c101ca8:	e3a010c3 	mov	r1, #195	; 0xc3
 c101cac:	e3a0200f 	mov	r2, #15
 c101cb0:	e59f3078 	ldr	r3, [pc, #120]	; c101d30 <pulso+0x3d8>
 c101cb4:	eb001337 	bl	c106998 <lcd_puts_x2>
			lcd_draw_box( 115, 195, 205, 225, BLACK, 2 );
 c101cb8:	e3a0300f 	mov	r3, #15
 c101cbc:	e58d3000 	str	r3, [sp]
 c101cc0:	e3a03002 	mov	r3, #2
 c101cc4:	e58d3004 	str	r3, [sp, #4]
 c101cc8:	e3a00073 	mov	r0, #115	; 0x73
 c101ccc:	e3a010c3 	mov	r1, #195	; 0xc3
 c101cd0:	e3a020cd 	mov	r2, #205	; 0xcd
 c101cd4:	e3a030e1 	mov	r3, #225	; 0xe1
 c101cd8:	eb00112b 	bl	c10618c <lcd_draw_box>
 c101cdc:	ea000009 	b	c101d08 <pulso+0x3b0>
		}
	}
	else{
		lcd_clear();
 c101ce0:	eb001027 	bl	c105d84 <lcd_clear>
		MenuPrincipal=TRUE;
 c101ce4:	e59f3064 	ldr	r3, [pc, #100]	; c101d50 <pulso+0x3f8>
 c101ce8:	e3a02001 	mov	r2, #1
 c101cec:	e5c32000 	strb	r2, [r3]
		pulsoFlag = FALSE;
 c101cf0:	e59f301c 	ldr	r3, [pc, #28]	; c101d14 <pulso+0x3bc>
 c101cf4:	e3a02000 	mov	r2, #0
 c101cf8:	e5c32000 	strb	r2, [r3]
		backPs = FALSE;
 c101cfc:	e59f3030 	ldr	r3, [pc, #48]	; c101d34 <pulso+0x3dc>
 c101d00:	e3a02000 	mov	r2, #0
 c101d04:	e5c32000 	strb	r2, [r3]
	}

}
 c101d08:	e24bd00c 	sub	sp, fp, #12
 c101d0c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101d10:	e12fff1e 	bx	lr
 c101d14:	0c10eb8e 	.word	0x0c10eb8e
 c101d18:	0c10c890 	.word	0x0c10c890
 c101d1c:	0c10c918 	.word	0x0c10c918
 c101d20:	0c10c930 	.word	0x0c10c930
 c101d24:	0c10c944 	.word	0x0c10c944
 c101d28:	0c10c958 	.word	0x0c10c958
 c101d2c:	0c10c974 	.word	0x0c10c974
 c101d30:	0c10c910 	.word	0x0c10c910
 c101d34:	0c10eb90 	.word	0x0c10eb90
 c101d38:	0c1ab424 	.word	0x0c1ab424
 c101d3c:	0c10eff0 	.word	0x0c10eff0
 c101d40:	00000116 	.word	0x00000116
 c101d44:	00000131 	.word	0x00000131
 c101d48:	0c10efd8 	.word	0x0c10efd8
 c101d4c:	0c1ab41c 	.word	0x0c1ab41c
 c101d50:	0c10e734 	.word	0x0c10e734

0c101d54 <reloj>:


void reloj(void){
 c101d54:	e1a0c00d 	mov	ip, sp
 c101d58:	e92dd800 	push	{fp, ip, lr, pc}
 c101d5c:	e24cb004 	sub	fp, ip, #4
 c101d60:	e24dd008 	sub	sp, sp, #8
	//pbs_init();
	//pbs_open(isr_pb);
	uint16 x = -1, y = -1;
 c101d64:	e3e03000 	mvn	r3, #0
 c101d68:	e14b30be 	strh	r3, [fp, #-14]
 c101d6c:	e3e03000 	mvn	r3, #0
 c101d70:	e14b31b0 	strh	r3, [fp, #-16]
	//lcd_clear();


	if(!relojMenu || reentrar){
 c101d74:	e59f31a8 	ldr	r3, [pc, #424]	; c101f24 <reloj+0x1d0>
 c101d78:	e5d33000 	ldrb	r3, [r3]
 c101d7c:	e3530000 	cmp	r3, #0
 c101d80:	0a000003 	beq	c101d94 <reloj+0x40>
 c101d84:	e59f319c 	ldr	r3, [pc, #412]	; c101f28 <reloj+0x1d4>
 c101d88:	e5d33000 	ldrb	r3, [r3]
 c101d8c:	e3530000 	cmp	r3, #0
 c101d90:	0a000008 	beq	c101db8 <reloj+0x64>
		lcd_clear();
 c101d94:	eb000ffa 	bl	c105d84 <lcd_clear>
		relojMenu = TRUE;
 c101d98:	e59f3184 	ldr	r3, [pc, #388]	; c101f24 <reloj+0x1d0>
 c101d9c:	e3a02001 	mov	r2, #1
 c101da0:	e5c32000 	strb	r2, [r3]
		lcd_putWallpaper( RELOJ );
 c101da4:	e59f0180 	ldr	r0, [pc, #384]	; c101f2c <reloj+0x1d8>
 c101da8:	eb00145c 	bl	c106f20 <lcd_putWallpaper>
		reentrar = FALSE;
 c101dac:	e59f3174 	ldr	r3, [pc, #372]	; c101f28 <reloj+0x1d4>
 c101db0:	e3a02000 	mov	r2, #0
 c101db4:	e5c32000 	strb	r2, [r3]
	}

	if(pb_scan()!=PB_LEFT){
 c101db8:	eb001536 	bl	c107298 <pb_scan>
 c101dbc:	e1a03000 	mov	r3, r0
 c101dc0:	e3530040 	cmp	r3, #64	; 0x40
 c101dc4:	0a000049 	beq	c101ef0 <reloj+0x19c>
		if(ts_pressed() && !CronoFlag && !tempFlag && !alarmaFlag){
 c101dc8:	eb001f74 	bl	c109ba0 <ts_pressed>
 c101dcc:	e1a03000 	mov	r3, r0
 c101dd0:	e3530000 	cmp	r3, #0
 c101dd4:	0a000010 	beq	c101e1c <reloj+0xc8>
 c101dd8:	e59f3150 	ldr	r3, [pc, #336]	; c101f30 <reloj+0x1dc>
 c101ddc:	e5d33000 	ldrb	r3, [r3]
 c101de0:	e3530000 	cmp	r3, #0
 c101de4:	1a00000c 	bne	c101e1c <reloj+0xc8>
 c101de8:	e59f3144 	ldr	r3, [pc, #324]	; c101f34 <reloj+0x1e0>
 c101dec:	e5d33000 	ldrb	r3, [r3]
 c101df0:	e3530000 	cmp	r3, #0
 c101df4:	1a000008 	bne	c101e1c <reloj+0xc8>
 c101df8:	e59f3138 	ldr	r3, [pc, #312]	; c101f38 <reloj+0x1e4>
 c101dfc:	e5d33000 	ldrb	r3, [r3]
 c101e00:	e3530000 	cmp	r3, #0
 c101e04:	1a000004 	bne	c101e1c <reloj+0xc8>
			ts_getpos( &x, &y );
 c101e08:	e24b200e 	sub	r2, fp, #14
 c101e0c:	e24b3010 	sub	r3, fp, #16
 c101e10:	e1a00002 	mov	r0, r2
 c101e14:	e1a01003 	mov	r1, r3
 c101e18:	eb001fea 	bl	c109dc8 <ts_getpos>
		}
		if( (x>0 && y>40 && x<106  && y<210) || CronoFlag){
 c101e1c:	e15b30be 	ldrh	r3, [fp, #-14]
 c101e20:	e3530000 	cmp	r3, #0
 c101e24:	0a000008 	beq	c101e4c <reloj+0xf8>
 c101e28:	e15b31b0 	ldrh	r3, [fp, #-16]
 c101e2c:	e3530028 	cmp	r3, #40	; 0x28
 c101e30:	9a000005 	bls	c101e4c <reloj+0xf8>
 c101e34:	e15b30be 	ldrh	r3, [fp, #-14]
 c101e38:	e3530069 	cmp	r3, #105	; 0x69
 c101e3c:	8a000002 	bhi	c101e4c <reloj+0xf8>
 c101e40:	e15b31b0 	ldrh	r3, [fp, #-16]
 c101e44:	e35300d1 	cmp	r3, #209	; 0xd1
 c101e48:	9a000003 	bls	c101e5c <reloj+0x108>
 c101e4c:	e59f30dc 	ldr	r3, [pc, #220]	; c101f30 <reloj+0x1dc>
 c101e50:	e5d33000 	ldrb	r3, [r3]
 c101e54:	e3530000 	cmp	r3, #0
 c101e58:	0a000000 	beq	c101e60 <reloj+0x10c>
			cronometro();
 c101e5c:	eb000038 	bl	c101f44 <cronometro>
		}
		if( (x>106 && y>40 && x<214  && y<210) || tempFlag){
 c101e60:	e15b30be 	ldrh	r3, [fp, #-14]
 c101e64:	e353006a 	cmp	r3, #106	; 0x6a
 c101e68:	9a000008 	bls	c101e90 <reloj+0x13c>
 c101e6c:	e15b31b0 	ldrh	r3, [fp, #-16]
 c101e70:	e3530028 	cmp	r3, #40	; 0x28
 c101e74:	9a000005 	bls	c101e90 <reloj+0x13c>
 c101e78:	e15b30be 	ldrh	r3, [fp, #-14]
 c101e7c:	e35300d5 	cmp	r3, #213	; 0xd5
 c101e80:	8a000002 	bhi	c101e90 <reloj+0x13c>
 c101e84:	e15b31b0 	ldrh	r3, [fp, #-16]
 c101e88:	e35300d1 	cmp	r3, #209	; 0xd1
 c101e8c:	9a000003 	bls	c101ea0 <reloj+0x14c>
 c101e90:	e59f309c 	ldr	r3, [pc, #156]	; c101f34 <reloj+0x1e0>
 c101e94:	e5d33000 	ldrb	r3, [r3]
 c101e98:	e3530000 	cmp	r3, #0
 c101e9c:	0a000000 	beq	c101ea4 <reloj+0x150>
			temporizador();
 c101ea0:	eb0001bc 	bl	c102598 <temporizador>
		}
		if((x>215 && y>40 && x<319  && y<210) || alarmaFlag){
 c101ea4:	e15b30be 	ldrh	r3, [fp, #-14]
 c101ea8:	e35300d7 	cmp	r3, #215	; 0xd7
 c101eac:	9a000009 	bls	c101ed8 <reloj+0x184>
 c101eb0:	e15b31b0 	ldrh	r3, [fp, #-16]
 c101eb4:	e3530028 	cmp	r3, #40	; 0x28
 c101eb8:	9a000006 	bls	c101ed8 <reloj+0x184>
 c101ebc:	e15b20be 	ldrh	r2, [fp, #-14]
 c101ec0:	e59f3074 	ldr	r3, [pc, #116]	; c101f3c <reloj+0x1e8>
 c101ec4:	e1520003 	cmp	r2, r3
 c101ec8:	8a000002 	bhi	c101ed8 <reloj+0x184>
 c101ecc:	e15b31b0 	ldrh	r3, [fp, #-16]
 c101ed0:	e35300d1 	cmp	r3, #209	; 0xd1
 c101ed4:	9a000003 	bls	c101ee8 <reloj+0x194>
 c101ed8:	e59f3058 	ldr	r3, [pc, #88]	; c101f38 <reloj+0x1e4>
 c101edc:	e5d33000 	ldrb	r3, [r3]
 c101ee0:	e3530000 	cmp	r3, #0
 c101ee4:	0a00000b 	beq	c101f18 <reloj+0x1c4>
			alarma();
 c101ee8:	eb00034a 	bl	c102c18 <alarma>
 c101eec:	ea000009 	b	c101f18 <reloj+0x1c4>

		}

	}else{
		lcd_clear();
 c101ef0:	eb000fa3 	bl	c105d84 <lcd_clear>
		MenuPrincipal=TRUE;
 c101ef4:	e59f3044 	ldr	r3, [pc, #68]	; c101f40 <reloj+0x1ec>
 c101ef8:	e3a02001 	mov	r2, #1
 c101efc:	e5c32000 	strb	r2, [r3]
		relojMenu = FALSE;
 c101f00:	e59f301c 	ldr	r3, [pc, #28]	; c101f24 <reloj+0x1d0>
 c101f04:	e3a02000 	mov	r2, #0
 c101f08:	e5c32000 	strb	r2, [r3]
		CronoFlag = FALSE;
 c101f0c:	e59f301c 	ldr	r3, [pc, #28]	; c101f30 <reloj+0x1dc>
 c101f10:	e3a02000 	mov	r2, #0
 c101f14:	e5c32000 	strb	r2, [r3]
	}

}
 c101f18:	e24bd00c 	sub	sp, fp, #12
 c101f1c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101f20:	e12fff1e 	bx	lr
 c101f24:	0c10eb8b 	.word	0x0c10eb8b
 c101f28:	0c10eff8 	.word	0x0c10eff8
 c101f2c:	0c220000 	.word	0x0c220000
 c101f30:	0c10eb93 	.word	0x0c10eb93
 c101f34:	0c10eb95 	.word	0x0c10eb95
 c101f38:	0c10eb8c 	.word	0x0c10eb8c
 c101f3c:	0000013e 	.word	0x0000013e
 c101f40:	0c10e734 	.word	0x0c10e734

0c101f44 <cronometro>:

void cronometro(void){
 c101f44:	e1a0c00d 	mov	ip, sp
 c101f48:	e92dd800 	push	{fp, ip, lr, pc}
 c101f4c:	e24cb004 	sub	fp, ip, #4
 c101f50:	e24dd010 	sub	sp, sp, #16

	uint16 x=-1, y=-1;
 c101f54:	e3e03000 	mvn	r3, #0
 c101f58:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
 c101f5c:	e3e03000 	mvn	r3, #0
 c101f60:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec


		static char* horaCr = "00:00.0";


		if(!CronoFlag){
 c101f64:	e59f35dc 	ldr	r3, [pc, #1500]	; c102548 <cronometro+0x604>
 c101f68:	e5d33000 	ldrb	r3, [r3]
 c101f6c:	e3530000 	cmp	r3, #0
 c101f70:	1a00002f 	bne	c102034 <cronometro+0xf0>
			lcd_clear();
 c101f74:	eb000f82 	bl	c105d84 <lcd_clear>
			CronoFlag = TRUE;
 c101f78:	e59f35c8 	ldr	r3, [pc, #1480]	; c102548 <cronometro+0x604>
 c101f7c:	e3a02001 	mov	r2, #1
 c101f80:	e5c32000 	strb	r2, [r3]
			lcd_puts_x2(110, 40, BLACK, horaCr);
 c101f84:	e59f35c0 	ldr	r3, [pc, #1472]	; c10254c <cronometro+0x608>
 c101f88:	e5933000 	ldr	r3, [r3]
 c101f8c:	e3a0006e 	mov	r0, #110	; 0x6e
 c101f90:	e3a01028 	mov	r1, #40	; 0x28
 c101f94:	e3a0200f 	mov	r2, #15
 c101f98:	eb00127e 	bl	c106998 <lcd_puts_x2>
			lcd_draw_box( 175, 180, 315,230, BLACK, 2 );
 c101f9c:	e3a0300f 	mov	r3, #15
 c101fa0:	e58d3000 	str	r3, [sp]
 c101fa4:	e3a03002 	mov	r3, #2
 c101fa8:	e58d3004 	str	r3, [sp, #4]
 c101fac:	e3a000af 	mov	r0, #175	; 0xaf
 c101fb0:	e3a010b4 	mov	r1, #180	; 0xb4
 c101fb4:	e59f2594 	ldr	r2, [pc, #1428]	; c102550 <cronometro+0x60c>
 c101fb8:	e3a030e6 	mov	r3, #230	; 0xe6
 c101fbc:	eb001072 	bl	c10618c <lcd_draw_box>
			if(inicioCr){
 c101fc0:	e59f358c 	ldr	r3, [pc, #1420]	; c102554 <cronometro+0x610>
 c101fc4:	e5d33000 	ldrb	r3, [r3]
 c101fc8:	e3530000 	cmp	r3, #0
 c101fcc:	0a000005 	beq	c101fe8 <cronometro+0xa4>
				lcd_puts_x2(200, 190, BLACK, "PAUSAR");
 c101fd0:	e3a000c8 	mov	r0, #200	; 0xc8
 c101fd4:	e3a010be 	mov	r1, #190	; 0xbe
 c101fd8:	e3a0200f 	mov	r2, #15
 c101fdc:	e59f3574 	ldr	r3, [pc, #1396]	; c102558 <cronometro+0x614>
 c101fe0:	eb00126c 	bl	c106998 <lcd_puts_x2>
 c101fe4:	ea000004 	b	c101ffc <cronometro+0xb8>


			}else{
				lcd_puts_x2(180, 190, BLACK, "INICIAR");
 c101fe8:	e3a000b4 	mov	r0, #180	; 0xb4
 c101fec:	e3a010be 	mov	r1, #190	; 0xbe
 c101ff0:	e3a0200f 	mov	r2, #15
 c101ff4:	e59f3560 	ldr	r3, [pc, #1376]	; c10255c <cronometro+0x618>
 c101ff8:	eb001266 	bl	c106998 <lcd_puts_x2>
			}

			lcd_draw_box( 10, 180, 145,230, BLACK, 2 );
 c101ffc:	e3a0300f 	mov	r3, #15
 c102000:	e58d3000 	str	r3, [sp]
 c102004:	e3a03002 	mov	r3, #2
 c102008:	e58d3004 	str	r3, [sp, #4]
 c10200c:	e3a0000a 	mov	r0, #10
 c102010:	e3a010b4 	mov	r1, #180	; 0xb4
 c102014:	e3a02091 	mov	r2, #145	; 0x91
 c102018:	e3a030e6 	mov	r3, #230	; 0xe6
 c10201c:	eb00105a 	bl	c10618c <lcd_draw_box>
			lcd_puts_x2(35, 190, BLACK, "RESET");
 c102020:	e3a00023 	mov	r0, #35	; 0x23
 c102024:	e3a010be 	mov	r1, #190	; 0xbe
 c102028:	e3a0200f 	mov	r2, #15
 c10202c:	e59f352c 	ldr	r3, [pc, #1324]	; c102560 <cronometro+0x61c>
 c102030:	eb001258 	bl	c106998 <lcd_puts_x2>
		}
		if(pauseCr){
 c102034:	e59f3528 	ldr	r3, [pc, #1320]	; c102564 <cronometro+0x620>
 c102038:	e5d33000 	ldrb	r3, [r3]
 c10203c:	e3530000 	cmp	r3, #0
 c102040:	0a000021 	beq	c1020cc <cronometro+0x188>



			lcd_puts_x2(110, 40, BLACK, horaCr);
 c102044:	e59f3500 	ldr	r3, [pc, #1280]	; c10254c <cronometro+0x608>
 c102048:	e5933000 	ldr	r3, [r3]
 c10204c:	e3a0006e 	mov	r0, #110	; 0x6e
 c102050:	e3a01028 	mov	r1, #40	; 0x28
 c102054:	e3a0200f 	mov	r2, #15
 c102058:	eb00124e 	bl	c106998 <lcd_puts_x2>
			lcd_draw_box( 175, 180, 315,230, BLACK, 2 );
 c10205c:	e3a0300f 	mov	r3, #15
 c102060:	e58d3000 	str	r3, [sp]
 c102064:	e3a03002 	mov	r3, #2
 c102068:	e58d3004 	str	r3, [sp, #4]
 c10206c:	e3a000af 	mov	r0, #175	; 0xaf
 c102070:	e3a010b4 	mov	r1, #180	; 0xb4
 c102074:	e59f24d4 	ldr	r2, [pc, #1236]	; c102550 <cronometro+0x60c>
 c102078:	e3a030e6 	mov	r3, #230	; 0xe6
 c10207c:	eb001042 	bl	c10618c <lcd_draw_box>

				lcd_puts_x2(180, 190, BLACK, "REANUDAR");
 c102080:	e3a000b4 	mov	r0, #180	; 0xb4
 c102084:	e3a010be 	mov	r1, #190	; 0xbe
 c102088:	e3a0200f 	mov	r2, #15
 c10208c:	e59f34d4 	ldr	r3, [pc, #1236]	; c102568 <cronometro+0x624>
 c102090:	eb001240 	bl	c106998 <lcd_puts_x2>




			lcd_draw_box( 10, 180, 145,230, BLACK, 2 );
 c102094:	e3a0300f 	mov	r3, #15
 c102098:	e58d3000 	str	r3, [sp]
 c10209c:	e3a03002 	mov	r3, #2
 c1020a0:	e58d3004 	str	r3, [sp, #4]
 c1020a4:	e3a0000a 	mov	r0, #10
 c1020a8:	e3a010b4 	mov	r1, #180	; 0xb4
 c1020ac:	e3a02091 	mov	r2, #145	; 0x91
 c1020b0:	e3a030e6 	mov	r3, #230	; 0xe6
 c1020b4:	eb001034 	bl	c10618c <lcd_draw_box>
			lcd_puts_x2(35, 190, BLACK, "RESET");
 c1020b8:	e3a00023 	mov	r0, #35	; 0x23
 c1020bc:	e3a010be 	mov	r1, #190	; 0xbe
 c1020c0:	e3a0200f 	mov	r2, #15
 c1020c4:	e59f3494 	ldr	r3, [pc, #1172]	; c102560 <cronometro+0x61c>
 c1020c8:	eb001232 	bl	c106998 <lcd_puts_x2>

		}

		if(pb_scan()!=PB_LEFT){
 c1020cc:	eb001471 	bl	c107298 <pb_scan>
 c1020d0:	e1a03000 	mov	r3, r0
 c1020d4:	e3530040 	cmp	r3, #64	; 0x40
 c1020d8:	0a000101 	beq	c1024e4 <cronometro+0x5a0>

			if(ts_pressed()){
 c1020dc:	eb001eaf 	bl	c109ba0 <ts_pressed>
 c1020e0:	e1a03000 	mov	r3, r0
 c1020e4:	e3530000 	cmp	r3, #0
 c1020e8:	0a00008e 	beq	c102328 <cronometro+0x3e4>

				ts_getpos(&x, &y);
 c1020ec:	e24b2012 	sub	r2, fp, #18
 c1020f0:	e24b3014 	sub	r3, fp, #20
 c1020f4:	e1a00002 	mov	r0, r2
 c1020f8:	e1a01003 	mov	r1, r3
 c1020fc:	eb001f31 	bl	c109dc8 <ts_getpos>

				if( x>10 && y>180 && x<125  && y<230 ){
 c102100:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
 c102104:	e353000a 	cmp	r3, #10
 c102108:	9a000042 	bls	c102218 <cronometro+0x2d4>
 c10210c:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
 c102110:	e35300b4 	cmp	r3, #180	; 0xb4
 c102114:	9a00003f 	bls	c102218 <cronometro+0x2d4>
 c102118:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
 c10211c:	e353007c 	cmp	r3, #124	; 0x7c
 c102120:	8a00003c 	bhi	c102218 <cronometro+0x2d4>
 c102124:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
 c102128:	e35300e5 	cmp	r3, #229	; 0xe5
 c10212c:	8a000039 	bhi	c102218 <cronometro+0x2d4>

					tiempoCr.hora = 0;
 c102130:	e59f3434 	ldr	r3, [pc, #1076]	; c10256c <cronometro+0x628>
 c102134:	e3a02000 	mov	r2, #0
 c102138:	e583200c 	str	r2, [r3, #12]
					tiempoCr.min = 0;
 c10213c:	e59f3428 	ldr	r3, [pc, #1064]	; c10256c <cronometro+0x628>
 c102140:	e3a02000 	mov	r2, #0
 c102144:	e5832008 	str	r2, [r3, #8]
					tiempoCr.seg = 0;
 c102148:	e59f341c 	ldr	r3, [pc, #1052]	; c10256c <cronometro+0x628>
 c10214c:	e3a02000 	mov	r2, #0
 c102150:	e5832004 	str	r2, [r3, #4]
					tiempoCr.dec = 0;
 c102154:	e59f3410 	ldr	r3, [pc, #1040]	; c10256c <cronometro+0x628>
 c102158:	e3a02000 	mov	r2, #0
 c10215c:	e5832000 	str	r2, [r3]
					lcd_clear();
 c102160:	eb000f07 	bl	c105d84 <lcd_clear>
					vuelta = 1;
 c102164:	e59f3404 	ldr	r3, [pc, #1028]	; c102570 <cronometro+0x62c>
 c102168:	e3a02001 	mov	r2, #1
 c10216c:	e5832000 	str	r2, [r3]
					alt = 100;
 c102170:	e59f33fc 	ldr	r3, [pc, #1020]	; c102574 <cronometro+0x630>
 c102174:	e3a02064 	mov	r2, #100	; 0x64
 c102178:	e5832000 	str	r2, [r3]
					timeToStringCr(&tiempoCr, horaCr);
 c10217c:	e59f33c8 	ldr	r3, [pc, #968]	; c10254c <cronometro+0x608>
 c102180:	e5933000 	ldr	r3, [r3]
 c102184:	e59f03e0 	ldr	r0, [pc, #992]	; c10256c <cronometro+0x628>
 c102188:	e1a01003 	mov	r1, r3
 c10218c:	ebfff83f 	bl	c100290 <timeToStringCr>
					lcd_puts_x2(110, 40, BLACK, horaCr);
 c102190:	e59f33b4 	ldr	r3, [pc, #948]	; c10254c <cronometro+0x608>
 c102194:	e5933000 	ldr	r3, [r3]
 c102198:	e3a0006e 	mov	r0, #110	; 0x6e
 c10219c:	e3a01028 	mov	r1, #40	; 0x28
 c1021a0:	e3a0200f 	mov	r2, #15
 c1021a4:	eb0011fb 	bl	c106998 <lcd_puts_x2>
					lcd_draw_box( 175, 180, 315,230, BLACK, 2 );
 c1021a8:	e3a0300f 	mov	r3, #15
 c1021ac:	e58d3000 	str	r3, [sp]
 c1021b0:	e3a03002 	mov	r3, #2
 c1021b4:	e58d3004 	str	r3, [sp, #4]
 c1021b8:	e3a000af 	mov	r0, #175	; 0xaf
 c1021bc:	e3a010b4 	mov	r1, #180	; 0xb4
 c1021c0:	e59f2388 	ldr	r2, [pc, #904]	; c102550 <cronometro+0x60c>
 c1021c4:	e3a030e6 	mov	r3, #230	; 0xe6
 c1021c8:	eb000fef 	bl	c10618c <lcd_draw_box>

					lcd_puts_x2(200, 190, BLACK, "PAUSAR");
 c1021cc:	e3a000c8 	mov	r0, #200	; 0xc8
 c1021d0:	e3a010be 	mov	r1, #190	; 0xbe
 c1021d4:	e3a0200f 	mov	r2, #15
 c1021d8:	e59f3378 	ldr	r3, [pc, #888]	; c102558 <cronometro+0x614>
 c1021dc:	eb0011ed 	bl	c106998 <lcd_puts_x2>
					lcd_draw_box( 10, 180, 145,230, BLACK, 2 );
 c1021e0:	e3a0300f 	mov	r3, #15
 c1021e4:	e58d3000 	str	r3, [sp]
 c1021e8:	e3a03002 	mov	r3, #2
 c1021ec:	e58d3004 	str	r3, [sp, #4]
 c1021f0:	e3a0000a 	mov	r0, #10
 c1021f4:	e3a010b4 	mov	r1, #180	; 0xb4
 c1021f8:	e3a02091 	mov	r2, #145	; 0x91
 c1021fc:	e3a030e6 	mov	r3, #230	; 0xe6
 c102200:	eb000fe1 	bl	c10618c <lcd_draw_box>
					lcd_puts_x2(35, 190, BLACK, "RESET");
 c102204:	e3a00023 	mov	r0, #35	; 0x23
 c102208:	e3a010be 	mov	r1, #190	; 0xbe
 c10220c:	e3a0200f 	mov	r2, #15
 c102210:	e59f3348 	ldr	r3, [pc, #840]	; c102560 <cronometro+0x61c>
 c102214:	eb0011df 	bl	c106998 <lcd_puts_x2>

				}


				if( x>175 && y>180 && x<315  && y<230 && goCr){
 c102218:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
 c10221c:	e35300af 	cmp	r3, #175	; 0xaf
 c102220:	9a0000ba 	bls	c102510 <cronometro+0x5cc>
 c102224:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
 c102228:	e35300b4 	cmp	r3, #180	; 0xb4
 c10222c:	9a0000b9 	bls	c102518 <cronometro+0x5d4>
 c102230:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c102234:	e59f333c 	ldr	r3, [pc, #828]	; c102578 <cronometro+0x634>
 c102238:	e1520003 	cmp	r2, r3
 c10223c:	8a0000b7 	bhi	c102520 <cronometro+0x5dc>
 c102240:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
 c102244:	e35300e5 	cmp	r3, #229	; 0xe5
 c102248:	8a0000b6 	bhi	c102528 <cronometro+0x5e4>
 c10224c:	e59f3328 	ldr	r3, [pc, #808]	; c10257c <cronometro+0x638>
 c102250:	e5d33000 	ldrb	r3, [r3]
 c102254:	e3530000 	cmp	r3, #0
 c102258:	0a0000b4 	beq	c102530 <cronometro+0x5ec>
					if(inicioCr){
 c10225c:	e59f32f0 	ldr	r3, [pc, #752]	; c102554 <cronometro+0x610>
 c102260:	e5d33000 	ldrb	r3, [r3]
 c102264:	e3530000 	cmp	r3, #0
 c102268:	0a000006 	beq	c102288 <cronometro+0x344>
						pauseCr = TRUE;
 c10226c:	e59f32f0 	ldr	r3, [pc, #752]	; c102564 <cronometro+0x620>
 c102270:	e3a02001 	mov	r2, #1
 c102274:	e5c32000 	strb	r2, [r3]
						inicioCr= FALSE;
 c102278:	e59f32d4 	ldr	r3, [pc, #724]	; c102554 <cronometro+0x610>
 c10227c:	e3a02000 	mov	r2, #0
 c102280:	e5c32000 	strb	r2, [r3]



					}else {
					pauseCr = TRUE;
					goCr = FALSE;
 c102284:	ea0000ac 	b	c10253c <cronometro+0x5f8>
					if(inicioCr){
						pauseCr = TRUE;
						inicioCr= FALSE;

					}else{
						pauseCr = FALSE;
 c102288:	e59f32d4 	ldr	r3, [pc, #724]	; c102564 <cronometro+0x620>
 c10228c:	e3a02000 	mov	r2, #0
 c102290:	e5c32000 	strb	r2, [r3]
						inicioCr = TRUE;
 c102294:	e59f32b8 	ldr	r3, [pc, #696]	; c102554 <cronometro+0x610>
 c102298:	e3a02001 	mov	r2, #1
 c10229c:	e5c32000 	strb	r2, [r3]
						lcd_clear_area(100, 177, 318,233);
 c1022a0:	e3a00064 	mov	r0, #100	; 0x64
 c1022a4:	e3a010b1 	mov	r1, #177	; 0xb1
 c1022a8:	e59f22d0 	ldr	r2, [pc, #720]	; c102580 <cronometro+0x63c>
 c1022ac:	e3a030e9 	mov	r3, #233	; 0xe9
 c1022b0:	eb000edb 	bl	c105e24 <lcd_clear_area>
						lcd_draw_box( 175, 180, 315,230, BLACK, 2 );
 c1022b4:	e3a0300f 	mov	r3, #15
 c1022b8:	e58d3000 	str	r3, [sp]
 c1022bc:	e3a03002 	mov	r3, #2
 c1022c0:	e58d3004 	str	r3, [sp, #4]
 c1022c4:	e3a000af 	mov	r0, #175	; 0xaf
 c1022c8:	e3a010b4 	mov	r1, #180	; 0xb4
 c1022cc:	e59f227c 	ldr	r2, [pc, #636]	; c102550 <cronometro+0x60c>
 c1022d0:	e3a030e6 	mov	r3, #230	; 0xe6
 c1022d4:	eb000fac 	bl	c10618c <lcd_draw_box>

						lcd_puts_x2(180, 190, BLACK, "PAUSAR");
 c1022d8:	e3a000b4 	mov	r0, #180	; 0xb4
 c1022dc:	e3a010be 	mov	r1, #190	; 0xbe
 c1022e0:	e3a0200f 	mov	r2, #15
 c1022e4:	e59f326c 	ldr	r3, [pc, #620]	; c102558 <cronometro+0x614>
 c1022e8:	eb0011aa 	bl	c106998 <lcd_puts_x2>
						lcd_draw_box( 10, 180, 145,230, BLACK, 2 );
 c1022ec:	e3a0300f 	mov	r3, #15
 c1022f0:	e58d3000 	str	r3, [sp]
 c1022f4:	e3a03002 	mov	r3, #2
 c1022f8:	e58d3004 	str	r3, [sp, #4]
 c1022fc:	e3a0000a 	mov	r0, #10
 c102300:	e3a010b4 	mov	r1, #180	; 0xb4
 c102304:	e3a02091 	mov	r2, #145	; 0x91
 c102308:	e3a030e6 	mov	r3, #230	; 0xe6
 c10230c:	eb000f9e 	bl	c10618c <lcd_draw_box>
						lcd_puts_x2(35, 190, BLACK, "RESET");
 c102310:	e3a00023 	mov	r0, #35	; 0x23
 c102314:	e3a010be 	mov	r1, #190	; 0xbe
 c102318:	e3a0200f 	mov	r2, #15
 c10231c:	e59f323c 	ldr	r3, [pc, #572]	; c102560 <cronometro+0x61c>
 c102320:	eb00119c 	bl	c106998 <lcd_puts_x2>



					}else {
					pauseCr = TRUE;
					goCr = FALSE;
 c102324:	ea000084 	b	c10253c <cronometro+0x5f8>


				}


			 }else if(inicioCr){
 c102328:	e59f3224 	ldr	r3, [pc, #548]	; c102554 <cronometro+0x610>
 c10232c:	e5d33000 	ldrb	r3, [r3]
 c102330:	e3530000 	cmp	r3, #0
 c102334:	0a00007f 	beq	c102538 <cronometro+0x5f4>

				if(pb_scan()!=PB_LEFT && !pauseCr){
 c102338:	eb0013d6 	bl	c107298 <pb_scan>
 c10233c:	e1a03000 	mov	r3, r0
 c102340:	e3530040 	cmp	r3, #64	; 0x40
 c102344:	0a00005f 	beq	c1024c8 <cronometro+0x584>
 c102348:	e59f3214 	ldr	r3, [pc, #532]	; c102564 <cronometro+0x620>
 c10234c:	e5d33000 	ldrb	r3, [r3]
 c102350:	e3530000 	cmp	r3, #0
 c102354:	1a00005b 	bne	c1024c8 <cronometro+0x584>


						if(iCr<10 && pb_scan()!=PB_LEFT){
 c102358:	e59f3224 	ldr	r3, [pc, #548]	; c102584 <cronometro+0x640>
 c10235c:	e5933000 	ldr	r3, [r3]
 c102360:	e3530009 	cmp	r3, #9
 c102364:	ca00004c 	bgt	c10249c <cronometro+0x558>
 c102368:	eb0013ca 	bl	c107298 <pb_scan>
 c10236c:	e1a03000 	mov	r3, r0
 c102370:	e3530040 	cmp	r3, #64	; 0x40
 c102374:	0a000048 	beq	c10249c <cronometro+0x558>
							timeToStringCr(&tiempoCr, horaCr);
 c102378:	e59f31cc 	ldr	r3, [pc, #460]	; c10254c <cronometro+0x608>
 c10237c:	e5933000 	ldr	r3, [r3]
 c102380:	e59f01e4 	ldr	r0, [pc, #484]	; c10256c <cronometro+0x628>
 c102384:	e1a01003 	mov	r1, r3
 c102388:	ebfff7c0 	bl	c100290 <timeToStringCr>
							lcd_puts_x2(110, 40, BLACK, horaCr);
 c10238c:	e59f31b8 	ldr	r3, [pc, #440]	; c10254c <cronometro+0x608>
 c102390:	e5933000 	ldr	r3, [r3]
 c102394:	e3a0006e 	mov	r0, #110	; 0x6e
 c102398:	e3a01028 	mov	r1, #40	; 0x28
 c10239c:	e3a0200f 	mov	r2, #15
 c1023a0:	eb00117c 	bl	c106998 <lcd_puts_x2>
							tiempoCr.dec++;
 c1023a4:	e59f31c0 	ldr	r3, [pc, #448]	; c10256c <cronometro+0x628>
 c1023a8:	e5933000 	ldr	r3, [r3]
 c1023ac:	e2832001 	add	r2, r3, #1
 c1023b0:	e59f31b4 	ldr	r3, [pc, #436]	; c10256c <cronometro+0x628>
 c1023b4:	e5832000 	str	r2, [r3]
							one_s_loop();
 c1023b8:	e59f31c8 	ldr	r3, [pc, #456]	; c102588 <cronometro+0x644>
 c1023bc:	e1a0e00f 	mov	lr, pc
 c1023c0:	e12fff13 	bx	r3

							if(pb_scan()==PB_RIGHT && vuelta <5){
 c1023c4:	eb0013b3 	bl	c107298 <pb_scan>
 c1023c8:	e1a03000 	mov	r3, r0
 c1023cc:	e3530080 	cmp	r3, #128	; 0x80
 c1023d0:	1a00002c 	bne	c102488 <cronometro+0x544>
 c1023d4:	e59f3194 	ldr	r3, [pc, #404]	; c102570 <cronometro+0x62c>
 c1023d8:	e5933000 	ldr	r3, [r3]
 c1023dc:	e3530004 	cmp	r3, #4
 c1023e0:	ca000028 	bgt	c102488 <cronometro+0x544>
								char *str = "vuelta";
 c1023e4:	e59f31a0 	ldr	r3, [pc, #416]	; c10258c <cronometro+0x648>
 c1023e8:	e50b3010 	str	r3, [fp, #-16]
								lcd_puts(5, alt, BLACK, str);
 c1023ec:	e59f3180 	ldr	r3, [pc, #384]	; c102574 <cronometro+0x630>
 c1023f0:	e5933000 	ldr	r3, [r3]
 c1023f4:	e1a03803 	lsl	r3, r3, #16
 c1023f8:	e1a03823 	lsr	r3, r3, #16
 c1023fc:	e3a00005 	mov	r0, #5
 c102400:	e1a01003 	mov	r1, r3
 c102404:	e3a0200f 	mov	r2, #15
 c102408:	e51b3010 	ldr	r3, [fp, #-16]
 c10240c:	eb000fe2 	bl	c10639c <lcd_puts>
								lcd_putint(60, alt, BLACK, vuelta);
 c102410:	e59f315c 	ldr	r3, [pc, #348]	; c102574 <cronometro+0x630>
 c102414:	e5933000 	ldr	r3, [r3]
 c102418:	e1a03803 	lsl	r3, r3, #16
 c10241c:	e1a02823 	lsr	r2, r3, #16
 c102420:	e59f3148 	ldr	r3, [pc, #328]	; c102570 <cronometro+0x62c>
 c102424:	e5933000 	ldr	r3, [r3]
 c102428:	e3a0003c 	mov	r0, #60	; 0x3c
 c10242c:	e1a01002 	mov	r1, r2
 c102430:	e3a0200f 	mov	r2, #15
 c102434:	eb001016 	bl	c106494 <lcd_putint>

								lcd_puts(75, alt, BLACK,horaCr);
 c102438:	e59f3134 	ldr	r3, [pc, #308]	; c102574 <cronometro+0x630>
 c10243c:	e5933000 	ldr	r3, [r3]
 c102440:	e1a03803 	lsl	r3, r3, #16
 c102444:	e1a02823 	lsr	r2, r3, #16
 c102448:	e59f30fc 	ldr	r3, [pc, #252]	; c10254c <cronometro+0x608>
 c10244c:	e5933000 	ldr	r3, [r3]
 c102450:	e3a0004b 	mov	r0, #75	; 0x4b
 c102454:	e1a01002 	mov	r1, r2
 c102458:	e3a0200f 	mov	r2, #15
 c10245c:	eb000fce 	bl	c10639c <lcd_puts>


								vuelta++;
 c102460:	e59f3108 	ldr	r3, [pc, #264]	; c102570 <cronometro+0x62c>
 c102464:	e5933000 	ldr	r3, [r3]
 c102468:	e2832001 	add	r2, r3, #1
 c10246c:	e59f30fc 	ldr	r3, [pc, #252]	; c102570 <cronometro+0x62c>
 c102470:	e5832000 	str	r2, [r3]
								alt+=15;
 c102474:	e59f30f8 	ldr	r3, [pc, #248]	; c102574 <cronometro+0x630>
 c102478:	e5933000 	ldr	r3, [r3]
 c10247c:	e283200f 	add	r2, r3, #15
 c102480:	e59f30ec 	ldr	r3, [pc, #236]	; c102574 <cronometro+0x630>
 c102484:	e5832000 	str	r2, [r3]


							}
							iCr++;
 c102488:	e59f30f4 	ldr	r3, [pc, #244]	; c102584 <cronometro+0x640>
 c10248c:	e5933000 	ldr	r3, [r3]
 c102490:	e2832001 	add	r2, r3, #1
 c102494:	e59f30e8 	ldr	r3, [pc, #232]	; c102584 <cronometro+0x640>
 c102498:	e5832000 	str	r2, [r3]
						}
						if( iCr == 10){
 c10249c:	e59f30e0 	ldr	r3, [pc, #224]	; c102584 <cronometro+0x640>
 c1024a0:	e5933000 	ldr	r3, [r3]
 c1024a4:	e353000a 	cmp	r3, #10
 c1024a8:	1a000023 	bne	c10253c <cronometro+0x5f8>
							iCr = 0;
 c1024ac:	e59f30d0 	ldr	r3, [pc, #208]	; c102584 <cronometro+0x640>
 c1024b0:	e3a02000 	mov	r2, #0
 c1024b4:	e5832000 	str	r2, [r3]
							tiempoCr.dec = 0;
 c1024b8:	e59f30ac 	ldr	r3, [pc, #172]	; c10256c <cronometro+0x628>
 c1024bc:	e3a02000 	mov	r2, #0
 c1024c0:	e5832000 	str	r2, [r3]


							}
							iCr++;
						}
						if( iCr == 10){
 c1024c4:	ea00001c 	b	c10253c <cronometro+0x5f8>




					}else {
					pauseCr = TRUE;
 c1024c8:	e59f3094 	ldr	r3, [pc, #148]	; c102564 <cronometro+0x620>
 c1024cc:	e3a02001 	mov	r2, #1
 c1024d0:	e5c32000 	strb	r2, [r3]
					goCr = FALSE;
 c1024d4:	e59f30a0 	ldr	r3, [pc, #160]	; c10257c <cronometro+0x638>
 c1024d8:	e3a02000 	mov	r2, #0
 c1024dc:	e5c32000 	strb	r2, [r3]
 c1024e0:	ea000015 	b	c10253c <cronometro+0x5f8>

			}


	}else{
		lcd_clear();
 c1024e4:	eb000e26 	bl	c105d84 <lcd_clear>
		CronoFlag = FALSE;
 c1024e8:	e59f3058 	ldr	r3, [pc, #88]	; c102548 <cronometro+0x604>
 c1024ec:	e3a02000 	mov	r2, #0
 c1024f0:	e5c32000 	strb	r2, [r3]
		relojMenu = TRUE;
 c1024f4:	e59f3094 	ldr	r3, [pc, #148]	; c102590 <cronometro+0x64c>
 c1024f8:	e3a02001 	mov	r2, #1
 c1024fc:	e5c32000 	strb	r2, [r3]
		reentrar = TRUE;
 c102500:	e59f308c 	ldr	r3, [pc, #140]	; c102594 <cronometro+0x650>
 c102504:	e3a02001 	mov	r2, #1
 c102508:	e5c32000 	strb	r2, [r3]
 c10250c:	ea00000a 	b	c10253c <cronometro+0x5f8>



					}else {
					pauseCr = TRUE;
					goCr = FALSE;
 c102510:	e1a00000 	nop			; (mov r0, r0)
 c102514:	ea000008 	b	c10253c <cronometro+0x5f8>
 c102518:	e1a00000 	nop			; (mov r0, r0)
 c10251c:	ea000006 	b	c10253c <cronometro+0x5f8>
 c102520:	e1a00000 	nop			; (mov r0, r0)
 c102524:	ea000004 	b	c10253c <cronometro+0x5f8>
 c102528:	e1a00000 	nop			; (mov r0, r0)
 c10252c:	ea000002 	b	c10253c <cronometro+0x5f8>
 c102530:	e1a00000 	nop			; (mov r0, r0)
 c102534:	ea000000 	b	c10253c <cronometro+0x5f8>
 c102538:	e1a00000 	nop			; (mov r0, r0)
		relojMenu = TRUE;
		reentrar = TRUE;


	}
}
 c10253c:	e24bd00c 	sub	sp, fp, #12
 c102540:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102544:	e12fff1e 	bx	lr
 c102548:	0c10eb93 	.word	0x0c10eb93
 c10254c:	0c10e748 	.word	0x0c10e748
 c102550:	0000013b 	.word	0x0000013b
 c102554:	0c10eff9 	.word	0x0c10eff9
 c102558:	0c10c990 	.word	0x0c10c990
 c10255c:	0c10c998 	.word	0x0c10c998
 c102560:	0c10c910 	.word	0x0c10c910
 c102564:	0c10eb94 	.word	0x0c10eb94
 c102568:	0c10c9a0 	.word	0x0c10c9a0
 c10256c:	0c10efbc 	.word	0x0c10efbc
 c102570:	0c10e738 	.word	0x0c10e738
 c102574:	0c10e73c 	.word	0x0c10e73c
 c102578:	0000013a 	.word	0x0000013a
 c10257c:	0c10e736 	.word	0x0c10e736
 c102580:	0000013e 	.word	0x0000013e
 c102584:	0c1ab42c 	.word	0x0c1ab42c
 c102588:	0c103750 	.word	0x0c103750
 c10258c:	0c10c9ac 	.word	0x0c10c9ac
 c102590:	0c10eb8b 	.word	0x0c10eb8b
 c102594:	0c10eff8 	.word	0x0c10eff8

0c102598 <temporizador>:

void temporizador(void){
 c102598:	e1a0c00d 	mov	ip, sp
 c10259c:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c1025a0:	e24cb004 	sub	fp, ip, #4
 c1025a4:	e24dd01c 	sub	sp, sp, #28




	static char* hora = "00:00:00";
	timeToStringT(&tiempoTemp, hora);
 c1025a8:	e59f3628 	ldr	r3, [pc, #1576]	; c102bd8 <temporizador+0x640>
 c1025ac:	e5933000 	ldr	r3, [r3]
 c1025b0:	e59f0624 	ldr	r0, [pc, #1572]	; c102bdc <temporizador+0x644>
 c1025b4:	e1a01003 	mov	r1, r3
 c1025b8:	ebfff6ef 	bl	c10017c <timeToStringT>

	boolean pintarIni = FALSE;
 c1025bc:	e3a03000 	mov	r3, #0
 c1025c0:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	if(iniTemp && pintarDirectriz ){
 c1025c4:	e59f3614 	ldr	r3, [pc, #1556]	; c102be0 <temporizador+0x648>
 c1025c8:	e5d33000 	ldrb	r3, [r3]
 c1025cc:	e3530000 	cmp	r3, #0
 c1025d0:	0a000015 	beq	c10262c <temporizador+0x94>
 c1025d4:	e59f3608 	ldr	r3, [pc, #1544]	; c102be4 <temporizador+0x64c>
 c1025d8:	e5d33000 	ldrb	r3, [r3]
 c1025dc:	e3530000 	cmp	r3, #0
 c1025e0:	0a000011 	beq	c10262c <temporizador+0x94>
		lcd_clear_area(70, 160, 250, 235);
 c1025e4:	e3a00046 	mov	r0, #70	; 0x46
 c1025e8:	e3a010a0 	mov	r1, #160	; 0xa0
 c1025ec:	e3a020fa 	mov	r2, #250	; 0xfa
 c1025f0:	e3a030eb 	mov	r3, #235	; 0xeb
 c1025f4:	eb000e0a 	bl	c105e24 <lcd_clear_area>
		lcd_puts_x2(20, 150, BLACK, "Pulsa el boton drc");
 c1025f8:	e3a00014 	mov	r0, #20
 c1025fc:	e3a01096 	mov	r1, #150	; 0x96
 c102600:	e3a0200f 	mov	r2, #15
 c102604:	e59f35dc 	ldr	r3, [pc, #1500]	; c102be8 <temporizador+0x650>
 c102608:	eb0010e2 	bl	c106998 <lcd_puts_x2>
		lcd_puts_x2(20, 180, BLACK, "para detener");
 c10260c:	e3a00014 	mov	r0, #20
 c102610:	e3a010b4 	mov	r1, #180	; 0xb4
 c102614:	e3a0200f 	mov	r2, #15
 c102618:	e59f35cc 	ldr	r3, [pc, #1484]	; c102bec <temporizador+0x654>
 c10261c:	eb0010dd 	bl	c106998 <lcd_puts_x2>
		pintarDirectriz = FALSE;
 c102620:	e59f35bc 	ldr	r3, [pc, #1468]	; c102be4 <temporizador+0x64c>
 c102624:	e3a02000 	mov	r2, #0
 c102628:	e5c32000 	strb	r2, [r3]



	}
	if(!iniTemp && pintarDirectriz ){
 c10262c:	e59f35ac 	ldr	r3, [pc, #1452]	; c102be0 <temporizador+0x648>
 c102630:	e5d33000 	ldrb	r3, [r3]
 c102634:	e3530000 	cmp	r3, #0
 c102638:	1a000015 	bne	c102694 <temporizador+0xfc>
 c10263c:	e59f35a0 	ldr	r3, [pc, #1440]	; c102be4 <temporizador+0x64c>
 c102640:	e5d33000 	ldrb	r3, [r3]
 c102644:	e3530000 	cmp	r3, #0
 c102648:	0a000011 	beq	c102694 <temporizador+0xfc>
		lcd_clear_area(70, 160, 250, 235);
 c10264c:	e3a00046 	mov	r0, #70	; 0x46
 c102650:	e3a010a0 	mov	r1, #160	; 0xa0
 c102654:	e3a020fa 	mov	r2, #250	; 0xfa
 c102658:	e3a030eb 	mov	r3, #235	; 0xeb
 c10265c:	eb000df0 	bl	c105e24 <lcd_clear_area>
		lcd_puts_x2(20, 150, BLACK, "Pulsa el boton drc");
 c102660:	e3a00014 	mov	r0, #20
 c102664:	e3a01096 	mov	r1, #150	; 0x96
 c102668:	e3a0200f 	mov	r2, #15
 c10266c:	e59f3574 	ldr	r3, [pc, #1396]	; c102be8 <temporizador+0x650>
 c102670:	eb0010c8 	bl	c106998 <lcd_puts_x2>
		lcd_puts_x2(20, 180, BLACK, "para iniciar");
 c102674:	e3a00014 	mov	r0, #20
 c102678:	e3a010b4 	mov	r1, #180	; 0xb4
 c10267c:	e3a0200f 	mov	r2, #15
 c102680:	e59f3568 	ldr	r3, [pc, #1384]	; c102bf0 <temporizador+0x658>
 c102684:	eb0010c3 	bl	c106998 <lcd_puts_x2>
		pintarDirectriz = FALSE;
 c102688:	e59f3554 	ldr	r3, [pc, #1364]	; c102be4 <temporizador+0x64c>
 c10268c:	e3a02000 	mov	r2, #0
 c102690:	e5c32000 	strb	r2, [r3]

	}
	if (!tempFlag){
 c102694:	e59f3558 	ldr	r3, [pc, #1368]	; c102bf4 <temporizador+0x65c>
 c102698:	e5d33000 	ldrb	r3, [r3]
 c10269c:	e3530000 	cmp	r3, #0
 c1026a0:	1a000003 	bne	c1026b4 <temporizador+0x11c>
		lcd_clear();
 c1026a4:	eb000db6 	bl	c105d84 <lcd_clear>
		tempFlag = TRUE;
 c1026a8:	e59f3544 	ldr	r3, [pc, #1348]	; c102bf4 <temporizador+0x65c>
 c1026ac:	e3a02001 	mov	r2, #1
 c1026b0:	e5c32000 	strb	r2, [r3]
	}
	if(!backTemp){
 c1026b4:	e59f353c 	ldr	r3, [pc, #1340]	; c102bf8 <temporizador+0x660>
 c1026b8:	e5d33000 	ldrb	r3, [r3]
 c1026bc:	e3530000 	cmp	r3, #0
 c1026c0:	1a00012e 	bne	c102b80 <temporizador+0x5e8>
		uint16 x = -1, y = -1;
 c1026c4:	e3e03000 	mvn	r3, #0
 c1026c8:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
 c1026cc:	e3e03000 	mvn	r3, #0
 c1026d0:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
		lcd_puts( 3, 8, BLACK, "back" );
 c1026d4:	e3a00003 	mov	r0, #3
 c1026d8:	e3a01008 	mov	r1, #8
 c1026dc:	e3a0200f 	mov	r2, #15
 c1026e0:	e59f3514 	ldr	r3, [pc, #1300]	; c102bfc <temporizador+0x664>
 c1026e4:	eb000f2c 	bl	c10639c <lcd_puts>
		lcd_draw_box( 0, 0, 45,30, BLACK, 2 );
 c1026e8:	e3a0300f 	mov	r3, #15
 c1026ec:	e58d3000 	str	r3, [sp]
 c1026f0:	e3a03002 	mov	r3, #2
 c1026f4:	e58d3004 	str	r3, [sp, #4]
 c1026f8:	e3a00000 	mov	r0, #0
 c1026fc:	e3a01000 	mov	r1, #0
 c102700:	e3a0202d 	mov	r2, #45	; 0x2d
 c102704:	e3a0301e 	mov	r3, #30
 c102708:	eb000e9f 	bl	c10618c <lcd_draw_box>
		lcd_puts_x3( 40, 40, BLACK, hora );
 c10270c:	e59f34c4 	ldr	r3, [pc, #1220]	; c102bd8 <temporizador+0x640>
 c102710:	e5933000 	ldr	r3, [r3]
 c102714:	e3a00028 	mov	r0, #40	; 0x28
 c102718:	e3a01028 	mov	r1, #40	; 0x28
 c10271c:	e3a0200f 	mov	r2, #15
 c102720:	eb0010da 	bl	c106a90 <lcd_puts_x3>

		if(!conf){
 c102724:	e59f34d4 	ldr	r3, [pc, #1236]	; c102c00 <temporizador+0x668>
 c102728:	e5d33000 	ldrb	r3, [r3]
 c10272c:	e3530000 	cmp	r3, #0
 c102730:	1a00000d 	bne	c10276c <temporizador+0x1d4>
			lcd_draw_box(77, 170, 255, 230,BLACK,2);
 c102734:	e3a0300f 	mov	r3, #15
 c102738:	e58d3000 	str	r3, [sp]
 c10273c:	e3a03002 	mov	r3, #2
 c102740:	e58d3004 	str	r3, [sp, #4]
 c102744:	e3a0004d 	mov	r0, #77	; 0x4d
 c102748:	e3a010aa 	mov	r1, #170	; 0xaa
 c10274c:	e3a020ff 	mov	r2, #255	; 0xff
 c102750:	e3a030e6 	mov	r3, #230	; 0xe6
 c102754:	eb000e8c 	bl	c10618c <lcd_draw_box>
			lcd_puts_x2(85, 180, BLACK, "Configurar");
 c102758:	e3a00055 	mov	r0, #85	; 0x55
 c10275c:	e3a010b4 	mov	r1, #180	; 0xb4
 c102760:	e3a0200f 	mov	r2, #15
 c102764:	e59f3498 	ldr	r3, [pc, #1176]	; c102c04 <temporizador+0x66c>
 c102768:	eb00108a 	bl	c106998 <lcd_puts_x2>


		}

		if(ts_pressed()){
 c10276c:	eb001d0b 	bl	c109ba0 <ts_pressed>
 c102770:	e1a03000 	mov	r3, r0
 c102774:	e3530000 	cmp	r3, #0
 c102778:	0a000004 	beq	c102790 <temporizador+0x1f8>
			ts_getpos( &x, &y);
 c10277c:	e24b201e 	sub	r2, fp, #30
 c102780:	e24b3020 	sub	r3, fp, #32
 c102784:	e1a00002 	mov	r0, r2
 c102788:	e1a01003 	mov	r1, r3
 c10278c:	eb001d8d 	bl	c109dc8 <ts_getpos>
		}

		if( x>0 && y>0 && x<45  && y<30){
 c102790:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
 c102794:	e3530000 	cmp	r3, #0
 c102798:	0a00000b 	beq	c1027cc <temporizador+0x234>
 c10279c:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
 c1027a0:	e3530000 	cmp	r3, #0
 c1027a4:	0a000008 	beq	c1027cc <temporizador+0x234>
 c1027a8:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
 c1027ac:	e353002c 	cmp	r3, #44	; 0x2c
 c1027b0:	8a000005 	bhi	c1027cc <temporizador+0x234>
 c1027b4:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
 c1027b8:	e353001d 	cmp	r3, #29
 c1027bc:	8a000002 	bhi	c1027cc <temporizador+0x234>
			backTemp = TRUE;
 c1027c0:	e59f3430 	ldr	r3, [pc, #1072]	; c102bf8 <temporizador+0x660>
 c1027c4:	e3a02001 	mov	r2, #1
 c1027c8:	e5c32000 	strb	r2, [r3]
		}
		if(!confFinish){
 c1027cc:	e59f3434 	ldr	r3, [pc, #1076]	; c102c08 <temporizador+0x670>
 c1027d0:	e5d33000 	ldrb	r3, [r3]
 c1027d4:	e3530000 	cmp	r3, #0
 c1027d8:	1a0000ad 	bne	c102a94 <temporizador+0x4fc>
			if( (x>77 && y>170 && x<245  && y<230) || (conf)){
 c1027dc:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
 c1027e0:	e353004d 	cmp	r3, #77	; 0x4d
 c1027e4:	9a000008 	bls	c10280c <temporizador+0x274>
 c1027e8:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
 c1027ec:	e35300aa 	cmp	r3, #170	; 0xaa
 c1027f0:	9a000005 	bls	c10280c <temporizador+0x274>
 c1027f4:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
 c1027f8:	e35300f4 	cmp	r3, #244	; 0xf4
 c1027fc:	8a000002 	bhi	c10280c <temporizador+0x274>
 c102800:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
 c102804:	e35300e5 	cmp	r3, #229	; 0xe5
 c102808:	9a000003 	bls	c10281c <temporizador+0x284>
 c10280c:	e59f33ec 	ldr	r3, [pc, #1004]	; c102c00 <temporizador+0x668>
 c102810:	e5d33000 	ldrb	r3, [r3]
 c102814:	e3530000 	cmp	r3, #0
 c102818:	0a0000ce 	beq	c102b58 <temporizador+0x5c0>
				conf = TRUE;
 c10281c:	e59f33dc 	ldr	r3, [pc, #988]	; c102c00 <temporizador+0x668>
 c102820:	e3a02001 	mov	r2, #1
 c102824:	e5c32000 	strb	r2, [r3]
				lcd_clear_area(70, 160, 250, 235);
 c102828:	e3a00046 	mov	r0, #70	; 0x46
 c10282c:	e3a010a0 	mov	r1, #160	; 0xa0
 c102830:	e3a020fa 	mov	r2, #250	; 0xfa
 c102834:	e3a030eb 	mov	r3, #235	; 0xeb
 c102838:	eb000d79 	bl	c105e24 <lcd_clear_area>
				uint16 x = -1, y = -1;
 c10283c:	e3e03000 	mvn	r3, #0
 c102840:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
 c102844:	e3e03000 	mvn	r3, #0
 c102848:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
				uint8 scancode;

				lcd_puts_x3( 40, 40, BLACK, hora );
 c10284c:	e59f3384 	ldr	r3, [pc, #900]	; c102bd8 <temporizador+0x640>
 c102850:	e5933000 	ldr	r3, [r3]
 c102854:	e3a00028 	mov	r0, #40	; 0x28
 c102858:	e3a01028 	mov	r1, #40	; 0x28
 c10285c:	e3a0200f 	mov	r2, #15
 c102860:	eb00108a 	bl	c106a90 <lcd_puts_x3>

				if(ticks  < 2) {
 c102864:	e59f33a0 	ldr	r3, [pc, #928]	; c102c0c <temporizador+0x674>
 c102868:	e5933000 	ldr	r3, [r3]
 c10286c:	e3530001 	cmp	r3, #1
 c102870:	ca000025 	bgt	c10290c <temporizador+0x374>

					if(keypad_pressed()){
 c102874:	eb000c06 	bl	c105894 <keypad_pressed>
 c102878:	e1a03000 	mov	r3, r0
 c10287c:	e3530000 	cmp	r3, #0
 c102880:	0a0000b6 	beq	c102b60 <temporizador+0x5c8>
						scancode = keypad_getchar();
 c102884:	eb000c43 	bl	c105998 <keypad_getchar>
 c102888:	e1a03000 	mov	r3, r0
 c10288c:	e54b301b 	strb	r3, [fp, #-27]	; 0xffffffe5
						hora[6+ticks]= hexadecimalAString(scancode)[0];
 c102890:	e59f3340 	ldr	r3, [pc, #832]	; c102bd8 <temporizador+0x640>
 c102894:	e5932000 	ldr	r2, [r3]
 c102898:	e59f336c 	ldr	r3, [pc, #876]	; c102c0c <temporizador+0x674>
 c10289c:	e5933000 	ldr	r3, [r3]
 c1028a0:	e2833006 	add	r3, r3, #6
 c1028a4:	e0824003 	add	r4, r2, r3
 c1028a8:	e55b301b 	ldrb	r3, [fp, #-27]	; 0xffffffe5
 c1028ac:	e1a00003 	mov	r0, r3
 c1028b0:	ebfffaa6 	bl	c101350 <hexadecimalAString>
 c1028b4:	e1a03000 	mov	r3, r0
 c1028b8:	e5d33000 	ldrb	r3, [r3]
 c1028bc:	e5c43000 	strb	r3, [r4]
						tiempoTemp.seg = atoi(hora+6);
 c1028c0:	e59f3310 	ldr	r3, [pc, #784]	; c102bd8 <temporizador+0x640>
 c1028c4:	e5933000 	ldr	r3, [r3]
 c1028c8:	e2833006 	add	r3, r3, #6
 c1028cc:	e1a00003 	mov	r0, r3
 c1028d0:	eb00275b 	bl	c10c644 <atoi>
 c1028d4:	e1a02000 	mov	r2, r0
 c1028d8:	e59f32fc 	ldr	r3, [pc, #764]	; c102bdc <temporizador+0x644>
 c1028dc:	e5832004 	str	r2, [r3, #4]


						timeToStringT(&tiempoTemp, hora);
 c1028e0:	e59f32f0 	ldr	r3, [pc, #752]	; c102bd8 <temporizador+0x640>
 c1028e4:	e5933000 	ldr	r3, [r3]
 c1028e8:	e59f02ec 	ldr	r0, [pc, #748]	; c102bdc <temporizador+0x644>
 c1028ec:	e1a01003 	mov	r1, r3
 c1028f0:	ebfff621 	bl	c10017c <timeToStringT>
						ticks++;
 c1028f4:	e59f3310 	ldr	r3, [pc, #784]	; c102c0c <temporizador+0x674>
 c1028f8:	e5933000 	ldr	r3, [r3]
 c1028fc:	e2832001 	add	r2, r3, #1
 c102900:	e59f3304 	ldr	r3, [pc, #772]	; c102c0c <temporizador+0x674>
 c102904:	e5832000 	str	r2, [r3]


				}else {
					confFinish = TRUE;

					pintarDirectriz = TRUE;
 c102908:	ea000095 	b	c102b64 <temporizador+0x5cc>
						ticks++;
					}



				}else if(ticks < 4 && ticks >= 2){
 c10290c:	e59f32f8 	ldr	r3, [pc, #760]	; c102c0c <temporizador+0x674>
 c102910:	e5933000 	ldr	r3, [r3]
 c102914:	e3530003 	cmp	r3, #3
 c102918:	ca000029 	bgt	c1029c4 <temporizador+0x42c>
 c10291c:	e59f32e8 	ldr	r3, [pc, #744]	; c102c0c <temporizador+0x674>
 c102920:	e5933000 	ldr	r3, [r3]
 c102924:	e3530001 	cmp	r3, #1
 c102928:	da000025 	ble	c1029c4 <temporizador+0x42c>
					if(keypad_pressed()){
 c10292c:	eb000bd8 	bl	c105894 <keypad_pressed>
 c102930:	e1a03000 	mov	r3, r0
 c102934:	e3530000 	cmp	r3, #0
 c102938:	0a000089 	beq	c102b64 <temporizador+0x5cc>
						scancode = keypad_getchar();
 c10293c:	eb000c15 	bl	c105998 <keypad_getchar>
 c102940:	e1a03000 	mov	r3, r0
 c102944:	e54b301b 	strb	r3, [fp, #-27]	; 0xffffffe5
						hora[1+ticks]= hexadecimalAString(scancode)[0];
 c102948:	e59f3288 	ldr	r3, [pc, #648]	; c102bd8 <temporizador+0x640>
 c10294c:	e5932000 	ldr	r2, [r3]
 c102950:	e59f32b4 	ldr	r3, [pc, #692]	; c102c0c <temporizador+0x674>
 c102954:	e5933000 	ldr	r3, [r3]
 c102958:	e2833001 	add	r3, r3, #1
 c10295c:	e0824003 	add	r4, r2, r3
 c102960:	e55b301b 	ldrb	r3, [fp, #-27]	; 0xffffffe5
 c102964:	e1a00003 	mov	r0, r3
 c102968:	ebfffa78 	bl	c101350 <hexadecimalAString>
 c10296c:	e1a03000 	mov	r3, r0
 c102970:	e5d33000 	ldrb	r3, [r3]
 c102974:	e5c43000 	strb	r3, [r4]
						tiempoTemp.min = atoi(hora+3);
 c102978:	e59f3258 	ldr	r3, [pc, #600]	; c102bd8 <temporizador+0x640>
 c10297c:	e5933000 	ldr	r3, [r3]
 c102980:	e2833003 	add	r3, r3, #3
 c102984:	e1a00003 	mov	r0, r3
 c102988:	eb00272d 	bl	c10c644 <atoi>
 c10298c:	e1a02000 	mov	r2, r0
 c102990:	e59f3244 	ldr	r3, [pc, #580]	; c102bdc <temporizador+0x644>
 c102994:	e5832008 	str	r2, [r3, #8]
						timeToStringT(&tiempoTemp, hora);
 c102998:	e59f3238 	ldr	r3, [pc, #568]	; c102bd8 <temporizador+0x640>
 c10299c:	e5933000 	ldr	r3, [r3]
 c1029a0:	e59f0234 	ldr	r0, [pc, #564]	; c102bdc <temporizador+0x644>
 c1029a4:	e1a01003 	mov	r1, r3
 c1029a8:	ebfff5f3 	bl	c10017c <timeToStringT>
						ticks++;
 c1029ac:	e59f3258 	ldr	r3, [pc, #600]	; c102c0c <temporizador+0x674>
 c1029b0:	e5933000 	ldr	r3, [r3]
 c1029b4:	e2832001 	add	r2, r3, #1
 c1029b8:	e59f324c 	ldr	r3, [pc, #588]	; c102c0c <temporizador+0x674>
 c1029bc:	e5832000 	str	r2, [r3]
					}



				}else if(ticks < 4 && ticks >= 2){
					if(keypad_pressed()){
 c1029c0:	ea000067 	b	c102b64 <temporizador+0x5cc>

					}



				}else if(ticks<6 && ticks >= 4){
 c1029c4:	e59f3240 	ldr	r3, [pc, #576]	; c102c0c <temporizador+0x674>
 c1029c8:	e5933000 	ldr	r3, [r3]
 c1029cc:	e3530005 	cmp	r3, #5
 c1029d0:	ca000028 	bgt	c102a78 <temporizador+0x4e0>
 c1029d4:	e59f3230 	ldr	r3, [pc, #560]	; c102c0c <temporizador+0x674>
 c1029d8:	e5933000 	ldr	r3, [r3]
 c1029dc:	e3530003 	cmp	r3, #3
 c1029e0:	da000024 	ble	c102a78 <temporizador+0x4e0>

					if(keypad_pressed()){
 c1029e4:	eb000baa 	bl	c105894 <keypad_pressed>
 c1029e8:	e1a03000 	mov	r3, r0
 c1029ec:	e3530000 	cmp	r3, #0
 c1029f0:	0a00005b 	beq	c102b64 <temporizador+0x5cc>
						scancode = keypad_getchar();
 c1029f4:	eb000be7 	bl	c105998 <keypad_getchar>
 c1029f8:	e1a03000 	mov	r3, r0
 c1029fc:	e54b301b 	strb	r3, [fp, #-27]	; 0xffffffe5
						hora[ticks-4]= hexadecimalAString(scancode)[0];
 c102a00:	e59f31d0 	ldr	r3, [pc, #464]	; c102bd8 <temporizador+0x640>
 c102a04:	e5932000 	ldr	r2, [r3]
 c102a08:	e59f31fc 	ldr	r3, [pc, #508]	; c102c0c <temporizador+0x674>
 c102a0c:	e5933000 	ldr	r3, [r3]
 c102a10:	e2433004 	sub	r3, r3, #4
 c102a14:	e0824003 	add	r4, r2, r3
 c102a18:	e55b301b 	ldrb	r3, [fp, #-27]	; 0xffffffe5
 c102a1c:	e1a00003 	mov	r0, r3
 c102a20:	ebfffa4a 	bl	c101350 <hexadecimalAString>
 c102a24:	e1a03000 	mov	r3, r0
 c102a28:	e5d33000 	ldrb	r3, [r3]
 c102a2c:	e5c43000 	strb	r3, [r4]
						tiempoTemp.hora = atoi(hora);
 c102a30:	e59f31a0 	ldr	r3, [pc, #416]	; c102bd8 <temporizador+0x640>
 c102a34:	e5933000 	ldr	r3, [r3]
 c102a38:	e1a00003 	mov	r0, r3
 c102a3c:	eb002700 	bl	c10c644 <atoi>
 c102a40:	e1a02000 	mov	r2, r0
 c102a44:	e59f3190 	ldr	r3, [pc, #400]	; c102bdc <temporizador+0x644>
 c102a48:	e583200c 	str	r2, [r3, #12]
						timeToStringT(&tiempoTemp, hora);
 c102a4c:	e59f3184 	ldr	r3, [pc, #388]	; c102bd8 <temporizador+0x640>
 c102a50:	e5933000 	ldr	r3, [r3]
 c102a54:	e59f0180 	ldr	r0, [pc, #384]	; c102bdc <temporizador+0x644>
 c102a58:	e1a01003 	mov	r1, r3
 c102a5c:	ebfff5c6 	bl	c10017c <timeToStringT>
						ticks++;
 c102a60:	e59f31a4 	ldr	r3, [pc, #420]	; c102c0c <temporizador+0x674>
 c102a64:	e5933000 	ldr	r3, [r3]
 c102a68:	e2832001 	add	r2, r3, #1
 c102a6c:	e59f3198 	ldr	r3, [pc, #408]	; c102c0c <temporizador+0x674>
 c102a70:	e5832000 	str	r2, [r3]



				}else if(ticks<6 && ticks >= 4){

					if(keypad_pressed()){
 c102a74:	ea00003a 	b	c102b64 <temporizador+0x5cc>
						ticks++;
					}


				}else {
					confFinish = TRUE;
 c102a78:	e59f3188 	ldr	r3, [pc, #392]	; c102c08 <temporizador+0x670>
 c102a7c:	e3a02001 	mov	r2, #1
 c102a80:	e5c32000 	strb	r2, [r3]

					pintarDirectriz = TRUE;
 c102a84:	e59f3158 	ldr	r3, [pc, #344]	; c102be4 <temporizador+0x64c>
 c102a88:	e3a02001 	mov	r2, #1
 c102a8c:	e5c32000 	strb	r2, [r3]
 c102a90:	ea000033 	b	c102b64 <temporizador+0x5cc>
				}

			}
		}else{

				if(pb_scan()==PB_RIGHT){
 c102a94:	eb0011ff 	bl	c107298 <pb_scan>
 c102a98:	e1a03000 	mov	r3, r0
 c102a9c:	e3530080 	cmp	r3, #128	; 0x80
 c102aa0:	1a00000f 	bne	c102ae4 <temporizador+0x54c>
					iniTemp =  (!iniTemp);
 c102aa4:	e59f3134 	ldr	r3, [pc, #308]	; c102be0 <temporizador+0x648>
 c102aa8:	e5d33000 	ldrb	r3, [r3]
 c102aac:	e3530000 	cmp	r3, #0
 c102ab0:	13a03000 	movne	r3, #0
 c102ab4:	03a03001 	moveq	r3, #1
 c102ab8:	e20320ff 	and	r2, r3, #255	; 0xff
 c102abc:	e59f311c 	ldr	r3, [pc, #284]	; c102be0 <temporizador+0x648>
 c102ac0:	e5c32000 	strb	r2, [r3]
					pintarDirectriz = (!pintarDirectriz);
 c102ac4:	e59f3118 	ldr	r3, [pc, #280]	; c102be4 <temporizador+0x64c>
 c102ac8:	e5d33000 	ldrb	r3, [r3]
 c102acc:	e3530000 	cmp	r3, #0
 c102ad0:	13a03000 	movne	r3, #0
 c102ad4:	03a03001 	moveq	r3, #1
 c102ad8:	e20320ff 	and	r2, r3, #255	; 0xff
 c102adc:	e59f3100 	ldr	r3, [pc, #256]	; c102be4 <temporizador+0x64c>
 c102ae0:	e5c32000 	strb	r2, [r3]

				}


				if(ts_pressed()){
 c102ae4:	eb001c2d 	bl	c109ba0 <ts_pressed>
 c102ae8:	e1a03000 	mov	r3, r0
 c102aec:	e3530000 	cmp	r3, #0
 c102af0:	0a00001b 	beq	c102b64 <temporizador+0x5cc>
					ts_getpos( &x, &y);
 c102af4:	e24b201e 	sub	r2, fp, #30
 c102af8:	e24b3020 	sub	r3, fp, #32
 c102afc:	e1a00002 	mov	r0, r2
 c102b00:	e1a01003 	mov	r1, r3
 c102b04:	eb001caf 	bl	c109dc8 <ts_getpos>

					if( (x>77 && y>170 && x<245  && y<230)||iniTemp){
 c102b08:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
 c102b0c:	e353004d 	cmp	r3, #77	; 0x4d
 c102b10:	9a000008 	bls	c102b38 <temporizador+0x5a0>
 c102b14:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
 c102b18:	e35300aa 	cmp	r3, #170	; 0xaa
 c102b1c:	9a000005 	bls	c102b38 <temporizador+0x5a0>
 c102b20:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
 c102b24:	e35300f4 	cmp	r3, #244	; 0xf4
 c102b28:	8a000002 	bhi	c102b38 <temporizador+0x5a0>
 c102b2c:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
 c102b30:	e35300e5 	cmp	r3, #229	; 0xe5
 c102b34:	9a000003 	bls	c102b48 <temporizador+0x5b0>
 c102b38:	e59f30a0 	ldr	r3, [pc, #160]	; c102be0 <temporizador+0x648>
 c102b3c:	e5d33000 	ldrb	r3, [r3]
 c102b40:	e3530000 	cmp	r3, #0
 c102b44:	0a000006 	beq	c102b64 <temporizador+0x5cc>
					iniTemp = TRUE;
 c102b48:	e59f3090 	ldr	r3, [pc, #144]	; c102be0 <temporizador+0x648>
 c102b4c:	e3a02001 	mov	r2, #1
 c102b50:	e5c32000 	strb	r2, [r3]
 c102b54:	ea000002 	b	c102b64 <temporizador+0x5cc>


				}else {
					confFinish = TRUE;

					pintarDirectriz = TRUE;
 c102b58:	e1a00000 	nop			; (mov r0, r0)
 c102b5c:	ea000000 	b	c102b64 <temporizador+0x5cc>
 c102b60:	e1a00000 	nop			; (mov r0, r0)



			}

			lcd_puts_x3( 40, 40, BLACK, hora );
 c102b64:	e59f306c 	ldr	r3, [pc, #108]	; c102bd8 <temporizador+0x640>
 c102b68:	e5933000 	ldr	r3, [r3]
 c102b6c:	e3a00028 	mov	r0, #40	; 0x28
 c102b70:	e3a01028 	mov	r1, #40	; 0x28
 c102b74:	e3a0200f 	mov	r2, #15
 c102b78:	eb000fc4 	bl	c106a90 <lcd_puts_x3>
 c102b7c:	ea000012 	b	c102bcc <temporizador+0x634>
				alarmaSonido();
				lcd_clear();
			}*/
		}else{

		lcd_clear();
 c102b80:	eb000c7f 	bl	c105d84 <lcd_clear>

		relojMenu = TRUE;
 c102b84:	e59f3084 	ldr	r3, [pc, #132]	; c102c10 <temporizador+0x678>
 c102b88:	e3a02001 	mov	r2, #1
 c102b8c:	e5c32000 	strb	r2, [r3]
		tempFlag = FALSE;
 c102b90:	e59f305c 	ldr	r3, [pc, #92]	; c102bf4 <temporizador+0x65c>
 c102b94:	e3a02000 	mov	r2, #0
 c102b98:	e5c32000 	strb	r2, [r3]
		backTemp = FALSE;
 c102b9c:	e59f3054 	ldr	r3, [pc, #84]	; c102bf8 <temporizador+0x660>
 c102ba0:	e3a02000 	mov	r2, #0
 c102ba4:	e5c32000 	strb	r2, [r3]
		conf = TRUE;
 c102ba8:	e59f3050 	ldr	r3, [pc, #80]	; c102c00 <temporizador+0x668>
 c102bac:	e3a02001 	mov	r2, #1
 c102bb0:	e5c32000 	strb	r2, [r3]
		ticks = 0;
 c102bb4:	e59f3050 	ldr	r3, [pc, #80]	; c102c0c <temporizador+0x674>
 c102bb8:	e3a02000 	mov	r2, #0
 c102bbc:	e5832000 	str	r2, [r3]
		reentrar = TRUE;
 c102bc0:	e59f304c 	ldr	r3, [pc, #76]	; c102c14 <temporizador+0x67c>
 c102bc4:	e3a02001 	mov	r2, #1
 c102bc8:	e5c32000 	strb	r2, [r3]
	}




}
 c102bcc:	e24bd010 	sub	sp, fp, #16
 c102bd0:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c102bd4:	e12fff1e 	bx	lr
 c102bd8:	0c10e744 	.word	0x0c10e744
 c102bdc:	0c10efdc 	.word	0x0c10efdc
 c102be0:	0c1ab420 	.word	0x0c1ab420
 c102be4:	0c1ab419 	.word	0x0c1ab419
 c102be8:	0c10c9b4 	.word	0x0c10c9b4
 c102bec:	0c10c9c8 	.word	0x0c10c9c8
 c102bf0:	0c10c9d8 	.word	0x0c10c9d8
 c102bf4:	0c10eb95 	.word	0x0c10eb95
 c102bf8:	0c10eb91 	.word	0x0c10eb91
 c102bfc:	0c10c890 	.word	0x0c10c890
 c102c00:	0c10efd1 	.word	0x0c10efd1
 c102c04:	0c10c9e8 	.word	0x0c10c9e8
 c102c08:	0c10f010 	.word	0x0c10f010
 c102c0c:	0c1ab428 	.word	0x0c1ab428
 c102c10:	0c10eb8b 	.word	0x0c10eb8b
 c102c14:	0c10eff8 	.word	0x0c10eff8

0c102c18 <alarma>:



void alarma(void){
 c102c18:	e1a0c00d 	mov	ip, sp
 c102c1c:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c102c20:	e24cb004 	sub	fp, ip, #4
 c102c24:	e24dd014 	sub	sp, sp, #20
	//uda1341ts_init();
	//pbs_init();

	static char* hora = "00:00";
	timeToStringAla(&Alarma, hora);
 c102c28:	e59f35e8 	ldr	r3, [pc, #1512]	; c103218 <alarma+0x600>
 c102c2c:	e5933000 	ldr	r3, [r3]
 c102c30:	e59f05e4 	ldr	r0, [pc, #1508]	; c10321c <alarma+0x604>
 c102c34:	e1a01003 	mov	r1, r3
 c102c38:	ebfff577 	bl	c10021c <timeToStringAla>
	if (!alarmaFlag){
 c102c3c:	e59f35dc 	ldr	r3, [pc, #1500]	; c103220 <alarma+0x608>
 c102c40:	e5d33000 	ldrb	r3, [r3]
 c102c44:	e3530000 	cmp	r3, #0
 c102c48:	1a000003 	bne	c102c5c <alarma+0x44>
		lcd_clear();
 c102c4c:	eb000c4c 	bl	c105d84 <lcd_clear>
		alarmaFlag = TRUE;
 c102c50:	e59f35c8 	ldr	r3, [pc, #1480]	; c103220 <alarma+0x608>
 c102c54:	e3a02001 	mov	r2, #1
 c102c58:	e5c32000 	strb	r2, [r3]
	}


	if (!alarmaFlag && Alarma.dec == 0){
 c102c5c:	e59f35bc 	ldr	r3, [pc, #1468]	; c103220 <alarma+0x608>
 c102c60:	e5d33000 	ldrb	r3, [r3]
 c102c64:	e3530000 	cmp	r3, #0
 c102c68:	1a000020 	bne	c102cf0 <alarma+0xd8>
 c102c6c:	e59f35a8 	ldr	r3, [pc, #1448]	; c10321c <alarma+0x604>
 c102c70:	e5933000 	ldr	r3, [r3]
 c102c74:	e3530000 	cmp	r3, #0
 c102c78:	1a00001c 	bne	c102cf0 <alarma+0xd8>
		lcd_clear();
 c102c7c:	eb000c40 	bl	c105d84 <lcd_clear>
		alarmaFlag = TRUE;
 c102c80:	e59f3598 	ldr	r3, [pc, #1432]	; c103220 <alarma+0x608>
 c102c84:	e3a02001 	mov	r2, #1
 c102c88:	e5c32000 	strb	r2, [r3]
		lcd_puts_x2(20, 50, BLACK, "Tienes una alarma: ");
 c102c8c:	e3a00014 	mov	r0, #20
 c102c90:	e3a01032 	mov	r1, #50	; 0x32
 c102c94:	e3a0200f 	mov	r2, #15
 c102c98:	e59f3584 	ldr	r3, [pc, #1412]	; c103224 <alarma+0x60c>
 c102c9c:	eb000f3d 	bl	c106998 <lcd_puts_x2>
		lcd_puts_x2(102, 125, BLACK, hora);
 c102ca0:	e59f3570 	ldr	r3, [pc, #1392]	; c103218 <alarma+0x600>
 c102ca4:	e5933000 	ldr	r3, [r3]
 c102ca8:	e3a00066 	mov	r0, #102	; 0x66
 c102cac:	e3a0107d 	mov	r1, #125	; 0x7d
 c102cb0:	e3a0200f 	mov	r2, #15
 c102cb4:	eb000f37 	bl	c106998 <lcd_puts_x2>
		lcd_draw_box( 75, 180, 243,225, BLACK, 2 );
 c102cb8:	e3a0300f 	mov	r3, #15
 c102cbc:	e58d3000 	str	r3, [sp]
 c102cc0:	e3a03002 	mov	r3, #2
 c102cc4:	e58d3004 	str	r3, [sp, #4]
 c102cc8:	e3a0004b 	mov	r0, #75	; 0x4b
 c102ccc:	e3a010b4 	mov	r1, #180	; 0xb4
 c102cd0:	e3a020f3 	mov	r2, #243	; 0xf3
 c102cd4:	e3a030e1 	mov	r3, #225	; 0xe1
 c102cd8:	eb000d2b 	bl	c10618c <lcd_draw_box>
		lcd_puts_x2(96, 188, BLACK, "ELIMINAR");
 c102cdc:	e3a00060 	mov	r0, #96	; 0x60
 c102ce0:	e3a010bc 	mov	r1, #188	; 0xbc
 c102ce4:	e3a0200f 	mov	r2, #15
 c102ce8:	e59f3538 	ldr	r3, [pc, #1336]	; c103228 <alarma+0x610>
 c102cec:	eb000f29 	bl	c106998 <lcd_puts_x2>



	}
	if(Alarma.dec == 0 && MostrarA ){
 c102cf0:	e59f3524 	ldr	r3, [pc, #1316]	; c10321c <alarma+0x604>
 c102cf4:	e5933000 	ldr	r3, [r3]
 c102cf8:	e3530000 	cmp	r3, #0
 c102cfc:	1a000020 	bne	c102d84 <alarma+0x16c>
 c102d00:	e59f3524 	ldr	r3, [pc, #1316]	; c10322c <alarma+0x614>
 c102d04:	e5d33000 	ldrb	r3, [r3]
 c102d08:	e3530000 	cmp	r3, #0
 c102d0c:	0a00001c 	beq	c102d84 <alarma+0x16c>
		lcd_clear();
 c102d10:	eb000c1b 	bl	c105d84 <lcd_clear>
		lcd_puts_x2(20, 50, BLACK, "Tienes una alarma: ");
 c102d14:	e3a00014 	mov	r0, #20
 c102d18:	e3a01032 	mov	r1, #50	; 0x32
 c102d1c:	e3a0200f 	mov	r2, #15
 c102d20:	e59f34fc 	ldr	r3, [pc, #1276]	; c103224 <alarma+0x60c>
 c102d24:	eb000f1b 	bl	c106998 <lcd_puts_x2>
		lcd_puts_x2(120, 125, BLACK, hora);
 c102d28:	e59f34e8 	ldr	r3, [pc, #1256]	; c103218 <alarma+0x600>
 c102d2c:	e5933000 	ldr	r3, [r3]
 c102d30:	e3a00078 	mov	r0, #120	; 0x78
 c102d34:	e3a0107d 	mov	r1, #125	; 0x7d
 c102d38:	e3a0200f 	mov	r2, #15
 c102d3c:	eb000f15 	bl	c106998 <lcd_puts_x2>
		lcd_draw_box( 75, 180, 243,225, BLACK, 2 );
 c102d40:	e3a0300f 	mov	r3, #15
 c102d44:	e58d3000 	str	r3, [sp]
 c102d48:	e3a03002 	mov	r3, #2
 c102d4c:	e58d3004 	str	r3, [sp, #4]
 c102d50:	e3a0004b 	mov	r0, #75	; 0x4b
 c102d54:	e3a010b4 	mov	r1, #180	; 0xb4
 c102d58:	e3a020f3 	mov	r2, #243	; 0xf3
 c102d5c:	e3a030e1 	mov	r3, #225	; 0xe1
 c102d60:	eb000d09 	bl	c10618c <lcd_draw_box>
		lcd_puts_x2(96, 188, BLACK, "ELIMINAR");
 c102d64:	e3a00060 	mov	r0, #96	; 0x60
 c102d68:	e3a010bc 	mov	r1, #188	; 0xbc
 c102d6c:	e3a0200f 	mov	r2, #15
 c102d70:	e59f34b0 	ldr	r3, [pc, #1200]	; c103228 <alarma+0x610>
 c102d74:	eb000f07 	bl	c106998 <lcd_puts_x2>

		MostrarA = FALSE;
 c102d78:	e59f34ac 	ldr	r3, [pc, #1196]	; c10322c <alarma+0x614>
 c102d7c:	e3a02000 	mov	r2, #0
 c102d80:	e5c32000 	strb	r2, [r3]
	}
	if(Alarma.dec == -1){
 c102d84:	e59f3490 	ldr	r3, [pc, #1168]	; c10321c <alarma+0x604>
 c102d88:	e5933000 	ldr	r3, [r3]
 c102d8c:	e3730001 	cmn	r3, #1
 c102d90:	1a00001d 	bne	c102e0c <alarma+0x1f4>

		lcd_puts_x2(20, 150, BLACK, "Configurando...");
 c102d94:	e3a00014 	mov	r0, #20
 c102d98:	e3a01096 	mov	r1, #150	; 0x96
 c102d9c:	e3a0200f 	mov	r2, #15
 c102da0:	e59f3488 	ldr	r3, [pc, #1160]	; c103230 <alarma+0x618>
 c102da4:	eb000efb 	bl	c106998 <lcd_puts_x2>
		if( Alarma.dec == -1 && Alarma.hora !=0 && Alarma.min !=0){
 c102da8:	e59f346c 	ldr	r3, [pc, #1132]	; c10321c <alarma+0x604>
 c102dac:	e5933000 	ldr	r3, [r3]
 c102db0:	e3730001 	cmn	r3, #1
 c102db4:	1a000011 	bne	c102e00 <alarma+0x1e8>
 c102db8:	e59f345c 	ldr	r3, [pc, #1116]	; c10321c <alarma+0x604>
 c102dbc:	e593300c 	ldr	r3, [r3, #12]
 c102dc0:	e3530000 	cmp	r3, #0
 c102dc4:	0a00000d 	beq	c102e00 <alarma+0x1e8>
 c102dc8:	e59f344c 	ldr	r3, [pc, #1100]	; c10321c <alarma+0x604>
 c102dcc:	e5933008 	ldr	r3, [r3, #8]
 c102dd0:	e3530000 	cmp	r3, #0
 c102dd4:	0a000009 	beq	c102e00 <alarma+0x1e8>
			lcd_puts(20, 190, BLACK, "Pulsa el boton dch para activar");
 c102dd8:	e3a00014 	mov	r0, #20
 c102ddc:	e3a010be 	mov	r1, #190	; 0xbe
 c102de0:	e3a0200f 	mov	r2, #15
 c102de4:	e59f3448 	ldr	r3, [pc, #1096]	; c103234 <alarma+0x61c>
 c102de8:	eb000d6b 	bl	c10639c <lcd_puts>
			lcd_puts(20, 210, BLACK, "la alarma por defecto");
 c102dec:	e3a00014 	mov	r0, #20
 c102df0:	e3a010d2 	mov	r1, #210	; 0xd2
 c102df4:	e3a0200f 	mov	r2, #15
 c102df8:	e59f3438 	ldr	r3, [pc, #1080]	; c103238 <alarma+0x620>
 c102dfc:	eb000d66 	bl	c10639c <lcd_puts>
		}

		confPintar = TRUE;
 c102e00:	e59f3434 	ldr	r3, [pc, #1076]	; c10323c <alarma+0x624>
 c102e04:	e3a02001 	mov	r2, #1
 c102e08:	e5c32000 	strb	r2, [r3]

	}
	if(pb_scan()==PB_RIGHT && Alarma.dec == -1 && Alarma.hora !=0 && Alarma.min !=0){
 c102e0c:	eb001121 	bl	c107298 <pb_scan>
 c102e10:	e1a03000 	mov	r3, r0
 c102e14:	e3530080 	cmp	r3, #128	; 0x80
 c102e18:	1a00000e 	bne	c102e58 <alarma+0x240>
 c102e1c:	e59f33f8 	ldr	r3, [pc, #1016]	; c10321c <alarma+0x604>
 c102e20:	e5933000 	ldr	r3, [r3]
 c102e24:	e3730001 	cmn	r3, #1
 c102e28:	1a00000a 	bne	c102e58 <alarma+0x240>
 c102e2c:	e59f33e8 	ldr	r3, [pc, #1000]	; c10321c <alarma+0x604>
 c102e30:	e593300c 	ldr	r3, [r3, #12]
 c102e34:	e3530000 	cmp	r3, #0
 c102e38:	0a000006 	beq	c102e58 <alarma+0x240>
 c102e3c:	e59f33d8 	ldr	r3, [pc, #984]	; c10321c <alarma+0x604>
 c102e40:	e5933008 	ldr	r3, [r3, #8]
 c102e44:	e3530000 	cmp	r3, #0
 c102e48:	0a000002 	beq	c102e58 <alarma+0x240>
		Alarma.dec = 0;
 c102e4c:	e59f33c8 	ldr	r3, [pc, #968]	; c10321c <alarma+0x604>
 c102e50:	e3a02000 	mov	r2, #0
 c102e54:	e5832000 	str	r2, [r3]
	}
	if(!backAlarma){
 c102e58:	e59f33e0 	ldr	r3, [pc, #992]	; c103240 <alarma+0x628>
 c102e5c:	e5d33000 	ldrb	r3, [r3]
 c102e60:	e3530000 	cmp	r3, #0
 c102e64:	1a0000c3 	bne	c103178 <alarma+0x560>

		uint16 x, y;
		timeToStringAla(&Alarma ,hora);
 c102e68:	e59f33a8 	ldr	r3, [pc, #936]	; c103218 <alarma+0x600>
 c102e6c:	e5933000 	ldr	r3, [r3]
 c102e70:	e59f03a4 	ldr	r0, [pc, #932]	; c10321c <alarma+0x604>
 c102e74:	e1a01003 	mov	r1, r3
 c102e78:	ebfff4e7 	bl	c10021c <timeToStringAla>
		lcd_puts( 3, 8, BLACK, "back" );
 c102e7c:	e3a00003 	mov	r0, #3
 c102e80:	e3a01008 	mov	r1, #8
 c102e84:	e3a0200f 	mov	r2, #15
 c102e88:	e59f33b4 	ldr	r3, [pc, #948]	; c103244 <alarma+0x62c>
 c102e8c:	eb000d42 	bl	c10639c <lcd_puts>
		lcd_draw_box( 0, 0, 45,30, BLACK, 2 );
 c102e90:	e3a0300f 	mov	r3, #15
 c102e94:	e58d3000 	str	r3, [sp]
 c102e98:	e3a03002 	mov	r3, #2
 c102e9c:	e58d3004 	str	r3, [sp, #4]
 c102ea0:	e3a00000 	mov	r0, #0
 c102ea4:	e3a01000 	mov	r1, #0
 c102ea8:	e3a0202d 	mov	r2, #45	; 0x2d
 c102eac:	e3a0301e 	mov	r3, #30
 c102eb0:	eb000cb5 	bl	c10618c <lcd_draw_box>

		if(ts_pressed()){
 c102eb4:	eb001b39 	bl	c109ba0 <ts_pressed>
 c102eb8:	e1a03000 	mov	r3, r0
 c102ebc:	e3530000 	cmp	r3, #0
 c102ec0:	0a000004 	beq	c102ed8 <alarma+0x2c0>
			ts_getpos( &x, &y );
 c102ec4:	e24b2018 	sub	r2, fp, #24
 c102ec8:	e24b301a 	sub	r3, fp, #26
 c102ecc:	e1a00002 	mov	r0, r2
 c102ed0:	e1a01003 	mov	r1, r3
 c102ed4:	eb001bbb 	bl	c109dc8 <ts_getpos>
		}


		if( x>0 && y>0 && x<45  && y<30){
 c102ed8:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c102edc:	e3530000 	cmp	r3, #0
 c102ee0:	0a00000b 	beq	c102f14 <alarma+0x2fc>
 c102ee4:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c102ee8:	e3530000 	cmp	r3, #0
 c102eec:	0a000008 	beq	c102f14 <alarma+0x2fc>
 c102ef0:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c102ef4:	e353002c 	cmp	r3, #44	; 0x2c
 c102ef8:	8a000005 	bhi	c102f14 <alarma+0x2fc>
 c102efc:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c102f00:	e353001d 	cmp	r3, #29
 c102f04:	8a000002 	bhi	c102f14 <alarma+0x2fc>
			backAlarma = TRUE;
 c102f08:	e59f3330 	ldr	r3, [pc, #816]	; c103240 <alarma+0x628>
 c102f0c:	e3a02001 	mov	r2, #1
 c102f10:	e5c32000 	strb	r2, [r3]
		}

		if(Alarma.dec == 0){
 c102f14:	e59f3300 	ldr	r3, [pc, #768]	; c10321c <alarma+0x604>
 c102f18:	e5933000 	ldr	r3, [r3]
 c102f1c:	e3530000 	cmp	r3, #0
 c102f20:	1a00001e 	bne	c102fa0 <alarma+0x388>



			if( x>75&& y>180 && x<248  && y<225){
 c102f24:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c102f28:	e353004b 	cmp	r3, #75	; 0x4b
 c102f2c:	9a0000a5 	bls	c1031c8 <alarma+0x5b0>
 c102f30:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c102f34:	e35300b4 	cmp	r3, #180	; 0xb4
 c102f38:	9a0000a4 	bls	c1031d0 <alarma+0x5b8>
 c102f3c:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c102f40:	e35300f7 	cmp	r3, #247	; 0xf7
 c102f44:	8a0000a3 	bhi	c1031d8 <alarma+0x5c0>
 c102f48:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c102f4c:	e35300e0 	cmp	r3, #224	; 0xe0
 c102f50:	8a0000a2 	bhi	c1031e0 <alarma+0x5c8>
				Alarma.hora = 0;
 c102f54:	e59f32c0 	ldr	r3, [pc, #704]	; c10321c <alarma+0x604>
 c102f58:	e3a02000 	mov	r2, #0
 c102f5c:	e583200c 	str	r2, [r3, #12]
				Alarma.min = 0;
 c102f60:	e59f32b4 	ldr	r3, [pc, #692]	; c10321c <alarma+0x604>
 c102f64:	e3a02000 	mov	r2, #0
 c102f68:	e5832008 	str	r2, [r3, #8]
				Alarma.dec = -1;
 c102f6c:	e59f32a8 	ldr	r3, [pc, #680]	; c10321c <alarma+0x604>
 c102f70:	e3e02000 	mvn	r2, #0
 c102f74:	e5832000 	str	r2, [r3]
				timeToStringAla(&Alarma, hora);
 c102f78:	e59f3298 	ldr	r3, [pc, #664]	; c103218 <alarma+0x600>
 c102f7c:	e5933000 	ldr	r3, [r3]
 c102f80:	e59f0294 	ldr	r0, [pc, #660]	; c10321c <alarma+0x604>
 c102f84:	e1a01003 	mov	r1, r3
 c102f88:	ebfff4a3 	bl	c10021c <timeToStringAla>
				confPintar = FALSE;
 c102f8c:	e59f32a8 	ldr	r3, [pc, #680]	; c10323c <alarma+0x624>
 c102f90:	e3a02000 	mov	r2, #0
 c102f94:	e5c32000 	strb	r2, [r3]
				lcd_clear();
 c102f98:	eb000b79 	bl	c105d84 <lcd_clear>


			}else{
				ticks = 0;
				Alarma.hora = 0;
				Alarma.min = 0;
 c102f9c:	ea000090 	b	c1031e4 <alarma+0x5cc>
		else{


			uint8 scancode;

			if(Alarma.hora < 24 && Alarma.min < 59){
 c102fa0:	e59f3274 	ldr	r3, [pc, #628]	; c10321c <alarma+0x604>
 c102fa4:	e593300c 	ldr	r3, [r3, #12]
 c102fa8:	e3530017 	cmp	r3, #23
 c102fac:	ca000067 	bgt	c103150 <alarma+0x538>
 c102fb0:	e59f3264 	ldr	r3, [pc, #612]	; c10321c <alarma+0x604>
 c102fb4:	e5933008 	ldr	r3, [r3, #8]
 c102fb8:	e353003a 	cmp	r3, #58	; 0x3a
 c102fbc:	ca000063 	bgt	c103150 <alarma+0x538>
				if(ticks  < 2)
 c102fc0:	e59f3280 	ldr	r3, [pc, #640]	; c103248 <alarma+0x630>
 c102fc4:	e5933000 	ldr	r3, [r3]
 c102fc8:	e3530001 	cmp	r3, #1
 c102fcc:	ca000025 	bgt	c103068 <alarma+0x450>
				{

					if(keypad_pressed()){
 c102fd0:	eb000a2f 	bl	c105894 <keypad_pressed>
 c102fd4:	e1a03000 	mov	r3, r0
 c102fd8:	e3530000 	cmp	r3, #0
 c102fdc:	0a00004d 	beq	c103118 <alarma+0x500>
						scancode = keypad_getchar();
 c102fe0:	eb000a6c 	bl	c105998 <keypad_getchar>
 c102fe4:	e1a03000 	mov	r3, r0
 c102fe8:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
						hora[3+ticks]= hexadecimalAString(scancode)[0];
 c102fec:	e59f3224 	ldr	r3, [pc, #548]	; c103218 <alarma+0x600>
 c102ff0:	e5932000 	ldr	r2, [r3]
 c102ff4:	e59f324c 	ldr	r3, [pc, #588]	; c103248 <alarma+0x630>
 c102ff8:	e5933000 	ldr	r3, [r3]
 c102ffc:	e2833003 	add	r3, r3, #3
 c103000:	e0824003 	add	r4, r2, r3
 c103004:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c103008:	e1a00003 	mov	r0, r3
 c10300c:	ebfff8cf 	bl	c101350 <hexadecimalAString>
 c103010:	e1a03000 	mov	r3, r0
 c103014:	e5d33000 	ldrb	r3, [r3]
 c103018:	e5c43000 	strb	r3, [r4]
						Alarma.min = atoi(hora+3);
 c10301c:	e59f31f4 	ldr	r3, [pc, #500]	; c103218 <alarma+0x600>
 c103020:	e5933000 	ldr	r3, [r3]
 c103024:	e2833003 	add	r3, r3, #3
 c103028:	e1a00003 	mov	r0, r3
 c10302c:	eb002584 	bl	c10c644 <atoi>
 c103030:	e1a02000 	mov	r2, r0
 c103034:	e59f31e0 	ldr	r3, [pc, #480]	; c10321c <alarma+0x604>
 c103038:	e5832008 	str	r2, [r3, #8]
						timeToStringAla(&Alarma, hora);
 c10303c:	e59f31d4 	ldr	r3, [pc, #468]	; c103218 <alarma+0x600>
 c103040:	e5933000 	ldr	r3, [r3]
 c103044:	e59f01d0 	ldr	r0, [pc, #464]	; c10321c <alarma+0x604>
 c103048:	e1a01003 	mov	r1, r3
 c10304c:	ebfff472 	bl	c10021c <timeToStringAla>
						ticks++;
 c103050:	e59f31f0 	ldr	r3, [pc, #496]	; c103248 <alarma+0x630>
 c103054:	e5933000 	ldr	r3, [r3]
 c103058:	e2832001 	add	r2, r3, #1
 c10305c:	e59f31e4 	ldr	r3, [pc, #484]	; c103248 <alarma+0x630>
 c103060:	e5832000 	str	r2, [r3]
 c103064:	ea00002b 	b	c103118 <alarma+0x500>

					}
				}

				else if(ticks >= 2 && ticks < 4){
 c103068:	e59f31d8 	ldr	r3, [pc, #472]	; c103248 <alarma+0x630>
 c10306c:	e5933000 	ldr	r3, [r3]
 c103070:	e3530001 	cmp	r3, #1
 c103074:	da000027 	ble	c103118 <alarma+0x500>
 c103078:	e59f31c8 	ldr	r3, [pc, #456]	; c103248 <alarma+0x630>
 c10307c:	e5933000 	ldr	r3, [r3]
 c103080:	e3530003 	cmp	r3, #3
 c103084:	ca000023 	bgt	c103118 <alarma+0x500>


					if(keypad_pressed()){
 c103088:	eb000a01 	bl	c105894 <keypad_pressed>
 c10308c:	e1a03000 	mov	r3, r0
 c103090:	e3530000 	cmp	r3, #0
 c103094:	0a00001f 	beq	c103118 <alarma+0x500>
						scancode = keypad_getchar();
 c103098:	eb000a3e 	bl	c105998 <keypad_getchar>
 c10309c:	e1a03000 	mov	r3, r0
 c1030a0:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
						hora[ticks-2]= hexadecimalAString(scancode)[0];
 c1030a4:	e59f316c 	ldr	r3, [pc, #364]	; c103218 <alarma+0x600>
 c1030a8:	e5932000 	ldr	r2, [r3]
 c1030ac:	e59f3194 	ldr	r3, [pc, #404]	; c103248 <alarma+0x630>
 c1030b0:	e5933000 	ldr	r3, [r3]
 c1030b4:	e2433002 	sub	r3, r3, #2
 c1030b8:	e0824003 	add	r4, r2, r3
 c1030bc:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c1030c0:	e1a00003 	mov	r0, r3
 c1030c4:	ebfff8a1 	bl	c101350 <hexadecimalAString>
 c1030c8:	e1a03000 	mov	r3, r0
 c1030cc:	e5d33000 	ldrb	r3, [r3]
 c1030d0:	e5c43000 	strb	r3, [r4]
						Alarma.hora = atoi(hora);
 c1030d4:	e59f313c 	ldr	r3, [pc, #316]	; c103218 <alarma+0x600>
 c1030d8:	e5933000 	ldr	r3, [r3]
 c1030dc:	e1a00003 	mov	r0, r3
 c1030e0:	eb002557 	bl	c10c644 <atoi>
 c1030e4:	e1a02000 	mov	r2, r0
 c1030e8:	e59f312c 	ldr	r3, [pc, #300]	; c10321c <alarma+0x604>
 c1030ec:	e583200c 	str	r2, [r3, #12]
						timeToStringAla(&Alarma, hora);
 c1030f0:	e59f3120 	ldr	r3, [pc, #288]	; c103218 <alarma+0x600>
 c1030f4:	e5933000 	ldr	r3, [r3]
 c1030f8:	e59f011c 	ldr	r0, [pc, #284]	; c10321c <alarma+0x604>
 c1030fc:	e1a01003 	mov	r1, r3
 c103100:	ebfff445 	bl	c10021c <timeToStringAla>
						ticks++;
 c103104:	e59f313c 	ldr	r3, [pc, #316]	; c103248 <alarma+0x630>
 c103108:	e5933000 	ldr	r3, [r3]
 c10310c:	e2832001 	add	r2, r3, #1
 c103110:	e59f3130 	ldr	r3, [pc, #304]	; c103248 <alarma+0x630>
 c103114:	e5832000 	str	r2, [r3]

					}
				}


				if(ticks == 4){
 c103118:	e59f3128 	ldr	r3, [pc, #296]	; c103248 <alarma+0x630>
 c10311c:	e5933000 	ldr	r3, [r3]
 c103120:	e3530004 	cmp	r3, #4
 c103124:	1a00002e 	bne	c1031e4 <alarma+0x5cc>
					Alarma.dec = 0;
 c103128:	e59f30ec 	ldr	r3, [pc, #236]	; c10321c <alarma+0x604>
 c10312c:	e3a02000 	mov	r2, #0
 c103130:	e5832000 	str	r2, [r3]
					ticks = 0;
 c103134:	e59f310c 	ldr	r3, [pc, #268]	; c103248 <alarma+0x630>
 c103138:	e3a02000 	mov	r2, #0
 c10313c:	e5832000 	str	r2, [r3]
					MostrarA = TRUE;
 c103140:	e59f30e4 	ldr	r3, [pc, #228]	; c10322c <alarma+0x614>
 c103144:	e3a02001 	mov	r2, #1
 c103148:	e5c32000 	strb	r2, [r3]

					}
				}


				if(ticks == 4){
 c10314c:	ea000024 	b	c1031e4 <alarma+0x5cc>
				}



			}else{
				ticks = 0;
 c103150:	e59f30f0 	ldr	r3, [pc, #240]	; c103248 <alarma+0x630>
 c103154:	e3a02000 	mov	r2, #0
 c103158:	e5832000 	str	r2, [r3]
				Alarma.hora = 0;
 c10315c:	e59f30b8 	ldr	r3, [pc, #184]	; c10321c <alarma+0x604>
 c103160:	e3a02000 	mov	r2, #0
 c103164:	e583200c 	str	r2, [r3, #12]
				Alarma.min = 0;
 c103168:	e59f30ac 	ldr	r3, [pc, #172]	; c10321c <alarma+0x604>
 c10316c:	e3a02000 	mov	r2, #0
 c103170:	e5832008 	str	r2, [r3, #8]
 c103174:	ea00001a 	b	c1031e4 <alarma+0x5cc>
			}
		}
	}
	else{
		lcd_clear();
 c103178:	eb000b01 	bl	c105d84 <lcd_clear>
		relojMenu = TRUE;
 c10317c:	e59f30c8 	ldr	r3, [pc, #200]	; c10324c <alarma+0x634>
 c103180:	e3a02001 	mov	r2, #1
 c103184:	e5c32000 	strb	r2, [r3]
		alarmaFlag = FALSE;
 c103188:	e59f3090 	ldr	r3, [pc, #144]	; c103220 <alarma+0x608>
 c10318c:	e3a02000 	mov	r2, #0
 c103190:	e5c32000 	strb	r2, [r3]
		backAlarma = FALSE;
 c103194:	e59f30a4 	ldr	r3, [pc, #164]	; c103240 <alarma+0x628>
 c103198:	e3a02000 	mov	r2, #0
 c10319c:	e5c32000 	strb	r2, [r3]
		MostrarA = TRUE;
 c1031a0:	e59f3084 	ldr	r3, [pc, #132]	; c10322c <alarma+0x614>
 c1031a4:	e3a02001 	mov	r2, #1
 c1031a8:	e5c32000 	strb	r2, [r3]
		reentrar = TRUE;
 c1031ac:	e59f309c 	ldr	r3, [pc, #156]	; c103250 <alarma+0x638>
 c1031b0:	e3a02001 	mov	r2, #1
 c1031b4:	e5c32000 	strb	r2, [r3]
		ticks = 0;
 c1031b8:	e59f3088 	ldr	r3, [pc, #136]	; c103248 <alarma+0x630>
 c1031bc:	e3a02000 	mov	r2, #0
 c1031c0:	e5832000 	str	r2, [r3]
 c1031c4:	ea000006 	b	c1031e4 <alarma+0x5cc>


			}else{
				ticks = 0;
				Alarma.hora = 0;
				Alarma.min = 0;
 c1031c8:	e1a00000 	nop			; (mov r0, r0)
 c1031cc:	ea000004 	b	c1031e4 <alarma+0x5cc>
 c1031d0:	e1a00000 	nop			; (mov r0, r0)
 c1031d4:	ea000002 	b	c1031e4 <alarma+0x5cc>
 c1031d8:	e1a00000 	nop			; (mov r0, r0)
 c1031dc:	ea000000 	b	c1031e4 <alarma+0x5cc>
 c1031e0:	e1a00000 	nop			; (mov r0, r0)
		backAlarma = FALSE;
		MostrarA = TRUE;
		reentrar = TRUE;
		ticks = 0;
	}
	if(Alarma.dec == -1){
 c1031e4:	e59f3030 	ldr	r3, [pc, #48]	; c10321c <alarma+0x604>
 c1031e8:	e5933000 	ldr	r3, [r3]
 c1031ec:	e3730001 	cmn	r3, #1
 c1031f0:	1a000005 	bne	c10320c <alarma+0x5f4>
		lcd_puts_x3( 80, 40, BLACK, hora );
 c1031f4:	e59f301c 	ldr	r3, [pc, #28]	; c103218 <alarma+0x600>
 c1031f8:	e5933000 	ldr	r3, [r3]
 c1031fc:	e3a00050 	mov	r0, #80	; 0x50
 c103200:	e3a01028 	mov	r1, #40	; 0x28
 c103204:	e3a0200f 	mov	r2, #15
 c103208:	eb000e20 	bl	c106a90 <lcd_puts_x3>
	}



}
 c10320c:	e24bd010 	sub	sp, fp, #16
 c103210:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c103214:	e12fff1e 	bx	lr
 c103218:	0c10e740 	.word	0x0c10e740
 c10321c:	0c10effc 	.word	0x0c10effc
 c103220:	0c10eb8c 	.word	0x0c10eb8c
 c103224:	0c10c9f4 	.word	0x0c10c9f4
 c103228:	0c10ca08 	.word	0x0c10ca08
 c10322c:	0c10efd9 	.word	0x0c10efd9
 c103230:	0c10ca14 	.word	0x0c10ca14
 c103234:	0c10ca24 	.word	0x0c10ca24
 c103238:	0c10ca44 	.word	0x0c10ca44
 c10323c:	0c1ab43a 	.word	0x0c1ab43a
 c103240:	0c10eb92 	.word	0x0c10eb92
 c103244:	0c10c890 	.word	0x0c10c890
 c103248:	0c1ab428 	.word	0x0c1ab428
 c10324c:	0c10eb8b 	.word	0x0c10eb8b
 c103250:	0c10eff8 	.word	0x0c10eff8

0c103254 <mapa>:

void mapa(void){
 c103254:	e1a0c00d 	mov	ip, sp
 c103258:	e92dd800 	push	{fp, ip, lr, pc}
 c10325c:	e24cb004 	sub	fp, ip, #4
 c103260:	e24dd010 	sub	sp, sp, #16


	// pbs_init();
	//pbs_open(isr_pb);
	//lcd_clear();
	uint16 x = -1, y = -1;
 c103264:	e3e03000 	mvn	r3, #0
 c103268:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
 c10326c:	e3e03000 	mvn	r3, #0
 c103270:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8

	int i =2, j = 2;
 c103274:	e3a03002 	mov	r3, #2
 c103278:	e50b3010 	str	r3, [fp, #-16]
 c10327c:	e3a03002 	mov	r3, #2
 c103280:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	//lcd_putWallpaper(mapaM[j][i]);
	//lcd_putWallpaper(mapaM[2][2]); //el centro
	if(Map1time){
 c103284:	e59f346c 	ldr	r3, [pc, #1132]	; c1036f8 <mapa+0x4a4>
 c103288:	e5d33000 	ldrb	r3, [r3]
 c10328c:	e3530000 	cmp	r3, #0
 c103290:	0a00000c 	beq	c1032c8 <mapa+0x74>
		Map1time = FALSE;
 c103294:	e59f345c 	ldr	r3, [pc, #1116]	; c1036f8 <mapa+0x4a4>
 c103298:	e3a02000 	mov	r2, #0
 c10329c:	e5c32000 	strb	r2, [r3]
		lcd_putWallpaper(mapaM[j][i]);
 c1032a0:	e59f1454 	ldr	r1, [pc, #1108]	; c1036fc <mapa+0x4a8>
 c1032a4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c1032a8:	e1a03002 	mov	r3, r2
 c1032ac:	e1a03103 	lsl	r3, r3, #2
 c1032b0:	e0833002 	add	r3, r3, r2
 c1032b4:	e51b2010 	ldr	r2, [fp, #-16]
 c1032b8:	e0833002 	add	r3, r3, r2
 c1032bc:	e7913103 	ldr	r3, [r1, r3, lsl #2]
 c1032c0:	e1a00003 	mov	r0, r3
 c1032c4:	eb000f15 	bl	c106f20 <lcd_putWallpaper>
	}

	if(pb_scan()!=PB_LEFT){
 c1032c8:	eb000ff2 	bl	c107298 <pb_scan>
 c1032cc:	e1a03000 	mov	r3, r0
 c1032d0:	e3530040 	cmp	r3, #64	; 0x40
 c1032d4:	0a0000fa 	beq	c1036c4 <mapa+0x470>
		//funcionesPrincipales(newBeat, newStep );


		if(ts_pressed()){
 c1032d8:	eb001a30 	bl	c109ba0 <ts_pressed>
 c1032dc:	e1a03000 	mov	r3, r0
 c1032e0:	e3530000 	cmp	r3, #0
 c1032e4:	0a000100 	beq	c1036ec <mapa+0x498>
			ts_getpos( &x, &y);
 c1032e8:	e24b2016 	sub	r2, fp, #22
 c1032ec:	e24b3018 	sub	r3, fp, #24
 c1032f0:	e1a00002 	mov	r0, r2
 c1032f4:	e1a01003 	mov	r1, r3
 c1032f8:	eb001ab2 	bl	c109dc8 <ts_getpos>
			if( x>0 && y>0 && x<105  && y<80 && i>0 && j > 0 && i<=4 && j<=4){    //arriba izq
 c1032fc:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c103300:	e3530000 	cmp	r3, #0
 c103304:	0a00001a 	beq	c103374 <mapa+0x120>
 c103308:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c10330c:	e3530000 	cmp	r3, #0
 c103310:	0a000017 	beq	c103374 <mapa+0x120>
 c103314:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c103318:	e3530068 	cmp	r3, #104	; 0x68
 c10331c:	8a000014 	bhi	c103374 <mapa+0x120>
 c103320:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c103324:	e353004f 	cmp	r3, #79	; 0x4f
 c103328:	8a000011 	bhi	c103374 <mapa+0x120>
 c10332c:	e51b3010 	ldr	r3, [fp, #-16]
 c103330:	e3530000 	cmp	r3, #0
 c103334:	da00000e 	ble	c103374 <mapa+0x120>
 c103338:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10333c:	e3530000 	cmp	r3, #0
 c103340:	da00000b 	ble	c103374 <mapa+0x120>
 c103344:	e51b3010 	ldr	r3, [fp, #-16]
 c103348:	e3530004 	cmp	r3, #4
 c10334c:	ca000008 	bgt	c103374 <mapa+0x120>
 c103350:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103354:	e3530004 	cmp	r3, #4
 c103358:	ca000005 	bgt	c103374 <mapa+0x120>
				i--;
 c10335c:	e51b3010 	ldr	r3, [fp, #-16]
 c103360:	e2433001 	sub	r3, r3, #1
 c103364:	e50b3010 	str	r3, [fp, #-16]
				j--;
 c103368:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10336c:	e2433001 	sub	r3, r3, #1
 c103370:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

			}if(x>105 && y>0 && x<210  && y<80 && i>=0 && j >0 && i<=4 && j<=4){ //arriba
 c103374:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c103378:	e3530069 	cmp	r3, #105	; 0x69
 c10337c:	9a000017 	bls	c1033e0 <mapa+0x18c>
 c103380:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c103384:	e3530000 	cmp	r3, #0
 c103388:	0a000014 	beq	c1033e0 <mapa+0x18c>
 c10338c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c103390:	e35300d1 	cmp	r3, #209	; 0xd1
 c103394:	8a000011 	bhi	c1033e0 <mapa+0x18c>
 c103398:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c10339c:	e353004f 	cmp	r3, #79	; 0x4f
 c1033a0:	8a00000e 	bhi	c1033e0 <mapa+0x18c>
 c1033a4:	e51b3010 	ldr	r3, [fp, #-16]
 c1033a8:	e3530000 	cmp	r3, #0
 c1033ac:	ba00000b 	blt	c1033e0 <mapa+0x18c>
 c1033b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1033b4:	e3530000 	cmp	r3, #0
 c1033b8:	da000008 	ble	c1033e0 <mapa+0x18c>
 c1033bc:	e51b3010 	ldr	r3, [fp, #-16]
 c1033c0:	e3530004 	cmp	r3, #4
 c1033c4:	ca000005 	bgt	c1033e0 <mapa+0x18c>
 c1033c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1033cc:	e3530004 	cmp	r3, #4
 c1033d0:	ca000002 	bgt	c1033e0 <mapa+0x18c>
				j--;
 c1033d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1033d8:	e2433001 	sub	r3, r3, #1
 c1033dc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec


			}if(x>210 && y>0 && x<320  && y<80 && i>=0 && j >0 && i<4 && j<=4){  //arriba dch
 c1033e0:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1033e4:	e35300d2 	cmp	r3, #210	; 0xd2
 c1033e8:	9a00001b 	bls	c10345c <mapa+0x208>
 c1033ec:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c1033f0:	e3530000 	cmp	r3, #0
 c1033f4:	0a000018 	beq	c10345c <mapa+0x208>
 c1033f8:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
 c1033fc:	e59f32fc 	ldr	r3, [pc, #764]	; c103700 <mapa+0x4ac>
 c103400:	e1520003 	cmp	r2, r3
 c103404:	8a000014 	bhi	c10345c <mapa+0x208>
 c103408:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c10340c:	e353004f 	cmp	r3, #79	; 0x4f
 c103410:	8a000011 	bhi	c10345c <mapa+0x208>
 c103414:	e51b3010 	ldr	r3, [fp, #-16]
 c103418:	e3530000 	cmp	r3, #0
 c10341c:	ba00000e 	blt	c10345c <mapa+0x208>
 c103420:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103424:	e3530000 	cmp	r3, #0
 c103428:	da00000b 	ble	c10345c <mapa+0x208>
 c10342c:	e51b3010 	ldr	r3, [fp, #-16]
 c103430:	e3530003 	cmp	r3, #3
 c103434:	ca000008 	bgt	c10345c <mapa+0x208>
 c103438:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10343c:	e3530004 	cmp	r3, #4
 c103440:	ca000005 	bgt	c10345c <mapa+0x208>
				i++;
 c103444:	e51b3010 	ldr	r3, [fp, #-16]
 c103448:	e2833001 	add	r3, r3, #1
 c10344c:	e50b3010 	str	r3, [fp, #-16]
				j--;
 c103450:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103454:	e2433001 	sub	r3, r3, #1
 c103458:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

			}if(x>0 && y>80 && x<105  && y<160 && i>0 && j >=0 && i<=4&&j<=4){ //izquierda
 c10345c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c103460:	e3530000 	cmp	r3, #0
 c103464:	0a000017 	beq	c1034c8 <mapa+0x274>
 c103468:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c10346c:	e3530050 	cmp	r3, #80	; 0x50
 c103470:	9a000014 	bls	c1034c8 <mapa+0x274>
 c103474:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c103478:	e3530068 	cmp	r3, #104	; 0x68
 c10347c:	8a000011 	bhi	c1034c8 <mapa+0x274>
 c103480:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c103484:	e353009f 	cmp	r3, #159	; 0x9f
 c103488:	8a00000e 	bhi	c1034c8 <mapa+0x274>
 c10348c:	e51b3010 	ldr	r3, [fp, #-16]
 c103490:	e3530000 	cmp	r3, #0
 c103494:	da00000b 	ble	c1034c8 <mapa+0x274>
 c103498:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10349c:	e3530000 	cmp	r3, #0
 c1034a0:	ba000008 	blt	c1034c8 <mapa+0x274>
 c1034a4:	e51b3010 	ldr	r3, [fp, #-16]
 c1034a8:	e3530004 	cmp	r3, #4
 c1034ac:	ca000005 	bgt	c1034c8 <mapa+0x274>
 c1034b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1034b4:	e3530004 	cmp	r3, #4
 c1034b8:	ca000002 	bgt	c1034c8 <mapa+0x274>
				i--;
 c1034bc:	e51b3010 	ldr	r3, [fp, #-16]
 c1034c0:	e2433001 	sub	r3, r3, #1
 c1034c4:	e50b3010 	str	r3, [fp, #-16]


			}if(x>0 && y>160 && x<105  && y<240 && i>0 && j >=0 && i<=4 && j<4){  //abajo izq
 c1034c8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1034cc:	e3530000 	cmp	r3, #0
 c1034d0:	0a00001a 	beq	c103540 <mapa+0x2ec>
 c1034d4:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c1034d8:	e35300a0 	cmp	r3, #160	; 0xa0
 c1034dc:	9a000017 	bls	c103540 <mapa+0x2ec>
 c1034e0:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1034e4:	e3530068 	cmp	r3, #104	; 0x68
 c1034e8:	8a000014 	bhi	c103540 <mapa+0x2ec>
 c1034ec:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c1034f0:	e35300ef 	cmp	r3, #239	; 0xef
 c1034f4:	8a000011 	bhi	c103540 <mapa+0x2ec>
 c1034f8:	e51b3010 	ldr	r3, [fp, #-16]
 c1034fc:	e3530000 	cmp	r3, #0
 c103500:	da00000e 	ble	c103540 <mapa+0x2ec>
 c103504:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103508:	e3530000 	cmp	r3, #0
 c10350c:	ba00000b 	blt	c103540 <mapa+0x2ec>
 c103510:	e51b3010 	ldr	r3, [fp, #-16]
 c103514:	e3530004 	cmp	r3, #4
 c103518:	ca000008 	bgt	c103540 <mapa+0x2ec>
 c10351c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103520:	e3530003 	cmp	r3, #3
 c103524:	ca000005 	bgt	c103540 <mapa+0x2ec>
				i--;
 c103528:	e51b3010 	ldr	r3, [fp, #-16]
 c10352c:	e2433001 	sub	r3, r3, #1
 c103530:	e50b3010 	str	r3, [fp, #-16]
				j++;
 c103534:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103538:	e2833001 	add	r3, r3, #1
 c10353c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec


			}if(x>105 && y>160 && x<210  && y<240 && i>=0 && j >=0 && i<=4&&j<4){ //abajo
 c103540:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c103544:	e3530069 	cmp	r3, #105	; 0x69
 c103548:	9a000017 	bls	c1035ac <mapa+0x358>
 c10354c:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c103550:	e35300a0 	cmp	r3, #160	; 0xa0
 c103554:	9a000014 	bls	c1035ac <mapa+0x358>
 c103558:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c10355c:	e35300d1 	cmp	r3, #209	; 0xd1
 c103560:	8a000011 	bhi	c1035ac <mapa+0x358>
 c103564:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c103568:	e35300ef 	cmp	r3, #239	; 0xef
 c10356c:	8a00000e 	bhi	c1035ac <mapa+0x358>
 c103570:	e51b3010 	ldr	r3, [fp, #-16]
 c103574:	e3530000 	cmp	r3, #0
 c103578:	ba00000b 	blt	c1035ac <mapa+0x358>
 c10357c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103580:	e3530000 	cmp	r3, #0
 c103584:	ba000008 	blt	c1035ac <mapa+0x358>
 c103588:	e51b3010 	ldr	r3, [fp, #-16]
 c10358c:	e3530004 	cmp	r3, #4
 c103590:	ca000005 	bgt	c1035ac <mapa+0x358>
 c103594:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103598:	e3530003 	cmp	r3, #3
 c10359c:	ca000002 	bgt	c1035ac <mapa+0x358>
				j++;
 c1035a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1035a4:	e2833001 	add	r3, r3, #1
 c1035a8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec


			}if(x>210 && y>160 && x<320  && y<240 && i>=0 && j >=0 && i<4&&j<4){ //abajo dcha
 c1035ac:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1035b0:	e35300d2 	cmp	r3, #210	; 0xd2
 c1035b4:	9a00001b 	bls	c103628 <mapa+0x3d4>
 c1035b8:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c1035bc:	e35300a0 	cmp	r3, #160	; 0xa0
 c1035c0:	9a000018 	bls	c103628 <mapa+0x3d4>
 c1035c4:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
 c1035c8:	e59f3130 	ldr	r3, [pc, #304]	; c103700 <mapa+0x4ac>
 c1035cc:	e1520003 	cmp	r2, r3
 c1035d0:	8a000014 	bhi	c103628 <mapa+0x3d4>
 c1035d4:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c1035d8:	e35300ef 	cmp	r3, #239	; 0xef
 c1035dc:	8a000011 	bhi	c103628 <mapa+0x3d4>
 c1035e0:	e51b3010 	ldr	r3, [fp, #-16]
 c1035e4:	e3530000 	cmp	r3, #0
 c1035e8:	ba00000e 	blt	c103628 <mapa+0x3d4>
 c1035ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1035f0:	e3530000 	cmp	r3, #0
 c1035f4:	ba00000b 	blt	c103628 <mapa+0x3d4>
 c1035f8:	e51b3010 	ldr	r3, [fp, #-16]
 c1035fc:	e3530003 	cmp	r3, #3
 c103600:	ca000008 	bgt	c103628 <mapa+0x3d4>
 c103604:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103608:	e3530003 	cmp	r3, #3
 c10360c:	ca000005 	bgt	c103628 <mapa+0x3d4>
				i++;
 c103610:	e51b3010 	ldr	r3, [fp, #-16]
 c103614:	e2833001 	add	r3, r3, #1
 c103618:	e50b3010 	str	r3, [fp, #-16]
				j++;
 c10361c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103620:	e2833001 	add	r3, r3, #1
 c103624:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

			}if(x>210 && y>80 && x<320  && y<160 && i>=0 && j >=0 && i<4&&j<=4){ //derecha
 c103628:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c10362c:	e35300d2 	cmp	r3, #210	; 0xd2
 c103630:	9a000018 	bls	c103698 <mapa+0x444>
 c103634:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c103638:	e3530050 	cmp	r3, #80	; 0x50
 c10363c:	9a000015 	bls	c103698 <mapa+0x444>
 c103640:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
 c103644:	e59f30b4 	ldr	r3, [pc, #180]	; c103700 <mapa+0x4ac>
 c103648:	e1520003 	cmp	r2, r3
 c10364c:	8a000011 	bhi	c103698 <mapa+0x444>
 c103650:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c103654:	e353009f 	cmp	r3, #159	; 0x9f
 c103658:	8a00000e 	bhi	c103698 <mapa+0x444>
 c10365c:	e51b3010 	ldr	r3, [fp, #-16]
 c103660:	e3530000 	cmp	r3, #0
 c103664:	ba00000b 	blt	c103698 <mapa+0x444>
 c103668:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10366c:	e3530000 	cmp	r3, #0
 c103670:	ba000008 	blt	c103698 <mapa+0x444>
 c103674:	e51b3010 	ldr	r3, [fp, #-16]
 c103678:	e3530003 	cmp	r3, #3
 c10367c:	ca000005 	bgt	c103698 <mapa+0x444>
 c103680:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103684:	e3530004 	cmp	r3, #4
 c103688:	ca000002 	bgt	c103698 <mapa+0x444>
				i++;
 c10368c:	e51b3010 	ldr	r3, [fp, #-16]
 c103690:	e2833001 	add	r3, r3, #1
 c103694:	e50b3010 	str	r3, [fp, #-16]
			}
			lcd_putWallpaper(mapaM[j][i]);
 c103698:	e59f105c 	ldr	r1, [pc, #92]	; c1036fc <mapa+0x4a8>
 c10369c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c1036a0:	e1a03002 	mov	r3, r2
 c1036a4:	e1a03103 	lsl	r3, r3, #2
 c1036a8:	e0833002 	add	r3, r3, r2
 c1036ac:	e51b2010 	ldr	r2, [fp, #-16]
 c1036b0:	e0833002 	add	r3, r3, r2
 c1036b4:	e7913103 	ldr	r3, [r1, r3, lsl #2]
 c1036b8:	e1a00003 	mov	r0, r3
 c1036bc:	eb000e17 	bl	c106f20 <lcd_putWallpaper>
 c1036c0:	ea000009 	b	c1036ec <mapa+0x498>
		}



	}else{
		lcd_clear();
 c1036c4:	eb0009ae 	bl	c105d84 <lcd_clear>
		MenuPrincipal=TRUE;
 c1036c8:	e59f3034 	ldr	r3, [pc, #52]	; c103704 <mapa+0x4b0>
 c1036cc:	e3a02001 	mov	r2, #1
 c1036d0:	e5c32000 	strb	r2, [r3]
		Map = FALSE;
 c1036d4:	e59f302c 	ldr	r3, [pc, #44]	; c103708 <mapa+0x4b4>
 c1036d8:	e3a02000 	mov	r2, #0
 c1036dc:	e5c32000 	strb	r2, [r3]
		Map1time = TRUE;
 c1036e0:	e59f3010 	ldr	r3, [pc, #16]	; c1036f8 <mapa+0x4a4>
 c1036e4:	e3a02001 	mov	r2, #1
 c1036e8:	e5c32000 	strb	r2, [r3]

	}


}
 c1036ec:	e24bd00c 	sub	sp, fp, #12
 c1036f0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1036f4:	e12fff1e 	bx	lr
 c1036f8:	0c10e735 	.word	0x0c10e735
 c1036fc:	0c10e6d0 	.word	0x0c10e6d0
 c103700:	0000013f 	.word	0x0000013f
 c103704:	0c10e734 	.word	0x0c10e734
 c103708:	0c10eb8a 	.word	0x0c10eb8a

0c10370c <one_second_loop>:

void one_second_loop( void )
{
 c10370c:	e1a0c00d 	mov	ip, sp
 c103710:	e92dd800 	push	{fp, ip, lr, pc}
 c103714:	e24cb004 	sub	fp, ip, #4
 c103718:	e24dd008 	sub	sp, sp, #8
	uint32 i;

	for( i=591436; i; i-- );
 c10371c:	e59f3028 	ldr	r3, [pc, #40]	; c10374c <one_second_loop+0x40>
 c103720:	e50b3010 	str	r3, [fp, #-16]
 c103724:	ea000002 	b	c103734 <one_second_loop+0x28>
 c103728:	e51b3010 	ldr	r3, [fp, #-16]
 c10372c:	e2433001 	sub	r3, r3, #1
 c103730:	e50b3010 	str	r3, [fp, #-16]
 c103734:	e51b3010 	ldr	r3, [fp, #-16]
 c103738:	e3530000 	cmp	r3, #0
 c10373c:	1afffff9 	bne	c103728 <one_second_loop+0x1c>
}
 c103740:	e24bd00c 	sub	sp, fp, #12
 c103744:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103748:	e12fff1e 	bx	lr
 c10374c:	0009064c 	.word	0x0009064c

0c103750 <one_s_loop>:
void one_s_loop( void )
{
 c103750:	e1a0c00d 	mov	ip, sp
 c103754:	e92dd800 	push	{fp, ip, lr, pc}
 c103758:	e24cb004 	sub	fp, ip, #4
 c10375c:	e24dd008 	sub	sp, sp, #8
	uint32 i;

	for( i=13560; i; i-- );
 c103760:	e59f3028 	ldr	r3, [pc, #40]	; c103790 <one_s_loop+0x40>
 c103764:	e50b3010 	str	r3, [fp, #-16]
 c103768:	ea000002 	b	c103778 <one_s_loop+0x28>
 c10376c:	e51b3010 	ldr	r3, [fp, #-16]
 c103770:	e2433001 	sub	r3, r3, #1
 c103774:	e50b3010 	str	r3, [fp, #-16]
 c103778:	e51b3010 	ldr	r3, [fp, #-16]
 c10377c:	e3530000 	cmp	r3, #0
 c103780:	1afffff9 	bne	c10376c <one_s_loop+0x1c>
}
 c103784:	e24bd00c 	sub	sp, fp, #12
 c103788:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10378c:	e12fff1e 	bx	lr
 c103790:	000034f8 	.word	0x000034f8

0c103794 <isr_pb>:
void isr_pb( void )
{
 c103794:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c103798:	e1a0c00d 	mov	ip, sp
 c10379c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1037a0:	e24cb004 	sub	fp, ip, #4
	switch( pb_scan() )
 c1037a4:	eb000ebb 	bl	c107298 <pb_scan>
 c1037a8:	e1a03000 	mov	r3, r0
 c1037ac:	e3530080 	cmp	r3, #128	; 0x80
 c1037b0:	0a00000c 	beq	c1037e8 <isr_pb+0x54>
 c1037b4:	e35300ff 	cmp	r3, #255	; 0xff
 c1037b8:	0a000002 	beq	c1037c8 <isr_pb+0x34>
 c1037bc:	e3530040 	cmp	r3, #64	; 0x40
 c1037c0:	0a000004 	beq	c1037d8 <isr_pb+0x44>
 c1037c4:	ea00000b 	b	c1037f8 <isr_pb+0x64>
	{
	case PB_FAILURE:
		EXTINTPND = BIT_LEFTPB | BIT_RIGHTPB;
 c1037c8:	e59f3050 	ldr	r3, [pc, #80]	; c103820 <isr_pb+0x8c>
 c1037cc:	e3a0200c 	mov	r2, #12
 c1037d0:	e5832000 	str	r2, [r3]
		break;
 c1037d4:	ea000007 	b	c1037f8 <isr_pb+0x64>
	case PB_LEFT:
		EXTINTPND = BIT_LEFTPB;
 c1037d8:	e59f3040 	ldr	r3, [pc, #64]	; c103820 <isr_pb+0x8c>
 c1037dc:	e3a02004 	mov	r2, #4
 c1037e0:	e5832000 	str	r2, [r3]
		break;
 c1037e4:	ea000003 	b	c1037f8 <isr_pb+0x64>
	case PB_RIGHT:
		EXTINTPND = BIT_RIGHTPB;
 c1037e8:	e59f3030 	ldr	r3, [pc, #48]	; c103820 <isr_pb+0x8c>
 c1037ec:	e3a02008 	mov	r2, #8
 c1037f0:	e5832000 	str	r2, [r3]
		break;
 c1037f4:	e1a00000 	nop			; (mov r0, r0)
	}
	flagPb = TRUE;
 c1037f8:	e59f3024 	ldr	r3, [pc, #36]	; c103824 <isr_pb+0x90>
 c1037fc:	e3a02001 	mov	r2, #1
 c103800:	e5c32000 	strb	r2, [r3]
	I_ISPC = BIT_PB;
 c103804:	e59f301c 	ldr	r3, [pc, #28]	; c103828 <isr_pb+0x94>
 c103808:	e3a02602 	mov	r2, #2097152	; 0x200000
 c10380c:	e5832000 	str	r2, [r3]
}
 c103810:	e24bd01c 	sub	sp, fp, #28
 c103814:	e89d680f 	ldm	sp, {r0, r1, r2, r3, fp, sp, lr}
 c103818:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c10381c:	e25ef004 	subs	pc, lr, #4
 c103820:	01d20054 	.word	0x01d20054
 c103824:	0c10f011 	.word	0x0c10f011
 c103828:	01e00024 	.word	0x01e00024

0c10382c <alarmaSonido>:
void alarmaSonido(void){
 c10382c:	e1a0c00d 	mov	ip, sp
 c103830:	e92dd800 	push	{fp, ip, lr, pc}
 c103834:	e24cb004 	sub	fp, ip, #4

	uda1341ts_init();
 c103838:	eb001bf4 	bl	c10a810 <uda1341ts_init>
	iis_init( IIS_DMA );
 c10383c:	e3a00001 	mov	r0, #1
 c103840:	eb0005cf 	bl	c104f84 <iis_init>

	uda1341ts_setvol( VOL_MED );
 c103844:	e3a00020 	mov	r0, #32
 c103848:	eb001c73 	bl	c10aa1c <uda1341ts_setvol>
	iis_playWawFile( TEMON, TRUE );
 c10384c:	e59f0028 	ldr	r0, [pc, #40]	; c10387c <alarmaSonido+0x50>
 c103850:	e3a01001 	mov	r1, #1
 c103854:	eb000743 	bl	c105568 <iis_playWawFile>
	while(pb_scan()!=PB_LEFT)
 c103858:	e1a00000 	nop			; (mov r0, r0)
 c10385c:	eb000e8d 	bl	c107298 <pb_scan>
 c103860:	e1a03000 	mov	r3, r0
 c103864:	e3530040 	cmp	r3, #64	; 0x40
 c103868:	1afffffb 	bne	c10385c <alarmaSonido+0x30>
	{


	}
	iis_pause();
 c10386c:	eb000718 	bl	c1054d4 <iis_pause>

}
 c103870:	e24bd00c 	sub	sp, fp, #12
 c103874:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103878:	e12fff1e 	bx	lr
 c10387c:	0c480000 	.word	0x0c480000

0c103880 <isr_tick>:
void isr_tick( void )
{
 c103880:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c103884:	e1a0c00d 	mov	ip, sp
 c103888:	e92dd80c 	push	{r2, r3, fp, ip, lr, pc}
 c10388c:	e24cb004 	sub	fp, ip, #4

	I_ISPC = BIT_TICK;
 c103890:	e59f3014 	ldr	r3, [pc, #20]	; c1038ac <isr_tick+0x2c>
 c103894:	e3a02601 	mov	r2, #1048576	; 0x100000
 c103898:	e5832000 	str	r2, [r3]
}
 c10389c:	e24bd014 	sub	sp, fp, #20
 c1038a0:	e89d680c 	ldm	sp, {r2, r3, fp, sp, lr}
 c1038a4:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c1038a8:	e25ef004 	subs	pc, lr, #4
 c1038ac:	01e00024 	.word	0x01e00024

0c1038b0 <compruebaAlarma>:

void compruebaAlarma(rtc_time_t rtc_time){
 c1038b0:	e1a0c00d 	mov	ip, sp
 c1038b4:	e92dd800 	push	{fp, ip, lr, pc}
 c1038b8:	e24cb004 	sub	fp, ip, #4
 c1038bc:	e24dd010 	sub	sp, sp, #16
 c1038c0:	e24b3014 	sub	r3, fp, #20
 c1038c4:	e8830003 	stm	r3, {r0, r1}
	rtc_gettime( &rtc_time );
 c1038c8:	e24b3014 	sub	r3, fp, #20
 c1038cc:	e1a00003 	mov	r0, r3
 c1038d0:	eb001032 	bl	c1079a0 <rtc_gettime>

	if(latidosPorMinuto>180 && !peligro){
 c1038d4:	e59f32b8 	ldr	r3, [pc, #696]	; c103b94 <compruebaAlarma+0x2e4>
 c1038d8:	e5933000 	ldr	r3, [r3]
 c1038dc:	e35300b4 	cmp	r3, #180	; 0xb4
 c1038e0:	da000028 	ble	c103988 <compruebaAlarma+0xd8>
 c1038e4:	e59f32ac 	ldr	r3, [pc, #684]	; c103b98 <compruebaAlarma+0x2e8>
 c1038e8:	e5d33000 	ldrb	r3, [r3]
 c1038ec:	e3530000 	cmp	r3, #0
 c1038f0:	1a000024 	bne	c103988 <compruebaAlarma+0xd8>
		lcd_clear();
 c1038f4:	eb000922 	bl	c105d84 <lcd_clear>
		lcd_draw_box(0, 0 , 320, 240, BLACK, 5);
 c1038f8:	e3a0300f 	mov	r3, #15
 c1038fc:	e58d3000 	str	r3, [sp]
 c103900:	e3a03005 	mov	r3, #5
 c103904:	e58d3004 	str	r3, [sp, #4]
 c103908:	e3a00000 	mov	r0, #0
 c10390c:	e3a01000 	mov	r1, #0
 c103910:	e3a02d05 	mov	r2, #320	; 0x140
 c103914:	e3a030f0 	mov	r3, #240	; 0xf0
 c103918:	eb000a1b 	bl	c10618c <lcd_draw_box>
		lcd_puts_x3(25, 50, BLACK, "REDUZCA");
 c10391c:	e3a00019 	mov	r0, #25
 c103920:	e3a01032 	mov	r1, #50	; 0x32
 c103924:	e3a0200f 	mov	r2, #15
 c103928:	e59f326c 	ldr	r3, [pc, #620]	; c103b9c <compruebaAlarma+0x2ec>
 c10392c:	eb000c57 	bl	c106a90 <lcd_puts_x3>
		lcd_puts_x3(25, 100, BLACK, "EL");
 c103930:	e3a00019 	mov	r0, #25
 c103934:	e3a01064 	mov	r1, #100	; 0x64
 c103938:	e3a0200f 	mov	r2, #15
 c10393c:	e59f325c 	ldr	r3, [pc, #604]	; c103ba0 <compruebaAlarma+0x2f0>
 c103940:	eb000c52 	bl	c106a90 <lcd_puts_x3>
		lcd_puts_x3(25, 150, BLACK, "PULSO");
 c103944:	e3a00019 	mov	r0, #25
 c103948:	e3a01096 	mov	r1, #150	; 0x96
 c10394c:	e3a0200f 	mov	r2, #15
 c103950:	e59f324c 	ldr	r3, [pc, #588]	; c103ba4 <compruebaAlarma+0x2f4>
 c103954:	eb000c4d 	bl	c106a90 <lcd_puts_x3>
		pasosFlag = FALSE;
 c103958:	e59f3248 	ldr	r3, [pc, #584]	; c103ba8 <compruebaAlarma+0x2f8>
 c10395c:	e3a02000 	mov	r2, #0
 c103960:	e5c32000 	strb	r2, [r3]
		pulsoFlag = FALSE;
 c103964:	e59f3240 	ldr	r3, [pc, #576]	; c103bac <compruebaAlarma+0x2fc>
 c103968:	e3a02000 	mov	r2, #0
 c10396c:	e5c32000 	strb	r2, [r3]
		peligro = TRUE;
 c103970:	e59f3220 	ldr	r3, [pc, #544]	; c103b98 <compruebaAlarma+0x2e8>
 c103974:	e3a02001 	mov	r2, #1
 c103978:	e5c32000 	strb	r2, [r3]
		MenuPrincipal = FALSE;
 c10397c:	e59f322c 	ldr	r3, [pc, #556]	; c103bb0 <compruebaAlarma+0x300>
 c103980:	e3a02000 	mov	r2, #0
 c103984:	e5c32000 	strb	r2, [r3]
	}
	if(latidosPorMinuto<180 && peligro){
 c103988:	e59f3204 	ldr	r3, [pc, #516]	; c103b94 <compruebaAlarma+0x2e4>
 c10398c:	e5933000 	ldr	r3, [r3]
 c103990:	e35300b3 	cmp	r3, #179	; 0xb3
 c103994:	ca000009 	bgt	c1039c0 <compruebaAlarma+0x110>
 c103998:	e59f31f8 	ldr	r3, [pc, #504]	; c103b98 <compruebaAlarma+0x2e8>
 c10399c:	e5d33000 	ldrb	r3, [r3]
 c1039a0:	e3530000 	cmp	r3, #0
 c1039a4:	0a000005 	beq	c1039c0 <compruebaAlarma+0x110>
		MenuPrincipal = TRUE;
 c1039a8:	e59f3200 	ldr	r3, [pc, #512]	; c103bb0 <compruebaAlarma+0x300>
 c1039ac:	e3a02001 	mov	r2, #1
 c1039b0:	e5c32000 	strb	r2, [r3]
		peligro= FALSE;
 c1039b4:	e59f31dc 	ldr	r3, [pc, #476]	; c103b98 <compruebaAlarma+0x2e8>
 c1039b8:	e3a02000 	mov	r2, #0
 c1039bc:	e5c32000 	strb	r2, [r3]

	}
	if( SuenaAlarma ||(rtc_time.hour == Alarma.hora && rtc_time.min == Alarma.min && rtc_time.sec== Alarma.seg  && Alarma.dec != -1 )){
 c1039c0:	e59f31ec 	ldr	r3, [pc, #492]	; c103bb4 <compruebaAlarma+0x304>
 c1039c4:	e5d33000 	ldrb	r3, [r3]
 c1039c8:	e3530000 	cmp	r3, #0
 c1039cc:	1a000015 	bne	c103a28 <compruebaAlarma+0x178>
 c1039d0:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c1039d4:	e1a02003 	mov	r2, r3
 c1039d8:	e59f31d8 	ldr	r3, [pc, #472]	; c103bb8 <compruebaAlarma+0x308>
 c1039dc:	e593300c 	ldr	r3, [r3, #12]
 c1039e0:	e1520003 	cmp	r2, r3
 c1039e4:	1a000067 	bne	c103b88 <compruebaAlarma+0x2d8>
 c1039e8:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
 c1039ec:	e1a02003 	mov	r2, r3
 c1039f0:	e59f31c0 	ldr	r3, [pc, #448]	; c103bb8 <compruebaAlarma+0x308>
 c1039f4:	e5933008 	ldr	r3, [r3, #8]
 c1039f8:	e1520003 	cmp	r2, r3
 c1039fc:	1a000061 	bne	c103b88 <compruebaAlarma+0x2d8>
 c103a00:	e55b3014 	ldrb	r3, [fp, #-20]	; 0xffffffec
 c103a04:	e1a02003 	mov	r2, r3
 c103a08:	e59f31a8 	ldr	r3, [pc, #424]	; c103bb8 <compruebaAlarma+0x308>
 c103a0c:	e5933004 	ldr	r3, [r3, #4]
 c103a10:	e1520003 	cmp	r2, r3
 c103a14:	1a00005b 	bne	c103b88 <compruebaAlarma+0x2d8>
 c103a18:	e59f3198 	ldr	r3, [pc, #408]	; c103bb8 <compruebaAlarma+0x308>
 c103a1c:	e5933000 	ldr	r3, [r3]
 c103a20:	e3730001 	cmn	r3, #1
 c103a24:	0a000057 	beq	c103b88 <compruebaAlarma+0x2d8>



		MenuPrincipal = FALSE;
 c103a28:	e59f3180 	ldr	r3, [pc, #384]	; c103bb0 <compruebaAlarma+0x300>
 c103a2c:	e3a02000 	mov	r2, #0
 c103a30:	e5c32000 	strb	r2, [r3]

		if(!SuenaAlarma){
 c103a34:	e59f3178 	ldr	r3, [pc, #376]	; c103bb4 <compruebaAlarma+0x304>
 c103a38:	e5d33000 	ldrb	r3, [r3]
 c103a3c:	e3530000 	cmp	r3, #0
 c103a40:	1a00002f 	bne	c103b04 <compruebaAlarma+0x254>
			lcd_clear();
 c103a44:	eb0008ce 	bl	c105d84 <lcd_clear>


			lcd_draw_box(0, 0 , 320, 240, BLACK, 3);
 c103a48:	e3a0300f 	mov	r3, #15
 c103a4c:	e58d3000 	str	r3, [sp]
 c103a50:	e3a03003 	mov	r3, #3
 c103a54:	e58d3004 	str	r3, [sp, #4]
 c103a58:	e3a00000 	mov	r0, #0
 c103a5c:	e3a01000 	mov	r1, #0
 c103a60:	e3a02d05 	mov	r2, #320	; 0x140
 c103a64:	e3a030f0 	mov	r3, #240	; 0xf0
 c103a68:	eb0009c7 	bl	c10618c <lcd_draw_box>
			lcd_puts_x3(13, 50, BLACK, "DESPIERTA");
 c103a6c:	e3a0000d 	mov	r0, #13
 c103a70:	e3a01032 	mov	r1, #50	; 0x32
 c103a74:	e3a0200f 	mov	r2, #15
 c103a78:	e59f313c 	ldr	r3, [pc, #316]	; c103bbc <compruebaAlarma+0x30c>
 c103a7c:	eb000c03 	bl	c106a90 <lcd_puts_x3>
			lcd_puts_x2(6, 140, BLACK, "izq para detener");
 c103a80:	e3a00006 	mov	r0, #6
 c103a84:	e3a0108c 	mov	r1, #140	; 0x8c
 c103a88:	e3a0200f 	mov	r2, #15
 c103a8c:	e59f312c 	ldr	r3, [pc, #300]	; c103bc0 <compruebaAlarma+0x310>
 c103a90:	eb000bc0 	bl	c106998 <lcd_puts_x2>
			lcd_puts_x2(6, 170, BLACK, "drch posponer 2 min");
 c103a94:	e3a00006 	mov	r0, #6
 c103a98:	e3a010aa 	mov	r1, #170	; 0xaa
 c103a9c:	e3a0200f 	mov	r2, #15
 c103aa0:	e59f311c 	ldr	r3, [pc, #284]	; c103bc4 <compruebaAlarma+0x314>
 c103aa4:	eb000bbb 	bl	c106998 <lcd_puts_x2>
			SuenaAlarma = TRUE;
 c103aa8:	e59f3104 	ldr	r3, [pc, #260]	; c103bb4 <compruebaAlarma+0x304>
 c103aac:	e3a02001 	mov	r2, #1
 c103ab0:	e5c32000 	strb	r2, [r3]
			uda1341ts_setvol( VOL_MED );
 c103ab4:	e3a00020 	mov	r0, #32
 c103ab8:	eb001bd7 	bl	c10aa1c <uda1341ts_setvol>
			iis_playWawFile( NOKIATUNE, TRUE );
 c103abc:	e59f0104 	ldr	r0, [pc, #260]	; c103bc8 <compruebaAlarma+0x318>
 c103ac0:	e3a01001 	mov	r1, #1
 c103ac4:	eb0006a7 	bl	c105568 <iis_playWawFile>

			Map = FALSE;
 c103ac8:	e59f30fc 	ldr	r3, [pc, #252]	; c103bcc <compruebaAlarma+0x31c>
 c103acc:	e3a02000 	mov	r2, #0
 c103ad0:	e5c32000 	strb	r2, [r3]

			relojMenu = FALSE;
 c103ad4:	e59f30f4 	ldr	r3, [pc, #244]	; c103bd0 <compruebaAlarma+0x320>
 c103ad8:	e3a02000 	mov	r2, #0
 c103adc:	e5c32000 	strb	r2, [r3]
			alarmaFlag = FALSE;
 c103ae0:	e59f30ec 	ldr	r3, [pc, #236]	; c103bd4 <compruebaAlarma+0x324>
 c103ae4:	e3a02000 	mov	r2, #0
 c103ae8:	e5c32000 	strb	r2, [r3]
			pasosFlag = FALSE;
 c103aec:	e59f30b4 	ldr	r3, [pc, #180]	; c103ba8 <compruebaAlarma+0x2f8>
 c103af0:	e3a02000 	mov	r2, #0
 c103af4:	e5c32000 	strb	r2, [r3]
			pulsoFlag = FALSE;
 c103af8:	e59f30ac 	ldr	r3, [pc, #172]	; c103bac <compruebaAlarma+0x2fc>
 c103afc:	e3a02000 	mov	r2, #0
 c103b00:	e5c32000 	strb	r2, [r3]

		}

		if(pb_scan()==PB_LEFT){
 c103b04:	eb000de3 	bl	c107298 <pb_scan>
 c103b08:	e1a03000 	mov	r3, r0
 c103b0c:	e3530040 	cmp	r3, #64	; 0x40
 c103b10:	1a00000c 	bne	c103b48 <compruebaAlarma+0x298>
			Alarma.dec = -1;
 c103b14:	e59f309c 	ldr	r3, [pc, #156]	; c103bb8 <compruebaAlarma+0x308>
 c103b18:	e3e02000 	mvn	r2, #0
 c103b1c:	e5832000 	str	r2, [r3]
			iis_pause();
 c103b20:	eb00066b 	bl	c1054d4 <iis_pause>
			SuenaAlarma = FALSE;
 c103b24:	e59f3088 	ldr	r3, [pc, #136]	; c103bb4 <compruebaAlarma+0x304>
 c103b28:	e3a02000 	mov	r2, #0
 c103b2c:	e5c32000 	strb	r2, [r3]
			MenuPrincipal = TRUE;
 c103b30:	e59f3078 	ldr	r3, [pc, #120]	; c103bb0 <compruebaAlarma+0x300>
 c103b34:	e3a02001 	mov	r2, #1
 c103b38:	e5c32000 	strb	r2, [r3]
			confPintar = FALSE;
 c103b3c:	e59f3094 	ldr	r3, [pc, #148]	; c103bd8 <compruebaAlarma+0x328>
 c103b40:	e3a02000 	mov	r2, #0
 c103b44:	e5c32000 	strb	r2, [r3]

		}
		if(pb_scan()==PB_RIGHT){
 c103b48:	eb000dd2 	bl	c107298 <pb_scan>
 c103b4c:	e1a03000 	mov	r3, r0
 c103b50:	e3530080 	cmp	r3, #128	; 0x80
 c103b54:	1a00000b 	bne	c103b88 <compruebaAlarma+0x2d8>
			Alarma.min += 2;
 c103b58:	e59f3058 	ldr	r3, [pc, #88]	; c103bb8 <compruebaAlarma+0x308>
 c103b5c:	e5933008 	ldr	r3, [r3, #8]
 c103b60:	e2832002 	add	r2, r3, #2
 c103b64:	e59f304c 	ldr	r3, [pc, #76]	; c103bb8 <compruebaAlarma+0x308>
 c103b68:	e5832008 	str	r2, [r3, #8]
			iis_pause();
 c103b6c:	eb000658 	bl	c1054d4 <iis_pause>
			SuenaAlarma = FALSE;
 c103b70:	e59f303c 	ldr	r3, [pc, #60]	; c103bb4 <compruebaAlarma+0x304>
 c103b74:	e3a02000 	mov	r2, #0
 c103b78:	e5c32000 	strb	r2, [r3]
			MenuPrincipal = TRUE;
 c103b7c:	e59f302c 	ldr	r3, [pc, #44]	; c103bb0 <compruebaAlarma+0x300>
 c103b80:	e3a02001 	mov	r2, #1
 c103b84:	e5c32000 	strb	r2, [r3]


	}


}
 c103b88:	e24bd00c 	sub	sp, fp, #12
 c103b8c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103b90:	e12fff1e 	bx	lr
 c103b94:	0c1ab424 	.word	0x0c1ab424
 c103b98:	0c1ab418 	.word	0x0c1ab418
 c103b9c:	0c10ca5c 	.word	0x0c10ca5c
 c103ba0:	0c10ca64 	.word	0x0c10ca64
 c103ba4:	0c10ca68 	.word	0x0c10ca68
 c103ba8:	0c10eb8d 	.word	0x0c10eb8d
 c103bac:	0c10eb8e 	.word	0x0c10eb8e
 c103bb0:	0c10e734 	.word	0x0c10e734
 c103bb4:	0c10efd0 	.word	0x0c10efd0
 c103bb8:	0c10effc 	.word	0x0c10effc
 c103bbc:	0c10ca70 	.word	0x0c10ca70
 c103bc0:	0c10ca7c 	.word	0x0c10ca7c
 c103bc4:	0c10ca90 	.word	0x0c10ca90
 c103bc8:	0c420000 	.word	0x0c420000
 c103bcc:	0c10eb8a 	.word	0x0c10eb8a
 c103bd0:	0c10eb8b 	.word	0x0c10eb8b
 c103bd4:	0c10eb8c 	.word	0x0c10eb8c
 c103bd8:	0c1ab43a 	.word	0x0c1ab43a

0c103bdc <compruebaCronometro>:
void compruebaCronometro(rtc_time_t rtc_time){
 c103bdc:	e1a0c00d 	mov	ip, sp
 c103be0:	e92dd800 	push	{fp, ip, lr, pc}
 c103be4:	e24cb004 	sub	fp, ip, #4
 c103be8:	e24dd010 	sub	sp, sp, #16
 c103bec:	e24b301c 	sub	r3, fp, #28
 c103bf0:	e8830003 	stm	r3, {r0, r1}
	int seg = rtc_time.sec;
 c103bf4:	e55b301c 	ldrb	r3, [fp, #-28]	; 0xffffffe4
 c103bf8:	e50b3010 	str	r3, [fp, #-16]
	rtc_gettime( &rtc_time );
 c103bfc:	e24b301c 	sub	r3, fp, #28
 c103c00:	e1a00003 	mov	r0, r3
 c103c04:	eb000f65 	bl	c1079a0 <rtc_gettime>
	if(rtc_time.sec != seg){
 c103c08:	e55b301c 	ldrb	r3, [fp, #-28]	; 0xffffffe4
 c103c0c:	e1a02003 	mov	r2, r3
 c103c10:	e51b3010 	ldr	r3, [fp, #-16]
 c103c14:	e1520003 	cmp	r2, r3
 c103c18:	0a000010 	beq	c103c60 <compruebaCronometro+0x84>
		tiempoCr.seg++;
 c103c1c:	e59f3048 	ldr	r3, [pc, #72]	; c103c6c <compruebaCronometro+0x90>
 c103c20:	e5933004 	ldr	r3, [r3, #4]
 c103c24:	e2832001 	add	r2, r3, #1
 c103c28:	e59f303c 	ldr	r3, [pc, #60]	; c103c6c <compruebaCronometro+0x90>
 c103c2c:	e5832004 	str	r2, [r3, #4]
		if (tiempoCr.seg > 60) {
 c103c30:	e59f3034 	ldr	r3, [pc, #52]	; c103c6c <compruebaCronometro+0x90>
 c103c34:	e5933004 	ldr	r3, [r3, #4]
 c103c38:	e353003c 	cmp	r3, #60	; 0x3c
 c103c3c:	da000007 	ble	c103c60 <compruebaCronometro+0x84>
			tiempoCr.seg = 0;
 c103c40:	e59f3024 	ldr	r3, [pc, #36]	; c103c6c <compruebaCronometro+0x90>
 c103c44:	e3a02000 	mov	r2, #0
 c103c48:	e5832004 	str	r2, [r3, #4]
			tiempoCr.min++;
 c103c4c:	e59f3018 	ldr	r3, [pc, #24]	; c103c6c <compruebaCronometro+0x90>
 c103c50:	e5933008 	ldr	r3, [r3, #8]
 c103c54:	e2832001 	add	r2, r3, #1
 c103c58:	e59f300c 	ldr	r3, [pc, #12]	; c103c6c <compruebaCronometro+0x90>
 c103c5c:	e5832008 	str	r2, [r3, #8]

		}
	}


}
 c103c60:	e24bd00c 	sub	sp, fp, #12
 c103c64:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103c68:	e12fff1e 	bx	lr
 c103c6c:	0c10efbc 	.word	0x0c10efbc

0c103c70 <compruebaTemporizador>:
void compruebaTemporizador(rtc_time_t rtc_time){
 c103c70:	e1a0c00d 	mov	ip, sp
 c103c74:	e92dd800 	push	{fp, ip, lr, pc}
 c103c78:	e24cb004 	sub	fp, ip, #4
 c103c7c:	e24dd018 	sub	sp, sp, #24
 c103c80:	e24b301c 	sub	r3, fp, #28
 c103c84:	e8830003 	stm	r3, {r0, r1}
	int seg = rtc_time.sec;
 c103c88:	e55b301c 	ldrb	r3, [fp, #-28]	; 0xffffffe4
 c103c8c:	e50b3010 	str	r3, [fp, #-16]
	rtc_gettime( &rtc_time );
 c103c90:	e24b301c 	sub	r3, fp, #28
 c103c94:	e1a00003 	mov	r0, r3
 c103c98:	eb000f40 	bl	c1079a0 <rtc_gettime>
	if(rtc_time.sec != seg){
 c103c9c:	e55b301c 	ldrb	r3, [fp, #-28]	; 0xffffffe4
 c103ca0:	e1a02003 	mov	r2, r3
 c103ca4:	e51b3010 	ldr	r3, [fp, #-16]
 c103ca8:	e1520003 	cmp	r2, r3
 c103cac:	0a000025 	beq	c103d48 <compruebaTemporizador+0xd8>
		if (tiempoTemp.seg > 0) {
 c103cb0:	e59f3214 	ldr	r3, [pc, #532]	; c103ecc <compruebaTemporizador+0x25c>
 c103cb4:	e5933004 	ldr	r3, [r3, #4]
 c103cb8:	e3530000 	cmp	r3, #0
 c103cbc:	da000005 	ble	c103cd8 <compruebaTemporizador+0x68>
				tiempoTemp.seg--;
 c103cc0:	e59f3204 	ldr	r3, [pc, #516]	; c103ecc <compruebaTemporizador+0x25c>
 c103cc4:	e5933004 	ldr	r3, [r3, #4]
 c103cc8:	e2432001 	sub	r2, r3, #1
 c103ccc:	e59f31f8 	ldr	r3, [pc, #504]	; c103ecc <compruebaTemporizador+0x25c>
 c103cd0:	e5832004 	str	r2, [r3, #4]
 c103cd4:	ea00001b 	b	c103d48 <compruebaTemporizador+0xd8>
			} else {
				if (tiempoTemp.min > 0) {
 c103cd8:	e59f31ec 	ldr	r3, [pc, #492]	; c103ecc <compruebaTemporizador+0x25c>
 c103cdc:	e5933008 	ldr	r3, [r3, #8]
 c103ce0:	e3530000 	cmp	r3, #0
 c103ce4:	da000008 	ble	c103d0c <compruebaTemporizador+0x9c>
					tiempoTemp.min--;
 c103ce8:	e59f31dc 	ldr	r3, [pc, #476]	; c103ecc <compruebaTemporizador+0x25c>
 c103cec:	e5933008 	ldr	r3, [r3, #8]
 c103cf0:	e2432001 	sub	r2, r3, #1
 c103cf4:	e59f31d0 	ldr	r3, [pc, #464]	; c103ecc <compruebaTemporizador+0x25c>
 c103cf8:	e5832008 	str	r2, [r3, #8]
					tiempoTemp.seg = 59;
 c103cfc:	e59f31c8 	ldr	r3, [pc, #456]	; c103ecc <compruebaTemporizador+0x25c>
 c103d00:	e3a0203b 	mov	r2, #59	; 0x3b
 c103d04:	e5832004 	str	r2, [r3, #4]
 c103d08:	ea00000e 	b	c103d48 <compruebaTemporizador+0xd8>
				} else {
					if (tiempoTemp.hora > 0) {
 c103d0c:	e59f31b8 	ldr	r3, [pc, #440]	; c103ecc <compruebaTemporizador+0x25c>
 c103d10:	e593300c 	ldr	r3, [r3, #12]
 c103d14:	e3530000 	cmp	r3, #0
 c103d18:	da00000a 	ble	c103d48 <compruebaTemporizador+0xd8>
						tiempoTemp.hora--;
 c103d1c:	e59f31a8 	ldr	r3, [pc, #424]	; c103ecc <compruebaTemporizador+0x25c>
 c103d20:	e593300c 	ldr	r3, [r3, #12]
 c103d24:	e2432001 	sub	r2, r3, #1
 c103d28:	e59f319c 	ldr	r3, [pc, #412]	; c103ecc <compruebaTemporizador+0x25c>
 c103d2c:	e583200c 	str	r2, [r3, #12]
						tiempoTemp.min = 59;
 c103d30:	e59f3194 	ldr	r3, [pc, #404]	; c103ecc <compruebaTemporizador+0x25c>
 c103d34:	e3a0203b 	mov	r2, #59	; 0x3b
 c103d38:	e5832008 	str	r2, [r3, #8]
						tiempoTemp.seg = 59;
 c103d3c:	e59f3188 	ldr	r3, [pc, #392]	; c103ecc <compruebaTemporizador+0x25c>
 c103d40:	e3a0203b 	mov	r2, #59	; 0x3b
 c103d44:	e5832004 	str	r2, [r3, #4]
					}
				}
			}
	}
	if(tiempoTemp.hora==0 && tiempoTemp.min == 0&&tiempoTemp.seg < 10){
 c103d48:	e59f317c 	ldr	r3, [pc, #380]	; c103ecc <compruebaTemporizador+0x25c>
 c103d4c:	e593300c 	ldr	r3, [r3, #12]
 c103d50:	e3530000 	cmp	r3, #0
 c103d54:	1a00000c 	bne	c103d8c <compruebaTemporizador+0x11c>
 c103d58:	e59f316c 	ldr	r3, [pc, #364]	; c103ecc <compruebaTemporizador+0x25c>
 c103d5c:	e5933008 	ldr	r3, [r3, #8]
 c103d60:	e3530000 	cmp	r3, #0
 c103d64:	1a000008 	bne	c103d8c <compruebaTemporizador+0x11c>
 c103d68:	e59f315c 	ldr	r3, [pc, #348]	; c103ecc <compruebaTemporizador+0x25c>
 c103d6c:	e5933004 	ldr	r3, [r3, #4]
 c103d70:	e3530009 	cmp	r3, #9
 c103d74:	ca000004 	bgt	c103d8c <compruebaTemporizador+0x11c>
		segs_putchar( tiempoTemp.seg );
 c103d78:	e59f314c 	ldr	r3, [pc, #332]	; c103ecc <compruebaTemporizador+0x25c>
 c103d7c:	e5933004 	ldr	r3, [r3, #4]
 c103d80:	e20330ff 	and	r3, r3, #255	; 0xff
 c103d84:	e1a00003 	mov	r0, r3
 c103d88:	eb001067 	bl	c107f2c <segs_putchar>
	}
	if(TempTermina || (tiempoTemp.hora==0 && tiempoTemp.min == 0&&tiempoTemp.seg == 0 && iniTemp)){
 c103d8c:	e59f313c 	ldr	r3, [pc, #316]	; c103ed0 <compruebaTemporizador+0x260>
 c103d90:	e5d33000 	ldrb	r3, [r3]
 c103d94:	e3530000 	cmp	r3, #0
 c103d98:	1a00000f 	bne	c103ddc <compruebaTemporizador+0x16c>
 c103d9c:	e59f3128 	ldr	r3, [pc, #296]	; c103ecc <compruebaTemporizador+0x25c>
 c103da0:	e593300c 	ldr	r3, [r3, #12]
 c103da4:	e3530000 	cmp	r3, #0
 c103da8:	1a000044 	bne	c103ec0 <compruebaTemporizador+0x250>
 c103dac:	e59f3118 	ldr	r3, [pc, #280]	; c103ecc <compruebaTemporizador+0x25c>
 c103db0:	e5933008 	ldr	r3, [r3, #8]
 c103db4:	e3530000 	cmp	r3, #0
 c103db8:	1a000040 	bne	c103ec0 <compruebaTemporizador+0x250>
 c103dbc:	e59f3108 	ldr	r3, [pc, #264]	; c103ecc <compruebaTemporizador+0x25c>
 c103dc0:	e5933004 	ldr	r3, [r3, #4]
 c103dc4:	e3530000 	cmp	r3, #0
 c103dc8:	1a00003c 	bne	c103ec0 <compruebaTemporizador+0x250>
 c103dcc:	e59f3100 	ldr	r3, [pc, #256]	; c103ed4 <compruebaTemporizador+0x264>
 c103dd0:	e5d33000 	ldrb	r3, [r3]
 c103dd4:	e3530000 	cmp	r3, #0
 c103dd8:	0a000038 	beq	c103ec0 <compruebaTemporizador+0x250>
		segs_off();
 c103ddc:	eb001044 	bl	c107ef4 <segs_off>
		if(!TempTermina){
 c103de0:	e59f30e8 	ldr	r3, [pc, #232]	; c103ed0 <compruebaTemporizador+0x260>
 c103de4:	e5d33000 	ldrb	r3, [r3]
 c103de8:	e3530000 	cmp	r3, #0
 c103dec:	1a000025 	bne	c103e88 <compruebaTemporizador+0x218>
			lcd_clear();
 c103df0:	eb0007e3 	bl	c105d84 <lcd_clear>


			lcd_draw_box(0, 0 , 320, 240, BLACK, 3);
 c103df4:	e3a0300f 	mov	r3, #15
 c103df8:	e58d3000 	str	r3, [sp]
 c103dfc:	e3a03003 	mov	r3, #3
 c103e00:	e58d3004 	str	r3, [sp, #4]
 c103e04:	e3a00000 	mov	r0, #0
 c103e08:	e3a01000 	mov	r1, #0
 c103e0c:	e3a02d05 	mov	r2, #320	; 0x140
 c103e10:	e3a030f0 	mov	r3, #240	; 0xf0
 c103e14:	eb0008dc 	bl	c10618c <lcd_draw_box>
			lcd_puts_x3(13, 50, BLACK, "TEMP");
 c103e18:	e3a0000d 	mov	r0, #13
 c103e1c:	e3a01032 	mov	r1, #50	; 0x32
 c103e20:	e3a0200f 	mov	r2, #15
 c103e24:	e59f30ac 	ldr	r3, [pc, #172]	; c103ed8 <compruebaTemporizador+0x268>
 c103e28:	eb000b18 	bl	c106a90 <lcd_puts_x3>
			lcd_puts_x2(6, 140, BLACK, "FINALIZADO");
 c103e2c:	e3a00006 	mov	r0, #6
 c103e30:	e3a0108c 	mov	r1, #140	; 0x8c
 c103e34:	e3a0200f 	mov	r2, #15
 c103e38:	e59f309c 	ldr	r3, [pc, #156]	; c103edc <compruebaTemporizador+0x26c>
 c103e3c:	eb000ad5 	bl	c106998 <lcd_puts_x2>
			TempTermina=TRUE;
 c103e40:	e59f3088 	ldr	r3, [pc, #136]	; c103ed0 <compruebaTemporizador+0x260>
 c103e44:	e3a02001 	mov	r2, #1
 c103e48:	e5c32000 	strb	r2, [r3]
			relojMenu = FALSE;
 c103e4c:	e59f308c 	ldr	r3, [pc, #140]	; c103ee0 <compruebaTemporizador+0x270>
 c103e50:	e3a02000 	mov	r2, #0
 c103e54:	e5c32000 	strb	r2, [r3]
			alarmaFlag = FALSE;
 c103e58:	e59f3084 	ldr	r3, [pc, #132]	; c103ee4 <compruebaTemporizador+0x274>
 c103e5c:	e3a02000 	mov	r2, #0
 c103e60:	e5c32000 	strb	r2, [r3]
			pasosFlag = FALSE;
 c103e64:	e59f307c 	ldr	r3, [pc, #124]	; c103ee8 <compruebaTemporizador+0x278>
 c103e68:	e3a02000 	mov	r2, #0
 c103e6c:	e5c32000 	strb	r2, [r3]
			pulsoFlag = FALSE;
 c103e70:	e59f3074 	ldr	r3, [pc, #116]	; c103eec <compruebaTemporizador+0x27c>
 c103e74:	e3a02000 	mov	r2, #0
 c103e78:	e5c32000 	strb	r2, [r3]
			iis_playWawFile( NOKIATUNE, TRUE );
 c103e7c:	e59f006c 	ldr	r0, [pc, #108]	; c103ef0 <compruebaTemporizador+0x280>
 c103e80:	e3a01001 	mov	r1, #1
 c103e84:	eb0005b7 	bl	c105568 <iis_playWawFile>
		}

		if(pb_scan()==PB_LEFT){
 c103e88:	eb000d02 	bl	c107298 <pb_scan>
 c103e8c:	e1a03000 	mov	r3, r0
 c103e90:	e3530040 	cmp	r3, #64	; 0x40
 c103e94:	1a000009 	bne	c103ec0 <compruebaTemporizador+0x250>

			iis_pause();
 c103e98:	eb00058d 	bl	c1054d4 <iis_pause>
			TempTermina = FALSE;
 c103e9c:	e59f302c 	ldr	r3, [pc, #44]	; c103ed0 <compruebaTemporizador+0x260>
 c103ea0:	e3a02000 	mov	r2, #0
 c103ea4:	e5c32000 	strb	r2, [r3]
			MenuPrincipal = TRUE;
 c103ea8:	e59f3044 	ldr	r3, [pc, #68]	; c103ef4 <compruebaTemporizador+0x284>
 c103eac:	e3a02001 	mov	r2, #1
 c103eb0:	e5c32000 	strb	r2, [r3]
			iniTemp = FALSE;
 c103eb4:	e59f3018 	ldr	r3, [pc, #24]	; c103ed4 <compruebaTemporizador+0x264>
 c103eb8:	e3a02000 	mov	r2, #0
 c103ebc:	e5c32000 	strb	r2, [r3]


		}

	}
}
 c103ec0:	e24bd00c 	sub	sp, fp, #12
 c103ec4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103ec8:	e12fff1e 	bx	lr
 c103ecc:	0c10efdc 	.word	0x0c10efdc
 c103ed0:	0c1ab439 	.word	0x0c1ab439
 c103ed4:	0c1ab420 	.word	0x0c1ab420
 c103ed8:	0c10caa4 	.word	0x0c10caa4
 c103edc:	0c10caac 	.word	0x0c10caac
 c103ee0:	0c10eb8b 	.word	0x0c10eb8b
 c103ee4:	0c10eb8c 	.word	0x0c10eb8c
 c103ee8:	0c10eb8d 	.word	0x0c10eb8d
 c103eec:	0c10eb8e 	.word	0x0c10eb8e
 c103ef0:	0c420000 	.word	0x0c420000
 c103ef4:	0c10e734 	.word	0x0c10e734

0c103ef8 <startSensorsEmulator>:

/*******************************************************************/


void startSensorsEmulator( void (*isrBeat)(void), void (*isrStep)(void), uint8 beatPerMin, uint8 stepPerMin )
{
 c103ef8:	e1a0c00d 	mov	ip, sp
 c103efc:	e92dd800 	push	{fp, ip, lr, pc}
 c103f00:	e24cb004 	sub	fp, ip, #4
 c103f04:	e24dd010 	sub	sp, sp, #16
 c103f08:	e50b0010 	str	r0, [fp, #-16]
 c103f0c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
 c103f10:	e54b2015 	strb	r2, [fp, #-21]	; 0xffffffeb
 c103f14:	e54b3016 	strb	r3, [fp, #-22]	; 0xffffffea

	latidosPorMin = beatPerMin;
 c103f18:	e59f3254 	ldr	r3, [pc, #596]	; c104174 <startSensorsEmulator+0x27c>
 c103f1c:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
 c103f20:	e5c32000 	strb	r2, [r3]
	pasosPorMin   = stepPerMin;
 c103f24:	e59f324c 	ldr	r3, [pc, #588]	; c104178 <startSensorsEmulator+0x280>
 c103f28:	e55b2016 	ldrb	r2, [fp, #-22]	; 0xffffffea
 c103f2c:	e5c32000 	strb	r2, [r3]

    CLKCON |= (1<<10) | (1<<8) | (1<<7) | (1 << 3);            // Activa GPIO, UART0, BDMA y TIMER
 c103f30:	e59f2244 	ldr	r2, [pc, #580]	; c10417c <startSensorsEmulator+0x284>
 c103f34:	e59f3240 	ldr	r3, [pc, #576]	; c10417c <startSensorsEmulator+0x284>
 c103f38:	e5933000 	ldr	r3, [r3]
 c103f3c:	e3833d16 	orr	r3, r3, #1408	; 0x580
 c103f40:	e3833008 	orr	r3, r3, #8
 c103f44:	e5823000 	str	r3, [r2]

	PCONE = (PCONE & ~(0xf<<2)) | (2<<4) | (2<<2); 	           // PE[2] = RxD0, PE[1] = TxD0
 c103f48:	e59f3230 	ldr	r3, [pc, #560]	; c104180 <startSensorsEmulator+0x288>
 c103f4c:	e59f222c 	ldr	r2, [pc, #556]	; c104180 <startSensorsEmulator+0x288>
 c103f50:	e5922000 	ldr	r2, [r2]
 c103f54:	e3c2203c 	bic	r2, r2, #60	; 0x3c
 c103f58:	e3822028 	orr	r2, r2, #40	; 0x28
 c103f5c:	e5832000 	str	r2, [r3]
	PUPE  |= (1<<2) | (1<<1);						           // Pull-up disable
 c103f60:	e59f321c 	ldr	r3, [pc, #540]	; c104184 <startSensorsEmulator+0x28c>
 c103f64:	e59f2218 	ldr	r2, [pc, #536]	; c104184 <startSensorsEmulator+0x28c>
 c103f68:	e5922000 	ldr	r2, [r2]
 c103f6c:	e3822006 	orr	r2, r2, #6
 c103f70:	e5832000 	str	r2, [r3]

	UFCON0 = 0;	                                               // FIFOs desactivadas, para activarlas UFCON0 = 1
 c103f74:	e59f320c 	ldr	r3, [pc, #524]	; c104188 <startSensorsEmulator+0x290>
 c103f78:	e3a02000 	mov	r2, #0
 c103f7c:	e5832000 	str	r2, [r3]
	UMCON0 = 0;	                                               // Control de flujo manual
 c103f80:	e59f3204 	ldr	r3, [pc, #516]	; c10418c <startSensorsEmulator+0x294>
 c103f84:	e3a02000 	mov	r2, #0
 c103f88:	e5832000 	str	r2, [r3]
	ULCON0 = (0 << 6) | (0 << 3) | (0 << 2) | (3);   		   // normal (no infrarojos), sin paridad, 1 bit de stop, 8 bits de datos
 c103f8c:	e3a0361d 	mov	r3, #30408704	; 0x1d00000
 c103f90:	e3a02003 	mov	r2, #3
 c103f94:	e5832000 	str	r2, [r3]
	UBRDIV0 = 34;                                              // 115200 baudios asumiendo 64MHz
 c103f98:	e59f31f0 	ldr	r3, [pc, #496]	; c104190 <startSensorsEmulator+0x298>
 c103f9c:	e3a02022 	mov	r2, #34	; 0x22
 c103fa0:	e5832000 	str	r2, [r3]
	UCON0 = (0 << 9) | (0 << 8)| (1 << 2) | (1);			   // Tx pulso, Rx pulso, Tx int/polling, Rx int/polling
 c103fa4:	e59f31e8 	ldr	r3, [pc, #488]	; c104194 <startSensorsEmulator+0x29c>
 c103fa8:	e3a02005 	mov	r2, #5
 c103fac:	e5832000 	str	r2, [r3]

	fifo_init( &fifoTX );
 c103fb0:	e59f01e0 	ldr	r0, [pc, #480]	; c104198 <startSensorsEmulator+0x2a0>
 c103fb4:	eb000359 	bl	c104d20 <fifo_init>

	pISR_URXD0 = (uint32) uart0int_isrRX;	 			       // Instala la rutina de tratamiento de recepción
 c103fb8:	e59f31dc 	ldr	r3, [pc, #476]	; c10419c <startSensorsEmulator+0x2a4>
 c103fbc:	e59f21dc 	ldr	r2, [pc, #476]	; c1041a0 <startSensorsEmulator+0x2a8>
 c103fc0:	e5832000 	str	r2, [r3]
	pISR_UTXD0 = (uint32) uart0int_isrTX;	 			       // Instala la rutina de tratamiento de transmisión
 c103fc4:	e59f31d8 	ldr	r3, [pc, #472]	; c1041a4 <startSensorsEmulator+0x2ac>
 c103fc8:	e59f21d8 	ldr	r2, [pc, #472]	; c1041a8 <startSensorsEmulator+0x2b0>
 c103fcc:	e5832000 	str	r2, [r3]
	I_ISPC	   = (BIT_URXD0 | BIT_UTXD0);		               // Borra los bits de interrupción pendiente
 c103fd0:	e59f31d4 	ldr	r3, [pc, #468]	; c1041ac <startSensorsEmulator+0x2b4>
 c103fd4:	e3a02088 	mov	r2, #136	; 0x88
 c103fd8:	e5832000 	str	r2, [r3]
	INTMSK    &= ~( BIT_GLOBAL | BIT_URXD0 | BIT_UTXD0 );	   // Desenmascara globalmente las interrupciones y específicamente las interrupciones RX y Tx del UART0
 c103fdc:	e59f21cc 	ldr	r2, [pc, #460]	; c1041b0 <startSensorsEmulator+0x2b8>
 c103fe0:	e59f31c8 	ldr	r3, [pc, #456]	; c1041b0 <startSensorsEmulator+0x2b8>
 c103fe4:	e5933000 	ldr	r3, [r3]
 c103fe8:	e3c33301 	bic	r3, r3, #67108864	; 0x4000000
 c103fec:	e3c33088 	bic	r3, r3, #136	; 0x88
 c103ff0:	e5823000 	str	r3, [r2]


	TCFG0 = (TCFG0 & ~(0xff << 8)) | (199 << 8);               // T3-T2 PRESCALER = 199 (1/(199+1))
 c103ff4:	e59f31b8 	ldr	r3, [pc, #440]	; c1041b4 <startSensorsEmulator+0x2bc>
 c103ff8:	e59f21b4 	ldr	r2, [pc, #436]	; c1041b4 <startSensorsEmulator+0x2bc>
 c103ffc:	e5922000 	ldr	r2, [r2]
 c104000:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c104004:	e3822cc7 	orr	r2, r2, #50944	; 0xc700
 c104008:	e5832000 	str	r2, [r3]
    TCFG1 = (TCFG1 & ~(0xf << 12)) | (4 << 12);                // T3 DIVISOR = 32 (1/32)
 c10400c:	e59f31a4 	ldr	r3, [pc, #420]	; c1041b8 <startSensorsEmulator+0x2c0>
 c104010:	e59f21a0 	ldr	r2, [pc, #416]	; c1041b8 <startSensorsEmulator+0x2c0>
 c104014:	e5922000 	ldr	r2, [r2]
 c104018:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c10401c:	e3822901 	orr	r2, r2, #16384	; 0x4000
 c104020:	e5832000 	str	r2, [r3]
    TCFG1 = (TCFG1 & ~(0xf << 8))  | (4 << 8);                 // T2 DIVISOR = 32 (1/32)
 c104024:	e59f318c 	ldr	r3, [pc, #396]	; c1041b8 <startSensorsEmulator+0x2c0>
 c104028:	e59f2188 	ldr	r2, [pc, #392]	; c1041b8 <startSensorsEmulator+0x2c0>
 c10402c:	e5922000 	ldr	r2, [r2]
 c104030:	e3c22c0f 	bic	r2, r2, #3840	; 0xf00
 c104034:	e3822b01 	orr	r2, r2, #1024	; 0x400
 c104038:	e5832000 	str	r2, [r3]
    
    INTMSK |= ( BIT_TIMER3 | BIT_TIMER2 );                     // Enmascara la interrupcion por fin de T3 y T2
 c10403c:	e59f316c 	ldr	r3, [pc, #364]	; c1041b0 <startSensorsEmulator+0x2b8>
 c104040:	e59f2168 	ldr	r2, [pc, #360]	; c1041b0 <startSensorsEmulator+0x2b8>
 c104044:	e5922000 	ldr	r2, [r2]
 c104048:	e3822b03 	orr	r2, r2, #3072	; 0xc00
 c10404c:	e5832000 	str	r2, [r3]

    pISR_TIMER3 = (uint32) isrBeat;                            // Instala la funcion isr como RTI por fin de cuenta de T3
 c104050:	e59f3164 	ldr	r3, [pc, #356]	; c1041bc <startSensorsEmulator+0x2c4>
 c104054:	e51b2010 	ldr	r2, [fp, #-16]
 c104058:	e5832000 	str	r2, [r3]
    pISR_TIMER2 = (uint32) isrStep;                            // Instala la funcion isr como RTI por fin de cuenta de T2
 c10405c:	e59f315c 	ldr	r3, [pc, #348]	; c1041c0 <startSensorsEmulator+0x2c8>
 c104060:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c104064:	e5832000 	str	r2, [r3]

    TCNTB3  = cntb[latidosPorMin];                             // Carga T3
 c104068:	e59f3154 	ldr	r3, [pc, #340]	; c1041c4 <startSensorsEmulator+0x2cc>
 c10406c:	e59f2100 	ldr	r2, [pc, #256]	; c104174 <startSensorsEmulator+0x27c>
 c104070:	e5d22000 	ldrb	r2, [r2]
 c104074:	e20220ff 	and	r2, r2, #255	; 0xff
 c104078:	e59f1148 	ldr	r1, [pc, #328]	; c1041c8 <startSensorsEmulator+0x2d0>
 c10407c:	e1a02082 	lsl	r2, r2, #1
 c104080:	e0812002 	add	r2, r1, r2
 c104084:	e1d220b0 	ldrh	r2, [r2]
 c104088:	e5832000 	str	r2, [r3]
    TCON    = (TCON & ~(0xf << 16)) | (1 << 19) | (1 << 17);   // Modo interval, carga TCNT3, stop T3
 c10408c:	e59f3138 	ldr	r3, [pc, #312]	; c1041cc <startSensorsEmulator+0x2d4>
 c104090:	e59f2134 	ldr	r2, [pc, #308]	; c1041cc <startSensorsEmulator+0x2d4>
 c104094:	e5922000 	ldr	r2, [r2]
 c104098:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c10409c:	e382280a 	orr	r2, r2, #655360	; 0xa0000
 c1040a0:	e5832000 	str	r2, [r3]
    TCON    = (TCON & ~(0xf << 16)) | (1 << 19) | (1 << 16);   // Modo interval, no carga TCNT3, start T3
 c1040a4:	e59f3120 	ldr	r3, [pc, #288]	; c1041cc <startSensorsEmulator+0x2d4>
 c1040a8:	e59f211c 	ldr	r2, [pc, #284]	; c1041cc <startSensorsEmulator+0x2d4>
 c1040ac:	e5922000 	ldr	r2, [r2]
 c1040b0:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c1040b4:	e3822809 	orr	r2, r2, #589824	; 0x90000
 c1040b8:	e5832000 	str	r2, [r3]

    TCNTB2  = cntb[pasosPorMin];                               // Carga T2
 c1040bc:	e59f310c 	ldr	r3, [pc, #268]	; c1041d0 <startSensorsEmulator+0x2d8>
 c1040c0:	e59f20b0 	ldr	r2, [pc, #176]	; c104178 <startSensorsEmulator+0x280>
 c1040c4:	e5d22000 	ldrb	r2, [r2]
 c1040c8:	e20220ff 	and	r2, r2, #255	; 0xff
 c1040cc:	e59f10f4 	ldr	r1, [pc, #244]	; c1041c8 <startSensorsEmulator+0x2d0>
 c1040d0:	e1a02082 	lsl	r2, r2, #1
 c1040d4:	e0812002 	add	r2, r1, r2
 c1040d8:	e1d220b0 	ldrh	r2, [r2]
 c1040dc:	e5832000 	str	r2, [r3]
    TCON    = (TCON & ~(0xf << 12)) | (1 << 15) | (1 << 13);   // Modo interval, carga TCNT2, stop T2
 c1040e0:	e59f30e4 	ldr	r3, [pc, #228]	; c1041cc <startSensorsEmulator+0x2d4>
 c1040e4:	e59f20e0 	ldr	r2, [pc, #224]	; c1041cc <startSensorsEmulator+0x2d4>
 c1040e8:	e5922000 	ldr	r2, [r2]
 c1040ec:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c1040f0:	e3822a0a 	orr	r2, r2, #40960	; 0xa000
 c1040f4:	e5832000 	str	r2, [r3]
    TCON    = (TCON & ~(0xf << 12)) | (1 << 15) | (1 << 12);   // Modo interval, no carga TCNT2, start T2
 c1040f8:	e59f30cc 	ldr	r3, [pc, #204]	; c1041cc <startSensorsEmulator+0x2d4>
 c1040fc:	e59f20c8 	ldr	r2, [pc, #200]	; c1041cc <startSensorsEmulator+0x2d4>
 c104100:	e5922000 	ldr	r2, [r2]
 c104104:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c104108:	e3822a09 	orr	r2, r2, #36864	; 0x9000
 c10410c:	e5832000 	str	r2, [r3]

    I_ISPC  = BIT_TIMER3 | BIT_TIMER2;                         // Borra el bit de interrupción pendiente por fin de T3 y por fin de T2
 c104110:	e59f3094 	ldr	r3, [pc, #148]	; c1041ac <startSensorsEmulator+0x2b4>
 c104114:	e3a02b03 	mov	r2, #3072	; 0xc00
 c104118:	e5832000 	str	r2, [r3]
    INTMSK &= ~( BIT_GLOBAL | BIT_TIMER3 | BIT_TIMER2 );       // Desenmascara la interrupción por fin del T4, fin T5 y las interrupciones globales
 c10411c:	e59f208c 	ldr	r2, [pc, #140]	; c1041b0 <startSensorsEmulator+0x2b8>
 c104120:	e59f3088 	ldr	r3, [pc, #136]	; c1041b0 <startSensorsEmulator+0x2b8>
 c104124:	e5933000 	ldr	r3, [r3]
 c104128:	e3c33301 	bic	r3, r3, #67108864	; 0x4000000
 c10412c:	e3c33b03 	bic	r3, r3, #3072	; 0xc00
 c104130:	e5823000 	str	r3, [r2]


	uart0int_puts( "\n\n" );
 c104134:	e59f0098 	ldr	r0, [pc, #152]	; c1041d4 <startSensorsEmulator+0x2dc>
 c104138:	eb00007b 	bl	c10432c <uart0int_puts>
	uart0int_puts( "-------------------------------------\n" );
 c10413c:	e59f0094 	ldr	r0, [pc, #148]	; c1041d8 <startSensorsEmulator+0x2e0>
 c104140:	eb000079 	bl	c10432c <uart0int_puts>
	uart0int_puts( "Emulador de latidos y pasos arrancado\n" );
 c104144:	e59f0090 	ldr	r0, [pc, #144]	; c1041dc <startSensorsEmulator+0x2e4>
 c104148:	eb000077 	bl	c10432c <uart0int_puts>
	uart0int_puts( "  - Latidos por minuto: 28-255\n" );
 c10414c:	e59f008c 	ldr	r0, [pc, #140]	; c1041e0 <startSensorsEmulator+0x2e8>
 c104150:	eb000075 	bl	c10432c <uart0int_puts>
	uart0int_puts( "  - Pasos por minuto:   0/10-200\n" );
 c104154:	e59f0088 	ldr	r0, [pc, #136]	; c1041e4 <startSensorsEmulator+0x2ec>
 c104158:	eb000073 	bl	c10432c <uart0int_puts>
	uart0int_puts( "-------------------------------------\n" );
 c10415c:	e59f0074 	ldr	r0, [pc, #116]	; c1041d8 <startSensorsEmulator+0x2e0>
 c104160:	eb000071 	bl	c10432c <uart0int_puts>
	uart0int_putMenu();
 c104164:	eb0000af 	bl	c104428 <uart0int_putMenu>
}
 c104168:	e24bd00c 	sub	sp, fp, #12
 c10416c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c104170:	e12fff1e 	bx	lr
 c104174:	0c10ef9e 	.word	0x0c10ef9e
 c104178:	0c10ef9f 	.word	0x0c10ef9f
 c10417c:	01d80004 	.word	0x01d80004
 c104180:	01d20028 	.word	0x01d20028
 c104184:	01d20030 	.word	0x01d20030
 c104188:	01d00008 	.word	0x01d00008
 c10418c:	01d0000c 	.word	0x01d0000c
 c104190:	01d00028 	.word	0x01d00028
 c104194:	01d00004 	.word	0x01d00004
 c104198:	0c10eb98 	.word	0x0c10eb98
 c10419c:	0c7fff3c 	.word	0x0c7fff3c
 c1041a0:	0c104514 	.word	0x0c104514
 c1041a4:	0c7fff2c 	.word	0x0c7fff2c
 c1041a8:	0c1042d4 	.word	0x0c1042d4
 c1041ac:	01e00024 	.word	0x01e00024
 c1041b0:	01e0000c 	.word	0x01e0000c
 c1041b4:	01d50000 	.word	0x01d50000
 c1041b8:	01d50004 	.word	0x01d50004
 c1041bc:	0c7fff48 	.word	0x0c7fff48
 c1041c0:	0c7fff4c 	.word	0x0c7fff4c
 c1041c4:	01d50030 	.word	0x01d50030
 c1041c8:	0c10cae0 	.word	0x0c10cae0
 c1041cc:	01d50008 	.word	0x01d50008
 c1041d0:	01d50024 	.word	0x01d50024
 c1041d4:	0c10cce0 	.word	0x0c10cce0
 c1041d8:	0c10cce4 	.word	0x0c10cce4
 c1041dc:	0c10cd0c 	.word	0x0c10cd0c
 c1041e0:	0c10cd34 	.word	0x0c10cd34
 c1041e4:	0c10cd54 	.word	0x0c10cd54

0c1041e8 <getBeatPerMin>:

/*******************************************************************/

int getBeatPerMin(void){
 c1041e8:	e1a0c00d 	mov	ip, sp
 c1041ec:	e92dd800 	push	{fp, ip, lr, pc}
 c1041f0:	e24cb004 	sub	fp, ip, #4
	return latidosPorMin;
 c1041f4:	e59f3014 	ldr	r3, [pc, #20]	; c104210 <getBeatPerMin+0x28>
 c1041f8:	e5d33000 	ldrb	r3, [r3]
 c1041fc:	e20330ff 	and	r3, r3, #255	; 0xff
}
 c104200:	e1a00003 	mov	r0, r3
 c104204:	e24bd00c 	sub	sp, fp, #12
 c104208:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10420c:	e12fff1e 	bx	lr
 c104210:	0c10ef9e 	.word	0x0c10ef9e

0c104214 <getStepsPerMin>:
int getStepsPerMin(void){
 c104214:	e1a0c00d 	mov	ip, sp
 c104218:	e92dd800 	push	{fp, ip, lr, pc}
 c10421c:	e24cb004 	sub	fp, ip, #4
	return pasosPorMin;
 c104220:	e59f3014 	ldr	r3, [pc, #20]	; c10423c <getStepsPerMin+0x28>
 c104224:	e5d33000 	ldrb	r3, [r3]
 c104228:	e20330ff 	and	r3, r3, #255	; 0xff
}
 c10422c:	e1a00003 	mov	r0, r3
 c104230:	e24bd00c 	sub	sp, fp, #12
 c104234:	e89d6800 	ldm	sp, {fp, sp, lr}
 c104238:	e12fff1e 	bx	lr
 c10423c:	0c10ef9f 	.word	0x0c10ef9f

0c104240 <uart0int_putchar>:
void uart0int_putchar( char ch )
{
 c104240:	e1a0c00d 	mov	ip, sp
 c104244:	e92dd800 	push	{fp, ip, lr, pc}
 c104248:	e24cb004 	sub	fp, ip, #4
 c10424c:	e24dd008 	sub	sp, sp, #8
 c104250:	e1a03000 	mov	r3, r0
 c104254:	e54b300d 	strb	r3, [fp, #-13]
	if( fifo_is_empty( &fifoTX ) )
 c104258:	e59f0068 	ldr	r0, [pc, #104]	; c1042c8 <uart0int_putchar+0x88>
 c10425c:	eb000324 	bl	c104ef4 <fifo_is_empty>
 c104260:	e1a03000 	mov	r3, r0
 c104264:	e3530000 	cmp	r3, #0
 c104268:	0a000009 	beq	c104294 <uart0int_putchar+0x54>
	{
		while( !(UTRSTAT0 & (1 << 1)) );	// Espera por si todavía está transmitiendo el último byte enviado
 c10426c:	e1a00000 	nop			; (mov r0, r0)
 c104270:	e59f3054 	ldr	r3, [pc, #84]	; c1042cc <uart0int_putchar+0x8c>
 c104274:	e5933000 	ldr	r3, [r3]
 c104278:	e2033002 	and	r3, r3, #2
 c10427c:	e3530000 	cmp	r3, #0
 c104280:	0afffffa 	beq	c104270 <uart0int_putchar+0x30>
		UTXH0 = ch;							// Envía el byte, cuando termine la transmisión se genera la primera interrupción
 c104284:	e59f3044 	ldr	r3, [pc, #68]	; c1042d0 <uart0int_putchar+0x90>
 c104288:	e55b200d 	ldrb	r2, [fp, #-13]
 c10428c:	e5832000 	str	r2, [r3]
 c104290:	ea000009 	b	c1042bc <uart0int_putchar+0x7c>
	}
	else
	{
		while( fifo_is_full( &fifoTX ) );
 c104294:	e1a00000 	nop			; (mov r0, r0)
 c104298:	e59f0028 	ldr	r0, [pc, #40]	; c1042c8 <uart0int_putchar+0x88>
 c10429c:	eb000325 	bl	c104f38 <fifo_is_full>
 c1042a0:	e1a03000 	mov	r3, r0
 c1042a4:	e3530000 	cmp	r3, #0
 c1042a8:	1afffffa 	bne	c104298 <uart0int_putchar+0x58>
		fifo_enqueue( &fifoTX, (uint8) ch );
 c1042ac:	e55b300d 	ldrb	r3, [fp, #-13]
 c1042b0:	e59f0010 	ldr	r0, [pc, #16]	; c1042c8 <uart0int_putchar+0x88>
 c1042b4:	e1a01003 	mov	r1, r3
 c1042b8:	eb0002a9 	bl	c104d64 <fifo_enqueue>
	}
}
 c1042bc:	e24bd00c 	sub	sp, fp, #12
 c1042c0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1042c4:	e12fff1e 	bx	lr
 c1042c8:	0c10eb98 	.word	0x0c10eb98
 c1042cc:	01d00010 	.word	0x01d00010
 c1042d0:	01d00020 	.word	0x01d00020

0c1042d4 <uart0int_isrTX>:

void uart0int_isrTX( void )
{
 c1042d4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1042d8:	e1a0c00d 	mov	ip, sp
 c1042dc:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1042e0:	e24cb004 	sub	fp, ip, #4
    I_ISPC = BIT_UTXD0;
 c1042e4:	e59f3034 	ldr	r3, [pc, #52]	; c104320 <uart0int_isrTX+0x4c>
 c1042e8:	e3a02008 	mov	r2, #8
 c1042ec:	e5832000 	str	r2, [r3]
	if( !fifo_is_empty( &fifoTX ) )
 c1042f0:	e59f002c 	ldr	r0, [pc, #44]	; c104324 <uart0int_isrTX+0x50>
 c1042f4:	eb0002fe 	bl	c104ef4 <fifo_is_empty>
 c1042f8:	e1a03000 	mov	r3, r0
 c1042fc:	e3530000 	cmp	r3, #0
 c104300:	1a000002 	bne	c104310 <uart0int_isrTX+0x3c>
		fifo_dequeue( &fifoTX, (uint8 *) &UTXH0 );
 c104304:	e59f0018 	ldr	r0, [pc, #24]	; c104324 <uart0int_isrTX+0x50>
 c104308:	e59f1018 	ldr	r1, [pc, #24]	; c104328 <uart0int_isrTX+0x54>
 c10430c:	eb0002c6 	bl	c104e2c <fifo_dequeue>
}
 c104310:	e24bd01c 	sub	sp, fp, #28
 c104314:	e89d680f 	ldm	sp, {r0, r1, r2, r3, fp, sp, lr}
 c104318:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c10431c:	e25ef004 	subs	pc, lr, #4
 c104320:	01e00024 	.word	0x01e00024
 c104324:	0c10eb98 	.word	0x0c10eb98
 c104328:	01d00020 	.word	0x01d00020

0c10432c <uart0int_puts>:

void uart0int_puts( char *s )
{
 c10432c:	e1a0c00d 	mov	ip, sp
 c104330:	e92dd800 	push	{fp, ip, lr, pc}
 c104334:	e24cb004 	sub	fp, ip, #4
 c104338:	e24dd008 	sub	sp, sp, #8
 c10433c:	e50b0010 	str	r0, [fp, #-16]
    while( *s )
 c104340:	ea000006 	b	c104360 <uart0int_puts+0x34>
		uart0int_putchar( *s++ );
 c104344:	e51b3010 	ldr	r3, [fp, #-16]
 c104348:	e5d33000 	ldrb	r3, [r3]
 c10434c:	e51b2010 	ldr	r2, [fp, #-16]
 c104350:	e2822001 	add	r2, r2, #1
 c104354:	e50b2010 	str	r2, [fp, #-16]
 c104358:	e1a00003 	mov	r0, r3
 c10435c:	ebffffb7 	bl	c104240 <uart0int_putchar>
		fifo_dequeue( &fifoTX, (uint8 *) &UTXH0 );
}

void uart0int_puts( char *s )
{
    while( *s )
 c104360:	e51b3010 	ldr	r3, [fp, #-16]
 c104364:	e5d33000 	ldrb	r3, [r3]
 c104368:	e3530000 	cmp	r3, #0
 c10436c:	1afffff4 	bne	c104344 <uart0int_puts+0x18>
		uart0int_putchar( *s++ );
}
 c104370:	e24bd00c 	sub	sp, fp, #12
 c104374:	e89d6800 	ldm	sp, {fp, sp, lr}
 c104378:	e12fff1e 	bx	lr

0c10437c <uart0int_putnum>:

void uart0int_putnum( uint8 i )
{
 c10437c:	e1a0c00d 	mov	ip, sp
 c104380:	e92dd800 	push	{fp, ip, lr, pc}
 c104384:	e24cb004 	sub	fp, ip, #4
 c104388:	e24dd010 	sub	sp, sp, #16
 c10438c:	e1a03000 	mov	r3, r0
 c104390:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	char buf[3 + 1];
	char *p = buf + 3;
 c104394:	e24b3014 	sub	r3, fp, #20
 c104398:	e2833003 	add	r3, r3, #3
 c10439c:	e50b3010 	str	r3, [fp, #-16]

	*p = '\0';
 c1043a0:	e51b3010 	ldr	r3, [fp, #-16]
 c1043a4:	e3a02000 	mov	r2, #0
 c1043a8:	e5c32000 	strb	r2, [r3]

    do {
        *--p = '0' + (i % 10);
 c1043ac:	e51b3010 	ldr	r3, [fp, #-16]
 c1043b0:	e2433001 	sub	r3, r3, #1
 c1043b4:	e50b3010 	str	r3, [fp, #-16]
 c1043b8:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
 c1043bc:	e59f3060 	ldr	r3, [pc, #96]	; c104424 <uart0int_putnum+0xa8>
 c1043c0:	e0831392 	umull	r1, r3, r2, r3
 c1043c4:	e1a011a3 	lsr	r1, r3, #3
 c1043c8:	e1a03001 	mov	r3, r1
 c1043cc:	e1a03103 	lsl	r3, r3, #2
 c1043d0:	e0833001 	add	r3, r3, r1
 c1043d4:	e1a03083 	lsl	r3, r3, #1
 c1043d8:	e0633002 	rsb	r3, r3, r2
 c1043dc:	e20330ff 	and	r3, r3, #255	; 0xff
 c1043e0:	e2833030 	add	r3, r3, #48	; 0x30
 c1043e4:	e20320ff 	and	r2, r3, #255	; 0xff
 c1043e8:	e51b3010 	ldr	r3, [fp, #-16]
 c1043ec:	e5c32000 	strb	r2, [r3]
		i /= 10;
 c1043f0:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
 c1043f4:	e59f3028 	ldr	r3, [pc, #40]	; c104424 <uart0int_putnum+0xa8>
 c1043f8:	e0831392 	umull	r1, r3, r2, r3
 c1043fc:	e1a031a3 	lsr	r3, r3, #3
 c104400:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	} while( i );
 c104404:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c104408:	e3530000 	cmp	r3, #0
 c10440c:	1affffe6 	bne	c1043ac <uart0int_putnum+0x30>

    uart0int_puts( p );
 c104410:	e51b0010 	ldr	r0, [fp, #-16]
 c104414:	ebffffc4 	bl	c10432c <uart0int_puts>
}
 c104418:	e24bd00c 	sub	sp, fp, #12
 c10441c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c104420:	e12fff1e 	bx	lr
 c104424:	cccccccd 	.word	0xcccccccd

0c104428 <uart0int_putMenu>:

void uart0int_putMenu( void )
{
 c104428:	e1a0c00d 	mov	ip, sp
 c10442c:	e92dd800 	push	{fp, ip, lr, pc}
 c104430:	e24cb004 	sub	fp, ip, #4
	uart0int_puts( "\n" );
 c104434:	e59f009c 	ldr	r0, [pc, #156]	; c1044d8 <uart0int_putMenu+0xb0>
 c104438:	ebffffbb 	bl	c10432c <uart0int_puts>
	uart0int_puts( "Latidos por minuto: " );
 c10443c:	e59f0098 	ldr	r0, [pc, #152]	; c1044dc <uart0int_putMenu+0xb4>
 c104440:	ebffffb9 	bl	c10432c <uart0int_puts>
	uart0int_putnum( latidosPorMin );
 c104444:	e59f3094 	ldr	r3, [pc, #148]	; c1044e0 <uart0int_putMenu+0xb8>
 c104448:	e5d33000 	ldrb	r3, [r3]
 c10444c:	e20330ff 	and	r3, r3, #255	; 0xff
 c104450:	e1a00003 	mov	r0, r3
 c104454:	ebffffc8 	bl	c10437c <uart0int_putnum>
	uart0int_puts( " / Pasos por minuto: " );
 c104458:	e59f0084 	ldr	r0, [pc, #132]	; c1044e4 <uart0int_putMenu+0xbc>
 c10445c:	ebffffb2 	bl	c10432c <uart0int_puts>
	uart0int_putnum( pasosPorMin );
 c104460:	e59f3080 	ldr	r3, [pc, #128]	; c1044e8 <uart0int_putMenu+0xc0>
 c104464:	e5d33000 	ldrb	r3, [r3]
 c104468:	e20330ff 	and	r3, r3, #255	; 0xff
 c10446c:	e1a00003 	mov	r0, r3
 c104470:	ebffffc1 	bl	c10437c <uart0int_putnum>
	uart0int_putchar( '\n' );
 c104474:	e3a0000a 	mov	r0, #10
 c104478:	ebffff70 	bl	c104240 <uart0int_putchar>
	uart0int_puts( "  1 - Incrementar latidos  (+1) \n" );
 c10447c:	e59f0068 	ldr	r0, [pc, #104]	; c1044ec <uart0int_putMenu+0xc4>
 c104480:	ebffffa9 	bl	c10432c <uart0int_puts>
	uart0int_puts( "  2 - Incrementar latidos (+10) \n" );
 c104484:	e59f0064 	ldr	r0, [pc, #100]	; c1044f0 <uart0int_putMenu+0xc8>
 c104488:	ebffffa7 	bl	c10432c <uart0int_puts>
	uart0int_puts( "  3 - Decrementar latidos  (-1) \n" );
 c10448c:	e59f0060 	ldr	r0, [pc, #96]	; c1044f4 <uart0int_putMenu+0xcc>
 c104490:	ebffffa5 	bl	c10432c <uart0int_puts>
	uart0int_puts( "  4 - Decrementar latidos (-10) \n" );
 c104494:	e59f005c 	ldr	r0, [pc, #92]	; c1044f8 <uart0int_putMenu+0xd0>
 c104498:	ebffffa3 	bl	c10432c <uart0int_puts>
	uart0int_puts( "  d - Detenerse \n" );
 c10449c:	e59f0058 	ldr	r0, [pc, #88]	; c1044fc <uart0int_putMenu+0xd4>
 c1044a0:	ebffffa1 	bl	c10432c <uart0int_puts>
	uart0int_puts( "  a - Comenzar a andar \n" );
 c1044a4:	e59f0054 	ldr	r0, [pc, #84]	; c104500 <uart0int_putMenu+0xd8>
 c1044a8:	ebffff9f 	bl	c10432c <uart0int_puts>
	uart0int_puts( "  5 - Incrementar pasos    (+1) \n" );
 c1044ac:	e59f0050 	ldr	r0, [pc, #80]	; c104504 <uart0int_putMenu+0xdc>
 c1044b0:	ebffff9d 	bl	c10432c <uart0int_puts>
	uart0int_puts( "  6 - Incrementar pasos   (+10) \n" );
 c1044b4:	e59f004c 	ldr	r0, [pc, #76]	; c104508 <uart0int_putMenu+0xe0>
 c1044b8:	ebffff9b 	bl	c10432c <uart0int_puts>
	uart0int_puts( "  7 - Decrementar pasos    (-1) \n" );
 c1044bc:	e59f0048 	ldr	r0, [pc, #72]	; c10450c <uart0int_putMenu+0xe4>
 c1044c0:	ebffff99 	bl	c10432c <uart0int_puts>
	uart0int_puts( "  8 - Decrementar pasos   (-10) \n" );
 c1044c4:	e59f0044 	ldr	r0, [pc, #68]	; c104510 <uart0int_putMenu+0xe8>
 c1044c8:	ebffff97 	bl	c10432c <uart0int_puts>
}
 c1044cc:	e24bd00c 	sub	sp, fp, #12
 c1044d0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1044d4:	e12fff1e 	bx	lr
 c1044d8:	0c10cd78 	.word	0x0c10cd78
 c1044dc:	0c10cd7c 	.word	0x0c10cd7c
 c1044e0:	0c10ef9e 	.word	0x0c10ef9e
 c1044e4:	0c10cd94 	.word	0x0c10cd94
 c1044e8:	0c10ef9f 	.word	0x0c10ef9f
 c1044ec:	0c10cdac 	.word	0x0c10cdac
 c1044f0:	0c10cdd0 	.word	0x0c10cdd0
 c1044f4:	0c10cdf4 	.word	0x0c10cdf4
 c1044f8:	0c10ce18 	.word	0x0c10ce18
 c1044fc:	0c10ce3c 	.word	0x0c10ce3c
 c104500:	0c10ce50 	.word	0x0c10ce50
 c104504:	0c10ce6c 	.word	0x0c10ce6c
 c104508:	0c10ce90 	.word	0x0c10ce90
 c10450c:	0c10ceb4 	.word	0x0c10ceb4
 c104510:	0c10ced8 	.word	0x0c10ced8

0c104514 <uart0int_isrRX>:

void uart0int_isrRX( void )
{
 c104514:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c104518:	e1a0c00d 	mov	ip, sp
 c10451c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c104520:	e24cb004 	sub	fp, ip, #4
    I_ISPC = BIT_URXD0;
 c104524:	e59f37d0 	ldr	r3, [pc, #2000]	; c104cfc <uart0int_isrRX+0x7e8>
 c104528:	e3a02080 	mov	r2, #128	; 0x80
 c10452c:	e5832000 	str	r2, [r3]
	switch( URXH0 )
 c104530:	e59f37c8 	ldr	r3, [pc, #1992]	; c104d00 <uart0int_isrRX+0x7ec>
 c104534:	e5933000 	ldr	r3, [r3]
 c104538:	e243300a 	sub	r3, r3, #10
 c10453c:	e353005a 	cmp	r3, #90	; 0x5a
 c104540:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 c104544:	ea0001e4 	b	c104cdc <uart0int_isrRX+0x7c8>
 c104548:	0c104ce8 	.word	0x0c104ce8
 c10454c:	0c104cdc 	.word	0x0c104cdc
 c104550:	0c104cdc 	.word	0x0c104cdc
 c104554:	0c104cdc 	.word	0x0c104cdc
 c104558:	0c104cdc 	.word	0x0c104cdc
 c10455c:	0c104cdc 	.word	0x0c104cdc
 c104560:	0c104cdc 	.word	0x0c104cdc
 c104564:	0c104cdc 	.word	0x0c104cdc
 c104568:	0c104cdc 	.word	0x0c104cdc
 c10456c:	0c104cdc 	.word	0x0c104cdc
 c104570:	0c104cdc 	.word	0x0c104cdc
 c104574:	0c104cdc 	.word	0x0c104cdc
 c104578:	0c104cdc 	.word	0x0c104cdc
 c10457c:	0c104cdc 	.word	0x0c104cdc
 c104580:	0c104cdc 	.word	0x0c104cdc
 c104584:	0c104cdc 	.word	0x0c104cdc
 c104588:	0c104cdc 	.word	0x0c104cdc
 c10458c:	0c104cdc 	.word	0x0c104cdc
 c104590:	0c104cdc 	.word	0x0c104cdc
 c104594:	0c104cdc 	.word	0x0c104cdc
 c104598:	0c104cdc 	.word	0x0c104cdc
 c10459c:	0c104cdc 	.word	0x0c104cdc
 c1045a0:	0c104cdc 	.word	0x0c104cdc
 c1045a4:	0c104cdc 	.word	0x0c104cdc
 c1045a8:	0c104cdc 	.word	0x0c104cdc
 c1045ac:	0c104cdc 	.word	0x0c104cdc
 c1045b0:	0c104cdc 	.word	0x0c104cdc
 c1045b4:	0c104cdc 	.word	0x0c104cdc
 c1045b8:	0c104cdc 	.word	0x0c104cdc
 c1045bc:	0c104cdc 	.word	0x0c104cdc
 c1045c0:	0c104cdc 	.word	0x0c104cdc
 c1045c4:	0c104cdc 	.word	0x0c104cdc
 c1045c8:	0c104cdc 	.word	0x0c104cdc
 c1045cc:	0c104cdc 	.word	0x0c104cdc
 c1045d0:	0c104cdc 	.word	0x0c104cdc
 c1045d4:	0c104cdc 	.word	0x0c104cdc
 c1045d8:	0c104cdc 	.word	0x0c104cdc
 c1045dc:	0c104cdc 	.word	0x0c104cdc
 c1045e0:	0c104cdc 	.word	0x0c104cdc
 c1045e4:	0c1046b4 	.word	0x0c1046b4
 c1045e8:	0c104750 	.word	0x0c104750
 c1045ec:	0c1047ec 	.word	0x0c1047ec
 c1045f0:	0c104888 	.word	0x0c104888
 c1045f4:	0c104a1c 	.word	0x0c104a1c
 c1045f8:	0c104acc 	.word	0x0c104acc
 c1045fc:	0c104b7c 	.word	0x0c104b7c
 c104600:	0c104c2c 	.word	0x0c104c2c
 c104604:	0c104cdc 	.word	0x0c104cdc
 c104608:	0c104cdc 	.word	0x0c104cdc
 c10460c:	0c104cdc 	.word	0x0c104cdc
 c104610:	0c104cdc 	.word	0x0c104cdc
 c104614:	0c104cdc 	.word	0x0c104cdc
 c104618:	0c104cdc 	.word	0x0c104cdc
 c10461c:	0c104cdc 	.word	0x0c104cdc
 c104620:	0c104cdc 	.word	0x0c104cdc
 c104624:	0c1049a0 	.word	0x0c1049a0
 c104628:	0c104cdc 	.word	0x0c104cdc
 c10462c:	0c104cdc 	.word	0x0c104cdc
 c104630:	0c104924 	.word	0x0c104924
 c104634:	0c104cdc 	.word	0x0c104cdc
 c104638:	0c104cdc 	.word	0x0c104cdc
 c10463c:	0c104cdc 	.word	0x0c104cdc
 c104640:	0c104cdc 	.word	0x0c104cdc
 c104644:	0c104cdc 	.word	0x0c104cdc
 c104648:	0c104cdc 	.word	0x0c104cdc
 c10464c:	0c104cdc 	.word	0x0c104cdc
 c104650:	0c104cdc 	.word	0x0c104cdc
 c104654:	0c104cdc 	.word	0x0c104cdc
 c104658:	0c104cdc 	.word	0x0c104cdc
 c10465c:	0c104cdc 	.word	0x0c104cdc
 c104660:	0c104cdc 	.word	0x0c104cdc
 c104664:	0c104cdc 	.word	0x0c104cdc
 c104668:	0c104cdc 	.word	0x0c104cdc
 c10466c:	0c104cdc 	.word	0x0c104cdc
 c104670:	0c104cdc 	.word	0x0c104cdc
 c104674:	0c104cdc 	.word	0x0c104cdc
 c104678:	0c104cdc 	.word	0x0c104cdc
 c10467c:	0c104cdc 	.word	0x0c104cdc
 c104680:	0c104cdc 	.word	0x0c104cdc
 c104684:	0c104cdc 	.word	0x0c104cdc
 c104688:	0c104cdc 	.word	0x0c104cdc
 c10468c:	0c104cdc 	.word	0x0c104cdc
 c104690:	0c104cdc 	.word	0x0c104cdc
 c104694:	0c104cdc 	.word	0x0c104cdc
 c104698:	0c104cdc 	.word	0x0c104cdc
 c10469c:	0c104cdc 	.word	0x0c104cdc
 c1046a0:	0c104cdc 	.word	0x0c104cdc
 c1046a4:	0c1049a0 	.word	0x0c1049a0
 c1046a8:	0c104cdc 	.word	0x0c104cdc
 c1046ac:	0c104cdc 	.word	0x0c104cdc
 c1046b0:	0c104924 	.word	0x0c104924
	{
		case '1':
			latidosPorMin = ( latidosPorMin < 255 ? latidosPorMin+1 : latidosPorMin );
 c1046b4:	e59f3648 	ldr	r3, [pc, #1608]	; c104d04 <uart0int_isrRX+0x7f0>
 c1046b8:	e5d33000 	ldrb	r3, [r3]
 c1046bc:	e20330ff 	and	r3, r3, #255	; 0xff
 c1046c0:	e35300ff 	cmp	r3, #255	; 0xff
 c1046c4:	0a000005 	beq	c1046e0 <uart0int_isrRX+0x1cc>
 c1046c8:	e59f3634 	ldr	r3, [pc, #1588]	; c104d04 <uart0int_isrRX+0x7f0>
 c1046cc:	e5d33000 	ldrb	r3, [r3]
 c1046d0:	e20330ff 	and	r3, r3, #255	; 0xff
 c1046d4:	e2833001 	add	r3, r3, #1
 c1046d8:	e20330ff 	and	r3, r3, #255	; 0xff
 c1046dc:	ea000002 	b	c1046ec <uart0int_isrRX+0x1d8>
 c1046e0:	e59f361c 	ldr	r3, [pc, #1564]	; c104d04 <uart0int_isrRX+0x7f0>
 c1046e4:	e5d33000 	ldrb	r3, [r3]
 c1046e8:	e20330ff 	and	r3, r3, #255	; 0xff
 c1046ec:	e59f2610 	ldr	r2, [pc, #1552]	; c104d04 <uart0int_isrRX+0x7f0>
 c1046f0:	e5c23000 	strb	r3, [r2]
		    TCNTB3  = cntb[latidosPorMin];                             // Carga T3
 c1046f4:	e59f360c 	ldr	r3, [pc, #1548]	; c104d08 <uart0int_isrRX+0x7f4>
 c1046f8:	e59f2604 	ldr	r2, [pc, #1540]	; c104d04 <uart0int_isrRX+0x7f0>
 c1046fc:	e5d22000 	ldrb	r2, [r2]
 c104700:	e20220ff 	and	r2, r2, #255	; 0xff
 c104704:	e59f1600 	ldr	r1, [pc, #1536]	; c104d0c <uart0int_isrRX+0x7f8>
 c104708:	e1a02082 	lsl	r2, r2, #1
 c10470c:	e0812002 	add	r2, r1, r2
 c104710:	e1d220b0 	ldrh	r2, [r2]
 c104714:	e5832000 	str	r2, [r3]
		    TCON    = (TCON & ~(0xf << 16)) | (1 << 19) | (1 << 17);   // Modo interval, carga TCNT3, stop T3
 c104718:	e59f35f0 	ldr	r3, [pc, #1520]	; c104d10 <uart0int_isrRX+0x7fc>
 c10471c:	e59f25ec 	ldr	r2, [pc, #1516]	; c104d10 <uart0int_isrRX+0x7fc>
 c104720:	e5922000 	ldr	r2, [r2]
 c104724:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c104728:	e382280a 	orr	r2, r2, #655360	; 0xa0000
 c10472c:	e5832000 	str	r2, [r3]
		    TCON    = (TCON & ~(0xf << 16)) | (1 << 19) | (1 << 16);   // Modo interval, no carga TCNT3, start T3
 c104730:	e59f35d8 	ldr	r3, [pc, #1496]	; c104d10 <uart0int_isrRX+0x7fc>
 c104734:	e59f25d4 	ldr	r2, [pc, #1492]	; c104d10 <uart0int_isrRX+0x7fc>
 c104738:	e5922000 	ldr	r2, [r2]
 c10473c:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c104740:	e3822809 	orr	r2, r2, #589824	; 0x90000
 c104744:	e5832000 	str	r2, [r3]
			uart0int_putMenu();
 c104748:	ebffff36 	bl	c104428 <uart0int_putMenu>
			break;
 c10474c:	ea000166 	b	c104cec <uart0int_isrRX+0x7d8>
		case '2':
			latidosPorMin = ( latidosPorMin <= 245 ? latidosPorMin+10 : latidosPorMin );
 c104750:	e59f35ac 	ldr	r3, [pc, #1452]	; c104d04 <uart0int_isrRX+0x7f0>
 c104754:	e5d33000 	ldrb	r3, [r3]
 c104758:	e20330ff 	and	r3, r3, #255	; 0xff
 c10475c:	e35300f5 	cmp	r3, #245	; 0xf5
 c104760:	8a000005 	bhi	c10477c <uart0int_isrRX+0x268>
 c104764:	e59f3598 	ldr	r3, [pc, #1432]	; c104d04 <uart0int_isrRX+0x7f0>
 c104768:	e5d33000 	ldrb	r3, [r3]
 c10476c:	e20330ff 	and	r3, r3, #255	; 0xff
 c104770:	e283300a 	add	r3, r3, #10
 c104774:	e20330ff 	and	r3, r3, #255	; 0xff
 c104778:	ea000002 	b	c104788 <uart0int_isrRX+0x274>
 c10477c:	e59f3580 	ldr	r3, [pc, #1408]	; c104d04 <uart0int_isrRX+0x7f0>
 c104780:	e5d33000 	ldrb	r3, [r3]
 c104784:	e20330ff 	and	r3, r3, #255	; 0xff
 c104788:	e59f2574 	ldr	r2, [pc, #1396]	; c104d04 <uart0int_isrRX+0x7f0>
 c10478c:	e5c23000 	strb	r3, [r2]
		    TCNTB3  = cntb[latidosPorMin];                             // Carga T3
 c104790:	e59f3570 	ldr	r3, [pc, #1392]	; c104d08 <uart0int_isrRX+0x7f4>
 c104794:	e59f2568 	ldr	r2, [pc, #1384]	; c104d04 <uart0int_isrRX+0x7f0>
 c104798:	e5d22000 	ldrb	r2, [r2]
 c10479c:	e20220ff 	and	r2, r2, #255	; 0xff
 c1047a0:	e59f1564 	ldr	r1, [pc, #1380]	; c104d0c <uart0int_isrRX+0x7f8>
 c1047a4:	e1a02082 	lsl	r2, r2, #1
 c1047a8:	e0812002 	add	r2, r1, r2
 c1047ac:	e1d220b0 	ldrh	r2, [r2]
 c1047b0:	e5832000 	str	r2, [r3]
		    TCON    = (TCON & ~(0xf << 16)) | (1 << 19) | (1 << 17);   // Modo interval, carga TCNT3, stop T3
 c1047b4:	e59f3554 	ldr	r3, [pc, #1364]	; c104d10 <uart0int_isrRX+0x7fc>
 c1047b8:	e59f2550 	ldr	r2, [pc, #1360]	; c104d10 <uart0int_isrRX+0x7fc>
 c1047bc:	e5922000 	ldr	r2, [r2]
 c1047c0:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c1047c4:	e382280a 	orr	r2, r2, #655360	; 0xa0000
 c1047c8:	e5832000 	str	r2, [r3]
		    TCON    = (TCON & ~(0xf << 16)) | (1 << 19) | (1 << 16);   // Modo interval, no carga TCNT3, start T3
 c1047cc:	e59f353c 	ldr	r3, [pc, #1340]	; c104d10 <uart0int_isrRX+0x7fc>
 c1047d0:	e59f2538 	ldr	r2, [pc, #1336]	; c104d10 <uart0int_isrRX+0x7fc>
 c1047d4:	e5922000 	ldr	r2, [r2]
 c1047d8:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c1047dc:	e3822809 	orr	r2, r2, #589824	; 0x90000
 c1047e0:	e5832000 	str	r2, [r3]
			uart0int_putMenu();
 c1047e4:	ebffff0f 	bl	c104428 <uart0int_putMenu>
			break;
 c1047e8:	ea00013f 	b	c104cec <uart0int_isrRX+0x7d8>
		case '3':
			latidosPorMin = ( latidosPorMin > 28 ? latidosPorMin-1 : latidosPorMin );
 c1047ec:	e59f3510 	ldr	r3, [pc, #1296]	; c104d04 <uart0int_isrRX+0x7f0>
 c1047f0:	e5d33000 	ldrb	r3, [r3]
 c1047f4:	e20330ff 	and	r3, r3, #255	; 0xff
 c1047f8:	e353001c 	cmp	r3, #28
 c1047fc:	9a000005 	bls	c104818 <uart0int_isrRX+0x304>
 c104800:	e59f34fc 	ldr	r3, [pc, #1276]	; c104d04 <uart0int_isrRX+0x7f0>
 c104804:	e5d33000 	ldrb	r3, [r3]
 c104808:	e20330ff 	and	r3, r3, #255	; 0xff
 c10480c:	e2433001 	sub	r3, r3, #1
 c104810:	e20330ff 	and	r3, r3, #255	; 0xff
 c104814:	ea000002 	b	c104824 <uart0int_isrRX+0x310>
 c104818:	e59f34e4 	ldr	r3, [pc, #1252]	; c104d04 <uart0int_isrRX+0x7f0>
 c10481c:	e5d33000 	ldrb	r3, [r3]
 c104820:	e20330ff 	and	r3, r3, #255	; 0xff
 c104824:	e59f24d8 	ldr	r2, [pc, #1240]	; c104d04 <uart0int_isrRX+0x7f0>
 c104828:	e5c23000 	strb	r3, [r2]
		    TCNTB3  = cntb[latidosPorMin];                             // Carga T3
 c10482c:	e59f34d4 	ldr	r3, [pc, #1236]	; c104d08 <uart0int_isrRX+0x7f4>
 c104830:	e59f24cc 	ldr	r2, [pc, #1228]	; c104d04 <uart0int_isrRX+0x7f0>
 c104834:	e5d22000 	ldrb	r2, [r2]
 c104838:	e20220ff 	and	r2, r2, #255	; 0xff
 c10483c:	e59f14c8 	ldr	r1, [pc, #1224]	; c104d0c <uart0int_isrRX+0x7f8>
 c104840:	e1a02082 	lsl	r2, r2, #1
 c104844:	e0812002 	add	r2, r1, r2
 c104848:	e1d220b0 	ldrh	r2, [r2]
 c10484c:	e5832000 	str	r2, [r3]
		    TCON    = (TCON & ~(0xf << 16)) | (1 << 19) | (1 << 17);   // Modo interval, carga TCNT3, stop T3
 c104850:	e59f34b8 	ldr	r3, [pc, #1208]	; c104d10 <uart0int_isrRX+0x7fc>
 c104854:	e59f24b4 	ldr	r2, [pc, #1204]	; c104d10 <uart0int_isrRX+0x7fc>
 c104858:	e5922000 	ldr	r2, [r2]
 c10485c:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c104860:	e382280a 	orr	r2, r2, #655360	; 0xa0000
 c104864:	e5832000 	str	r2, [r3]
		    TCON    = (TCON & ~(0xf << 16)) | (1 << 19) | (1 << 16);   // Modo interval, no carga TCNT3, start T3
 c104868:	e59f34a0 	ldr	r3, [pc, #1184]	; c104d10 <uart0int_isrRX+0x7fc>
 c10486c:	e59f249c 	ldr	r2, [pc, #1180]	; c104d10 <uart0int_isrRX+0x7fc>
 c104870:	e5922000 	ldr	r2, [r2]
 c104874:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c104878:	e3822809 	orr	r2, r2, #589824	; 0x90000
 c10487c:	e5832000 	str	r2, [r3]
		    uart0int_putMenu();
 c104880:	ebfffee8 	bl	c104428 <uart0int_putMenu>
			break;
 c104884:	ea000118 	b	c104cec <uart0int_isrRX+0x7d8>
		case '4':
			latidosPorMin = ( latidosPorMin >= 38 ? latidosPorMin-10 : latidosPorMin );
 c104888:	e59f3474 	ldr	r3, [pc, #1140]	; c104d04 <uart0int_isrRX+0x7f0>
 c10488c:	e5d33000 	ldrb	r3, [r3]
 c104890:	e20330ff 	and	r3, r3, #255	; 0xff
 c104894:	e3530025 	cmp	r3, #37	; 0x25
 c104898:	9a000005 	bls	c1048b4 <uart0int_isrRX+0x3a0>
 c10489c:	e59f3460 	ldr	r3, [pc, #1120]	; c104d04 <uart0int_isrRX+0x7f0>
 c1048a0:	e5d33000 	ldrb	r3, [r3]
 c1048a4:	e20330ff 	and	r3, r3, #255	; 0xff
 c1048a8:	e243300a 	sub	r3, r3, #10
 c1048ac:	e20330ff 	and	r3, r3, #255	; 0xff
 c1048b0:	ea000002 	b	c1048c0 <uart0int_isrRX+0x3ac>
 c1048b4:	e59f3448 	ldr	r3, [pc, #1096]	; c104d04 <uart0int_isrRX+0x7f0>
 c1048b8:	e5d33000 	ldrb	r3, [r3]
 c1048bc:	e20330ff 	and	r3, r3, #255	; 0xff
 c1048c0:	e59f243c 	ldr	r2, [pc, #1084]	; c104d04 <uart0int_isrRX+0x7f0>
 c1048c4:	e5c23000 	strb	r3, [r2]
		    TCNTB3  = cntb[latidosPorMin];                             // Carga T3
 c1048c8:	e59f3438 	ldr	r3, [pc, #1080]	; c104d08 <uart0int_isrRX+0x7f4>
 c1048cc:	e59f2430 	ldr	r2, [pc, #1072]	; c104d04 <uart0int_isrRX+0x7f0>
 c1048d0:	e5d22000 	ldrb	r2, [r2]
 c1048d4:	e20220ff 	and	r2, r2, #255	; 0xff
 c1048d8:	e59f142c 	ldr	r1, [pc, #1068]	; c104d0c <uart0int_isrRX+0x7f8>
 c1048dc:	e1a02082 	lsl	r2, r2, #1
 c1048e0:	e0812002 	add	r2, r1, r2
 c1048e4:	e1d220b0 	ldrh	r2, [r2]
 c1048e8:	e5832000 	str	r2, [r3]
		    TCON    = (TCON & ~(0xf << 16)) | (1 << 19) | (1 << 17);   // Modo interval, carga TCNT3, stop T3
 c1048ec:	e59f341c 	ldr	r3, [pc, #1052]	; c104d10 <uart0int_isrRX+0x7fc>
 c1048f0:	e59f2418 	ldr	r2, [pc, #1048]	; c104d10 <uart0int_isrRX+0x7fc>
 c1048f4:	e5922000 	ldr	r2, [r2]
 c1048f8:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c1048fc:	e382280a 	orr	r2, r2, #655360	; 0xa0000
 c104900:	e5832000 	str	r2, [r3]
		    TCON    = (TCON & ~(0xf << 16)) | (1 << 19) | (1 << 16);   // Modo interval, no carga TCNT3, start T3
 c104904:	e59f3404 	ldr	r3, [pc, #1028]	; c104d10 <uart0int_isrRX+0x7fc>
 c104908:	e59f2400 	ldr	r2, [pc, #1024]	; c104d10 <uart0int_isrRX+0x7fc>
 c10490c:	e5922000 	ldr	r2, [r2]
 c104910:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c104914:	e3822809 	orr	r2, r2, #589824	; 0x90000
 c104918:	e5832000 	str	r2, [r3]
			uart0int_putMenu();
 c10491c:	ebfffec1 	bl	c104428 <uart0int_putMenu>
			break;
 c104920:	ea0000f1 	b	c104cec <uart0int_isrRX+0x7d8>
		case 'd':
		case 'D':
			pasosPorMin = 0;
 c104924:	e59f33e8 	ldr	r3, [pc, #1000]	; c104d14 <uart0int_isrRX+0x800>
 c104928:	e3a02000 	mov	r2, #0
 c10492c:	e5c32000 	strb	r2, [r3]
		    TCNTB2  = cntb[pasosPorMin];                               // Carga T2
 c104930:	e59f33e0 	ldr	r3, [pc, #992]	; c104d18 <uart0int_isrRX+0x804>
 c104934:	e59f23d8 	ldr	r2, [pc, #984]	; c104d14 <uart0int_isrRX+0x800>
 c104938:	e5d22000 	ldrb	r2, [r2]
 c10493c:	e20220ff 	and	r2, r2, #255	; 0xff
 c104940:	e59f13c4 	ldr	r1, [pc, #964]	; c104d0c <uart0int_isrRX+0x7f8>
 c104944:	e1a02082 	lsl	r2, r2, #1
 c104948:	e0812002 	add	r2, r1, r2
 c10494c:	e1d220b0 	ldrh	r2, [r2]
 c104950:	e5832000 	str	r2, [r3]
		    TCON    = (TCON & ~(0xf << 12)) | (1 << 15) | (1 << 13);   // Modo interval, carga TCNT2, stop T2
 c104954:	e59f33b4 	ldr	r3, [pc, #948]	; c104d10 <uart0int_isrRX+0x7fc>
 c104958:	e59f23b0 	ldr	r2, [pc, #944]	; c104d10 <uart0int_isrRX+0x7fc>
 c10495c:	e5922000 	ldr	r2, [r2]
 c104960:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c104964:	e3822a0a 	orr	r2, r2, #40960	; 0xa000
 c104968:	e5832000 	str	r2, [r3]
		    TCON    = (TCON & ~(0xf << 12)) | (1 << 15) | (1 << 12);   // Modo interval, no carga TCNT2, start T2
 c10496c:	e59f339c 	ldr	r3, [pc, #924]	; c104d10 <uart0int_isrRX+0x7fc>
 c104970:	e59f2398 	ldr	r2, [pc, #920]	; c104d10 <uart0int_isrRX+0x7fc>
 c104974:	e5922000 	ldr	r2, [r2]
 c104978:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c10497c:	e3822a09 	orr	r2, r2, #36864	; 0x9000
 c104980:	e5832000 	str	r2, [r3]
			INTMSK |= BIT_TIMER2;
 c104984:	e59f3390 	ldr	r3, [pc, #912]	; c104d1c <uart0int_isrRX+0x808>
 c104988:	e59f238c 	ldr	r2, [pc, #908]	; c104d1c <uart0int_isrRX+0x808>
 c10498c:	e5922000 	ldr	r2, [r2]
 c104990:	e3822b02 	orr	r2, r2, #2048	; 0x800
 c104994:	e5832000 	str	r2, [r3]
		    uart0int_putMenu();
 c104998:	ebfffea2 	bl	c104428 <uart0int_putMenu>
			break;
 c10499c:	ea0000d2 	b	c104cec <uart0int_isrRX+0x7d8>
		case 'a':
		case 'A':
			pasosPorMin = 10;
 c1049a0:	e59f336c 	ldr	r3, [pc, #876]	; c104d14 <uart0int_isrRX+0x800>
 c1049a4:	e3a0200a 	mov	r2, #10
 c1049a8:	e5c32000 	strb	r2, [r3]
		    TCNTB2  = cntb[pasosPorMin];                               // Carga T2
 c1049ac:	e59f3364 	ldr	r3, [pc, #868]	; c104d18 <uart0int_isrRX+0x804>
 c1049b0:	e59f235c 	ldr	r2, [pc, #860]	; c104d14 <uart0int_isrRX+0x800>
 c1049b4:	e5d22000 	ldrb	r2, [r2]
 c1049b8:	e20220ff 	and	r2, r2, #255	; 0xff
 c1049bc:	e59f1348 	ldr	r1, [pc, #840]	; c104d0c <uart0int_isrRX+0x7f8>
 c1049c0:	e1a02082 	lsl	r2, r2, #1
 c1049c4:	e0812002 	add	r2, r1, r2
 c1049c8:	e1d220b0 	ldrh	r2, [r2]
 c1049cc:	e5832000 	str	r2, [r3]
		    TCON    = (TCON & ~(0xf << 12)) | (1 << 15) | (1 << 13);   // Modo interval, carga TCNT2, stop T2
 c1049d0:	e59f3338 	ldr	r3, [pc, #824]	; c104d10 <uart0int_isrRX+0x7fc>
 c1049d4:	e59f2334 	ldr	r2, [pc, #820]	; c104d10 <uart0int_isrRX+0x7fc>
 c1049d8:	e5922000 	ldr	r2, [r2]
 c1049dc:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c1049e0:	e3822a0a 	orr	r2, r2, #40960	; 0xa000
 c1049e4:	e5832000 	str	r2, [r3]
		    TCON    = (TCON & ~(0xf << 12)) | (1 << 15) | (1 << 12);   // Modo interval, no carga TCNT2, start T2
 c1049e8:	e59f3320 	ldr	r3, [pc, #800]	; c104d10 <uart0int_isrRX+0x7fc>
 c1049ec:	e59f231c 	ldr	r2, [pc, #796]	; c104d10 <uart0int_isrRX+0x7fc>
 c1049f0:	e5922000 	ldr	r2, [r2]
 c1049f4:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c1049f8:	e3822a09 	orr	r2, r2, #36864	; 0x9000
 c1049fc:	e5832000 	str	r2, [r3]
		    INTMSK &= ~BIT_TIMER2;
 c104a00:	e59f3314 	ldr	r3, [pc, #788]	; c104d1c <uart0int_isrRX+0x808>
 c104a04:	e59f2310 	ldr	r2, [pc, #784]	; c104d1c <uart0int_isrRX+0x808>
 c104a08:	e5922000 	ldr	r2, [r2]
 c104a0c:	e3c22b02 	bic	r2, r2, #2048	; 0x800
 c104a10:	e5832000 	str	r2, [r3]
			uart0int_putMenu();
 c104a14:	ebfffe83 	bl	c104428 <uart0int_putMenu>
			break;
 c104a18:	ea0000b3 	b	c104cec <uart0int_isrRX+0x7d8>
		case '5':
			pasosPorMin = ( pasosPorMin != 0 && pasosPorMin < 200 ? pasosPorMin+1 : pasosPorMin );
 c104a1c:	e59f32f0 	ldr	r3, [pc, #752]	; c104d14 <uart0int_isrRX+0x800>
 c104a20:	e5d33000 	ldrb	r3, [r3]
 c104a24:	e20330ff 	and	r3, r3, #255	; 0xff
 c104a28:	e3530000 	cmp	r3, #0
 c104a2c:	0a00000a 	beq	c104a5c <uart0int_isrRX+0x548>
 c104a30:	e59f32dc 	ldr	r3, [pc, #732]	; c104d14 <uart0int_isrRX+0x800>
 c104a34:	e5d33000 	ldrb	r3, [r3]
 c104a38:	e20330ff 	and	r3, r3, #255	; 0xff
 c104a3c:	e35300c7 	cmp	r3, #199	; 0xc7
 c104a40:	8a000005 	bhi	c104a5c <uart0int_isrRX+0x548>
 c104a44:	e59f32c8 	ldr	r3, [pc, #712]	; c104d14 <uart0int_isrRX+0x800>
 c104a48:	e5d33000 	ldrb	r3, [r3]
 c104a4c:	e20330ff 	and	r3, r3, #255	; 0xff
 c104a50:	e2833001 	add	r3, r3, #1
 c104a54:	e20330ff 	and	r3, r3, #255	; 0xff
 c104a58:	ea000002 	b	c104a68 <uart0int_isrRX+0x554>
 c104a5c:	e59f32b0 	ldr	r3, [pc, #688]	; c104d14 <uart0int_isrRX+0x800>
 c104a60:	e5d33000 	ldrb	r3, [r3]
 c104a64:	e20330ff 	and	r3, r3, #255	; 0xff
 c104a68:	e59f22a4 	ldr	r2, [pc, #676]	; c104d14 <uart0int_isrRX+0x800>
 c104a6c:	e5c23000 	strb	r3, [r2]
		    TCNTB2  = cntb[pasosPorMin];                               // Carga T2
 c104a70:	e59f32a0 	ldr	r3, [pc, #672]	; c104d18 <uart0int_isrRX+0x804>
 c104a74:	e59f2298 	ldr	r2, [pc, #664]	; c104d14 <uart0int_isrRX+0x800>
 c104a78:	e5d22000 	ldrb	r2, [r2]
 c104a7c:	e20220ff 	and	r2, r2, #255	; 0xff
 c104a80:	e59f1284 	ldr	r1, [pc, #644]	; c104d0c <uart0int_isrRX+0x7f8>
 c104a84:	e1a02082 	lsl	r2, r2, #1
 c104a88:	e0812002 	add	r2, r1, r2
 c104a8c:	e1d220b0 	ldrh	r2, [r2]
 c104a90:	e5832000 	str	r2, [r3]
		    TCON    = (TCON & ~(0xf << 12)) | (1 << 15) | (1 << 13);   // Modo interval, carga TCNT2, stop T2
 c104a94:	e59f3274 	ldr	r3, [pc, #628]	; c104d10 <uart0int_isrRX+0x7fc>
 c104a98:	e59f2270 	ldr	r2, [pc, #624]	; c104d10 <uart0int_isrRX+0x7fc>
 c104a9c:	e5922000 	ldr	r2, [r2]
 c104aa0:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c104aa4:	e3822a0a 	orr	r2, r2, #40960	; 0xa000
 c104aa8:	e5832000 	str	r2, [r3]
		    TCON    = (TCON & ~(0xf << 12)) | (1 << 15) | (1 << 12);   // Modo interval, no carga TCNT2, start T2
 c104aac:	e59f325c 	ldr	r3, [pc, #604]	; c104d10 <uart0int_isrRX+0x7fc>
 c104ab0:	e59f2258 	ldr	r2, [pc, #600]	; c104d10 <uart0int_isrRX+0x7fc>
 c104ab4:	e5922000 	ldr	r2, [r2]
 c104ab8:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c104abc:	e3822a09 	orr	r2, r2, #36864	; 0x9000
 c104ac0:	e5832000 	str	r2, [r3]
			uart0int_putMenu();
 c104ac4:	ebfffe57 	bl	c104428 <uart0int_putMenu>
			break;
 c104ac8:	ea000087 	b	c104cec <uart0int_isrRX+0x7d8>
		case '6':
			pasosPorMin = ( pasosPorMin != 0 && pasosPorMin <= 190 ? pasosPorMin+10 : pasosPorMin );
 c104acc:	e59f3240 	ldr	r3, [pc, #576]	; c104d14 <uart0int_isrRX+0x800>
 c104ad0:	e5d33000 	ldrb	r3, [r3]
 c104ad4:	e20330ff 	and	r3, r3, #255	; 0xff
 c104ad8:	e3530000 	cmp	r3, #0
 c104adc:	0a00000a 	beq	c104b0c <uart0int_isrRX+0x5f8>
 c104ae0:	e59f322c 	ldr	r3, [pc, #556]	; c104d14 <uart0int_isrRX+0x800>
 c104ae4:	e5d33000 	ldrb	r3, [r3]
 c104ae8:	e20330ff 	and	r3, r3, #255	; 0xff
 c104aec:	e35300be 	cmp	r3, #190	; 0xbe
 c104af0:	8a000005 	bhi	c104b0c <uart0int_isrRX+0x5f8>
 c104af4:	e59f3218 	ldr	r3, [pc, #536]	; c104d14 <uart0int_isrRX+0x800>
 c104af8:	e5d33000 	ldrb	r3, [r3]
 c104afc:	e20330ff 	and	r3, r3, #255	; 0xff
 c104b00:	e283300a 	add	r3, r3, #10
 c104b04:	e20330ff 	and	r3, r3, #255	; 0xff
 c104b08:	ea000002 	b	c104b18 <uart0int_isrRX+0x604>
 c104b0c:	e59f3200 	ldr	r3, [pc, #512]	; c104d14 <uart0int_isrRX+0x800>
 c104b10:	e5d33000 	ldrb	r3, [r3]
 c104b14:	e20330ff 	and	r3, r3, #255	; 0xff
 c104b18:	e59f21f4 	ldr	r2, [pc, #500]	; c104d14 <uart0int_isrRX+0x800>
 c104b1c:	e5c23000 	strb	r3, [r2]
		    TCNTB2  = cntb[pasosPorMin];                               // Carga T2
 c104b20:	e59f31f0 	ldr	r3, [pc, #496]	; c104d18 <uart0int_isrRX+0x804>
 c104b24:	e59f21e8 	ldr	r2, [pc, #488]	; c104d14 <uart0int_isrRX+0x800>
 c104b28:	e5d22000 	ldrb	r2, [r2]
 c104b2c:	e20220ff 	and	r2, r2, #255	; 0xff
 c104b30:	e59f11d4 	ldr	r1, [pc, #468]	; c104d0c <uart0int_isrRX+0x7f8>
 c104b34:	e1a02082 	lsl	r2, r2, #1
 c104b38:	e0812002 	add	r2, r1, r2
 c104b3c:	e1d220b0 	ldrh	r2, [r2]
 c104b40:	e5832000 	str	r2, [r3]
		    TCON    = (TCON & ~(0xf << 12)) | (1 << 15) | (1 << 13);   // Modo interval, carga TCNT2, stop T2
 c104b44:	e59f31c4 	ldr	r3, [pc, #452]	; c104d10 <uart0int_isrRX+0x7fc>
 c104b48:	e59f21c0 	ldr	r2, [pc, #448]	; c104d10 <uart0int_isrRX+0x7fc>
 c104b4c:	e5922000 	ldr	r2, [r2]
 c104b50:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c104b54:	e3822a0a 	orr	r2, r2, #40960	; 0xa000
 c104b58:	e5832000 	str	r2, [r3]
		    TCON    = (TCON & ~(0xf << 12)) | (1 << 15) | (1 << 12);   // Modo interval, no carga TCNT2, start T2
 c104b5c:	e59f31ac 	ldr	r3, [pc, #428]	; c104d10 <uart0int_isrRX+0x7fc>
 c104b60:	e59f21a8 	ldr	r2, [pc, #424]	; c104d10 <uart0int_isrRX+0x7fc>
 c104b64:	e5922000 	ldr	r2, [r2]
 c104b68:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c104b6c:	e3822a09 	orr	r2, r2, #36864	; 0x9000
 c104b70:	e5832000 	str	r2, [r3]
		    uart0int_putMenu();
 c104b74:	ebfffe2b 	bl	c104428 <uart0int_putMenu>
			break;
 c104b78:	ea00005b 	b	c104cec <uart0int_isrRX+0x7d8>
		case '7':
			pasosPorMin = ( pasosPorMin != 0 && pasosPorMin > 10 ? pasosPorMin-1 : pasosPorMin );
 c104b7c:	e59f3190 	ldr	r3, [pc, #400]	; c104d14 <uart0int_isrRX+0x800>
 c104b80:	e5d33000 	ldrb	r3, [r3]
 c104b84:	e20330ff 	and	r3, r3, #255	; 0xff
 c104b88:	e3530000 	cmp	r3, #0
 c104b8c:	0a00000a 	beq	c104bbc <uart0int_isrRX+0x6a8>
 c104b90:	e59f317c 	ldr	r3, [pc, #380]	; c104d14 <uart0int_isrRX+0x800>
 c104b94:	e5d33000 	ldrb	r3, [r3]
 c104b98:	e20330ff 	and	r3, r3, #255	; 0xff
 c104b9c:	e353000a 	cmp	r3, #10
 c104ba0:	9a000005 	bls	c104bbc <uart0int_isrRX+0x6a8>
 c104ba4:	e59f3168 	ldr	r3, [pc, #360]	; c104d14 <uart0int_isrRX+0x800>
 c104ba8:	e5d33000 	ldrb	r3, [r3]
 c104bac:	e20330ff 	and	r3, r3, #255	; 0xff
 c104bb0:	e2433001 	sub	r3, r3, #1
 c104bb4:	e20330ff 	and	r3, r3, #255	; 0xff
 c104bb8:	ea000002 	b	c104bc8 <uart0int_isrRX+0x6b4>
 c104bbc:	e59f3150 	ldr	r3, [pc, #336]	; c104d14 <uart0int_isrRX+0x800>
 c104bc0:	e5d33000 	ldrb	r3, [r3]
 c104bc4:	e20330ff 	and	r3, r3, #255	; 0xff
 c104bc8:	e59f2144 	ldr	r2, [pc, #324]	; c104d14 <uart0int_isrRX+0x800>
 c104bcc:	e5c23000 	strb	r3, [r2]
		    TCNTB2  = cntb[pasosPorMin];                               // Carga T2
 c104bd0:	e59f3140 	ldr	r3, [pc, #320]	; c104d18 <uart0int_isrRX+0x804>
 c104bd4:	e59f2138 	ldr	r2, [pc, #312]	; c104d14 <uart0int_isrRX+0x800>
 c104bd8:	e5d22000 	ldrb	r2, [r2]
 c104bdc:	e20220ff 	and	r2, r2, #255	; 0xff
 c104be0:	e59f1124 	ldr	r1, [pc, #292]	; c104d0c <uart0int_isrRX+0x7f8>
 c104be4:	e1a02082 	lsl	r2, r2, #1
 c104be8:	e0812002 	add	r2, r1, r2
 c104bec:	e1d220b0 	ldrh	r2, [r2]
 c104bf0:	e5832000 	str	r2, [r3]
		    TCON    = (TCON & ~(0xf << 12)) | (1 << 15) | (1 << 13);   // Modo interval, carga TCNT2, stop T2
 c104bf4:	e59f3114 	ldr	r3, [pc, #276]	; c104d10 <uart0int_isrRX+0x7fc>
 c104bf8:	e59f2110 	ldr	r2, [pc, #272]	; c104d10 <uart0int_isrRX+0x7fc>
 c104bfc:	e5922000 	ldr	r2, [r2]
 c104c00:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c104c04:	e3822a0a 	orr	r2, r2, #40960	; 0xa000
 c104c08:	e5832000 	str	r2, [r3]
		    TCON    = (TCON & ~(0xf << 12)) | (1 << 15) | (1 << 12);   // Modo interval, no carga TCNT2, start T2
 c104c0c:	e59f30fc 	ldr	r3, [pc, #252]	; c104d10 <uart0int_isrRX+0x7fc>
 c104c10:	e59f20f8 	ldr	r2, [pc, #248]	; c104d10 <uart0int_isrRX+0x7fc>
 c104c14:	e5922000 	ldr	r2, [r2]
 c104c18:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c104c1c:	e3822a09 	orr	r2, r2, #36864	; 0x9000
 c104c20:	e5832000 	str	r2, [r3]
			uart0int_putMenu();
 c104c24:	ebfffdff 	bl	c104428 <uart0int_putMenu>
			break;
 c104c28:	ea00002f 	b	c104cec <uart0int_isrRX+0x7d8>
		case '8':
			pasosPorMin = ( pasosPorMin != 0 && pasosPorMin >= 20 ? pasosPorMin-10 : pasosPorMin );
 c104c2c:	e59f30e0 	ldr	r3, [pc, #224]	; c104d14 <uart0int_isrRX+0x800>
 c104c30:	e5d33000 	ldrb	r3, [r3]
 c104c34:	e20330ff 	and	r3, r3, #255	; 0xff
 c104c38:	e3530000 	cmp	r3, #0
 c104c3c:	0a00000a 	beq	c104c6c <uart0int_isrRX+0x758>
 c104c40:	e59f30cc 	ldr	r3, [pc, #204]	; c104d14 <uart0int_isrRX+0x800>
 c104c44:	e5d33000 	ldrb	r3, [r3]
 c104c48:	e20330ff 	and	r3, r3, #255	; 0xff
 c104c4c:	e3530013 	cmp	r3, #19
 c104c50:	9a000005 	bls	c104c6c <uart0int_isrRX+0x758>
 c104c54:	e59f30b8 	ldr	r3, [pc, #184]	; c104d14 <uart0int_isrRX+0x800>
 c104c58:	e5d33000 	ldrb	r3, [r3]
 c104c5c:	e20330ff 	and	r3, r3, #255	; 0xff
 c104c60:	e243300a 	sub	r3, r3, #10
 c104c64:	e20330ff 	and	r3, r3, #255	; 0xff
 c104c68:	ea000002 	b	c104c78 <uart0int_isrRX+0x764>
 c104c6c:	e59f30a0 	ldr	r3, [pc, #160]	; c104d14 <uart0int_isrRX+0x800>
 c104c70:	e5d33000 	ldrb	r3, [r3]
 c104c74:	e20330ff 	and	r3, r3, #255	; 0xff
 c104c78:	e59f2094 	ldr	r2, [pc, #148]	; c104d14 <uart0int_isrRX+0x800>
 c104c7c:	e5c23000 	strb	r3, [r2]
		    TCNTB2  = cntb[pasosPorMin];                               // Carga T2
 c104c80:	e59f3090 	ldr	r3, [pc, #144]	; c104d18 <uart0int_isrRX+0x804>
 c104c84:	e59f2088 	ldr	r2, [pc, #136]	; c104d14 <uart0int_isrRX+0x800>
 c104c88:	e5d22000 	ldrb	r2, [r2]
 c104c8c:	e20220ff 	and	r2, r2, #255	; 0xff
 c104c90:	e59f1074 	ldr	r1, [pc, #116]	; c104d0c <uart0int_isrRX+0x7f8>
 c104c94:	e1a02082 	lsl	r2, r2, #1
 c104c98:	e0812002 	add	r2, r1, r2
 c104c9c:	e1d220b0 	ldrh	r2, [r2]
 c104ca0:	e5832000 	str	r2, [r3]
		    TCON    = (TCON & ~(0xf << 12)) | (1 << 15) | (1 << 13);   // Modo interval, carga TCNT2, stop T2
 c104ca4:	e59f3064 	ldr	r3, [pc, #100]	; c104d10 <uart0int_isrRX+0x7fc>
 c104ca8:	e59f2060 	ldr	r2, [pc, #96]	; c104d10 <uart0int_isrRX+0x7fc>
 c104cac:	e5922000 	ldr	r2, [r2]
 c104cb0:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c104cb4:	e3822a0a 	orr	r2, r2, #40960	; 0xa000
 c104cb8:	e5832000 	str	r2, [r3]
		    TCON    = (TCON & ~(0xf << 12)) | (1 << 15) | (1 << 12);   // Modo interval, no carga TCNT2, start T2
 c104cbc:	e59f304c 	ldr	r3, [pc, #76]	; c104d10 <uart0int_isrRX+0x7fc>
 c104cc0:	e59f2048 	ldr	r2, [pc, #72]	; c104d10 <uart0int_isrRX+0x7fc>
 c104cc4:	e5922000 	ldr	r2, [r2]
 c104cc8:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c104ccc:	e3822a09 	orr	r2, r2, #36864	; 0x9000
 c104cd0:	e5832000 	str	r2, [r3]
			uart0int_putMenu();
 c104cd4:	ebfffdd3 	bl	c104428 <uart0int_putMenu>
			break;
 c104cd8:	ea000003 	b	c104cec <uart0int_isrRX+0x7d8>
	    case '\n':
			break;
		default:
			uart0int_putMenu();
 c104cdc:	ebfffdd1 	bl	c104428 <uart0int_putMenu>
			break;
 c104ce0:	e1a00000 	nop			; (mov r0, r0)
 c104ce4:	ea000000 	b	c104cec <uart0int_isrRX+0x7d8>
		    TCON    = (TCON & ~(0xf << 12)) | (1 << 15) | (1 << 13);   // Modo interval, carga TCNT2, stop T2
		    TCON    = (TCON & ~(0xf << 12)) | (1 << 15) | (1 << 12);   // Modo interval, no carga TCNT2, start T2
			uart0int_putMenu();
			break;
	    case '\n':
			break;
 c104ce8:	e1a00000 	nop			; (mov r0, r0)
		default:
			uart0int_putMenu();
			break;
	}

}
 c104cec:	e24bd01c 	sub	sp, fp, #28
 c104cf0:	e89d680f 	ldm	sp, {r0, r1, r2, r3, fp, sp, lr}
 c104cf4:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c104cf8:	e25ef004 	subs	pc, lr, #4
 c104cfc:	01e00024 	.word	0x01e00024
 c104d00:	01d00024 	.word	0x01d00024
 c104d04:	0c10ef9e 	.word	0x0c10ef9e
 c104d08:	01d50030 	.word	0x01d50030
 c104d0c:	0c10cae0 	.word	0x0c10cae0
 c104d10:	01d50008 	.word	0x01d50008
 c104d14:	0c10ef9f 	.word	0x0c10ef9f
 c104d18:	01d50024 	.word	0x01d50024
 c104d1c:	01e0000c 	.word	0x01e0000c

0c104d20 <fifo_init>:

/*******************************************************************/

void fifo_init( fifo_t *pfifo )
{
 c104d20:	e1a0c00d 	mov	ip, sp
 c104d24:	e92dd800 	push	{fp, ip, lr, pc}
 c104d28:	e24cb004 	sub	fp, ip, #4
 c104d2c:	e24dd008 	sub	sp, sp, #8
 c104d30:	e50b0010 	str	r0, [fp, #-16]
	pfifo->head = 0;
 c104d34:	e51b3010 	ldr	r3, [fp, #-16]
 c104d38:	e3a02000 	mov	r2, #0
 c104d3c:	e1c320b0 	strh	r2, [r3]
	pfifo->tail = 0;
 c104d40:	e51b3010 	ldr	r3, [fp, #-16]
 c104d44:	e3a02000 	mov	r2, #0
 c104d48:	e1c320b2 	strh	r2, [r3, #2]
	pfifo->size = 0;
 c104d4c:	e51b3010 	ldr	r3, [fp, #-16]
 c104d50:	e3a02000 	mov	r2, #0
 c104d54:	e1c320b4 	strh	r2, [r3, #4]
}
 c104d58:	e24bd00c 	sub	sp, fp, #12
 c104d5c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c104d60:	e12fff1e 	bx	lr

0c104d64 <fifo_enqueue>:

void fifo_enqueue( fifo_t *pfifo, uint8 data )
{
 c104d64:	e1a0c00d 	mov	ip, sp
 c104d68:	e92dd800 	push	{fp, ip, lr, pc}
 c104d6c:	e24cb004 	sub	fp, ip, #4
 c104d70:	e24dd008 	sub	sp, sp, #8
 c104d74:	e50b0010 	str	r0, [fp, #-16]
 c104d78:	e1a03001 	mov	r3, r1
 c104d7c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	pfifo->buffer[pfifo->tail++] = data;
 c104d80:	e51b3010 	ldr	r3, [fp, #-16]
 c104d84:	e1d330b2 	ldrh	r3, [r3, #2]
 c104d88:	e1a03803 	lsl	r3, r3, #16
 c104d8c:	e1a03823 	lsr	r3, r3, #16
 c104d90:	e1a01003 	mov	r1, r3
 c104d94:	e51b0010 	ldr	r0, [fp, #-16]
 c104d98:	e3a02006 	mov	r2, #6
 c104d9c:	e0801001 	add	r1, r0, r1
 c104da0:	e0812002 	add	r2, r1, r2
 c104da4:	e55b1011 	ldrb	r1, [fp, #-17]	; 0xffffffef
 c104da8:	e5c21000 	strb	r1, [r2]
 c104dac:	e2833001 	add	r3, r3, #1
 c104db0:	e1a03803 	lsl	r3, r3, #16
 c104db4:	e1a02823 	lsr	r2, r3, #16
 c104db8:	e51b3010 	ldr	r3, [fp, #-16]
 c104dbc:	e1c320b2 	strh	r2, [r3, #2]
	if( pfifo->tail == FIFO_SIZE )
 c104dc0:	e51b3010 	ldr	r3, [fp, #-16]
 c104dc4:	e1d330b2 	ldrh	r3, [r3, #2]
 c104dc8:	e1a03803 	lsl	r3, r3, #16
 c104dcc:	e1a03823 	lsr	r3, r3, #16
 c104dd0:	e3530b01 	cmp	r3, #1024	; 0x400
 c104dd4:	1a000002 	bne	c104de4 <fifo_enqueue+0x80>
		pfifo->tail = 0;
 c104dd8:	e51b3010 	ldr	r3, [fp, #-16]
 c104ddc:	e3a02000 	mov	r2, #0
 c104de0:	e1c320b2 	strh	r2, [r3, #2]
	INT_DISABLE;
 c104de4:	e10f0000 	mrs	r0, CPSR
 c104de8:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c104dec:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c104df0:	e121f000 	msr	CPSR_c, r0
	pfifo->size++;
 c104df4:	e51b3010 	ldr	r3, [fp, #-16]
 c104df8:	e1d330b4 	ldrh	r3, [r3, #4]
 c104dfc:	e1a03803 	lsl	r3, r3, #16
 c104e00:	e1a03823 	lsr	r3, r3, #16
 c104e04:	e2833001 	add	r3, r3, #1
 c104e08:	e1a03803 	lsl	r3, r3, #16
 c104e0c:	e1a02823 	lsr	r2, r3, #16
 c104e10:	e51b3010 	ldr	r3, [fp, #-16]
 c104e14:	e1c320b4 	strh	r2, [r3, #4]
	INT_ENABLE;
 c104e18:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c104e1c:	e121f000 	msr	CPSR_c, r0
}
 c104e20:	e24bd00c 	sub	sp, fp, #12
 c104e24:	e89d6800 	ldm	sp, {fp, sp, lr}
 c104e28:	e12fff1e 	bx	lr

0c104e2c <fifo_dequeue>:

void fifo_dequeue( fifo_t *pfifo, uint8 *data )
{
 c104e2c:	e1a0c00d 	mov	ip, sp
 c104e30:	e92dd800 	push	{fp, ip, lr, pc}
 c104e34:	e24cb004 	sub	fp, ip, #4
 c104e38:	e24dd008 	sub	sp, sp, #8
 c104e3c:	e50b0010 	str	r0, [fp, #-16]
 c104e40:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	*data = pfifo->buffer[pfifo->head++];
 c104e44:	e51b3010 	ldr	r3, [fp, #-16]
 c104e48:	e1d330b0 	ldrh	r3, [r3]
 c104e4c:	e1a03803 	lsl	r3, r3, #16
 c104e50:	e1a03823 	lsr	r3, r3, #16
 c104e54:	e1a01003 	mov	r1, r3
 c104e58:	e51b0010 	ldr	r0, [fp, #-16]
 c104e5c:	e3a02006 	mov	r2, #6
 c104e60:	e0801001 	add	r1, r0, r1
 c104e64:	e0812002 	add	r2, r1, r2
 c104e68:	e5d21000 	ldrb	r1, [r2]
 c104e6c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c104e70:	e5c21000 	strb	r1, [r2]
 c104e74:	e2833001 	add	r3, r3, #1
 c104e78:	e1a03803 	lsl	r3, r3, #16
 c104e7c:	e1a02823 	lsr	r2, r3, #16
 c104e80:	e51b3010 	ldr	r3, [fp, #-16]
 c104e84:	e1c320b0 	strh	r2, [r3]
	if( pfifo->head == FIFO_SIZE )
 c104e88:	e51b3010 	ldr	r3, [fp, #-16]
 c104e8c:	e1d330b0 	ldrh	r3, [r3]
 c104e90:	e1a03803 	lsl	r3, r3, #16
 c104e94:	e1a03823 	lsr	r3, r3, #16
 c104e98:	e3530b01 	cmp	r3, #1024	; 0x400
 c104e9c:	1a000002 	bne	c104eac <fifo_dequeue+0x80>
		pfifo->head = 0;
 c104ea0:	e51b3010 	ldr	r3, [fp, #-16]
 c104ea4:	e3a02000 	mov	r2, #0
 c104ea8:	e1c320b0 	strh	r2, [r3]
	INT_DISABLE;
 c104eac:	e10f0000 	mrs	r0, CPSR
 c104eb0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
 c104eb4:	e38000c0 	orr	r0, r0, #192	; 0xc0
 c104eb8:	e121f000 	msr	CPSR_c, r0
	pfifo->size--;
 c104ebc:	e51b3010 	ldr	r3, [fp, #-16]
 c104ec0:	e1d330b4 	ldrh	r3, [r3, #4]
 c104ec4:	e1a03803 	lsl	r3, r3, #16
 c104ec8:	e1a03823 	lsr	r3, r3, #16
 c104ecc:	e2433001 	sub	r3, r3, #1
 c104ed0:	e1a03803 	lsl	r3, r3, #16
 c104ed4:	e1a02823 	lsr	r2, r3, #16
 c104ed8:	e51b3010 	ldr	r3, [fp, #-16]
 c104edc:	e1c320b4 	strh	r2, [r3, #4]
	INT_ENABLE;
 c104ee0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c104ee4:	e121f000 	msr	CPSR_c, r0
}
 c104ee8:	e24bd00c 	sub	sp, fp, #12
 c104eec:	e89d6800 	ldm	sp, {fp, sp, lr}
 c104ef0:	e12fff1e 	bx	lr

0c104ef4 <fifo_is_empty>:

boolean fifo_is_empty( fifo_t *pfifo )
{
 c104ef4:	e1a0c00d 	mov	ip, sp
 c104ef8:	e92dd800 	push	{fp, ip, lr, pc}
 c104efc:	e24cb004 	sub	fp, ip, #4
 c104f00:	e24dd008 	sub	sp, sp, #8
 c104f04:	e50b0010 	str	r0, [fp, #-16]
	return (pfifo->size == 0);
 c104f08:	e51b3010 	ldr	r3, [fp, #-16]
 c104f0c:	e1d330b4 	ldrh	r3, [r3, #4]
 c104f10:	e1a03803 	lsl	r3, r3, #16
 c104f14:	e1a03823 	lsr	r3, r3, #16
 c104f18:	e3530000 	cmp	r3, #0
 c104f1c:	13a03000 	movne	r3, #0
 c104f20:	03a03001 	moveq	r3, #1
 c104f24:	e20330ff 	and	r3, r3, #255	; 0xff
}
 c104f28:	e1a00003 	mov	r0, r3
 c104f2c:	e24bd00c 	sub	sp, fp, #12
 c104f30:	e89d6800 	ldm	sp, {fp, sp, lr}
 c104f34:	e12fff1e 	bx	lr

0c104f38 <fifo_is_full>:

boolean fifo_is_full( fifo_t *pfifo )
{
 c104f38:	e1a0c00d 	mov	ip, sp
 c104f3c:	e92dd800 	push	{fp, ip, lr, pc}
 c104f40:	e24cb004 	sub	fp, ip, #4
 c104f44:	e24dd008 	sub	sp, sp, #8
 c104f48:	e50b0010 	str	r0, [fp, #-16]
	return (pfifo->size == FIFO_SIZE-1);
 c104f4c:	e51b3010 	ldr	r3, [fp, #-16]
 c104f50:	e1d330b4 	ldrh	r3, [r3, #4]
 c104f54:	e1a03803 	lsl	r3, r3, #16
 c104f58:	e1a02823 	lsr	r2, r3, #16
 c104f5c:	e59f301c 	ldr	r3, [pc, #28]	; c104f80 <fifo_is_full+0x48>
 c104f60:	e1520003 	cmp	r2, r3
 c104f64:	13a03000 	movne	r3, #0
 c104f68:	03a03001 	moveq	r3, #1
 c104f6c:	e20330ff 	and	r3, r3, #255	; 0xff
}
 c104f70:	e1a00003 	mov	r0, r3
 c104f74:	e24bd00c 	sub	sp, fp, #12
 c104f78:	e89d6800 	ldm	sp, {fp, sp, lr}
 c104f7c:	e12fff1e 	bx	lr
 c104f80:	000003ff 	.word	0x000003ff

0c104f84 <iis_init>:
static void isr_bdma0( void ) __attribute__ ((interrupt ("IRQ")));

static uint8 iomode;

void iis_init( uint8 mode )
{
 c104f84:	e1a0c00d 	mov	ip, sp
 c104f88:	e92dd800 	push	{fp, ip, lr, pc}
 c104f8c:	e24cb004 	sub	fp, ip, #4
 c104f90:	e24dd008 	sub	sp, sp, #8
 c104f94:	e1a03000 	mov	r3, r0
 c104f98:	e54b300d 	strb	r3, [fp, #-13]
    iomode = mode;
 c104f9c:	e59f309c 	ldr	r3, [pc, #156]	; c105040 <iis_init+0xbc>
 c104fa0:	e55b200d 	ldrb	r2, [fp, #-13]
 c104fa4:	e5c32000 	strb	r2, [r3]

    if( iomode == IIS_POLLING )
 c104fa8:	e59f3090 	ldr	r3, [pc, #144]	; c105040 <iis_init+0xbc>
 c104fac:	e5d33000 	ldrb	r3, [r3]
 c104fb0:	e3530002 	cmp	r3, #2
 c104fb4:	1a00000b 	bne	c104fe8 <iis_init+0x64>
    {
    	IISPSR  = 0x77;
 c104fb8:	e59f3084 	ldr	r3, [pc, #132]	; c105044 <iis_init+0xc0>
 c104fbc:	e3a02077 	mov	r2, #119	; 0x77
 c104fc0:	e5832000 	str	r2, [r3]
    	IISMOD  = 0xc9;
 c104fc4:	e59f307c 	ldr	r3, [pc, #124]	; c105048 <iis_init+0xc4>
 c104fc8:	e3a020c9 	mov	r2, #201	; 0xc9
 c104fcc:	e5832000 	str	r2, [r3]
        IISFCON = 0x300;
 c104fd0:	e59f3074 	ldr	r3, [pc, #116]	; c10504c <iis_init+0xc8>
 c104fd4:	e3a02c03 	mov	r2, #768	; 0x300
 c104fd8:	e5832000 	str	r2, [r3]
        IISCON  = 0x3;
 c104fdc:	e59f306c 	ldr	r3, [pc, #108]	; c105050 <iis_init+0xcc>
 c104fe0:	e3a02003 	mov	r2, #3
 c104fe4:	e5832000 	str	r2, [r3]
    }
    if( iomode == IIS_DMA )
 c104fe8:	e59f3050 	ldr	r3, [pc, #80]	; c105040 <iis_init+0xbc>
 c104fec:	e5d33000 	ldrb	r3, [r3]
 c104ff0:	e3530001 	cmp	r3, #1
 c104ff4:	1a00000e 	bne	c105034 <iis_init+0xb0>
    {
    	IISPSR  = 0x77;
 c104ff8:	e59f3044 	ldr	r3, [pc, #68]	; c105044 <iis_init+0xc0>
 c104ffc:	e3a02077 	mov	r2, #119	; 0x77
 c105000:	e5832000 	str	r2, [r3]
		IISMOD  = 0x9;
 c105004:	e59f303c 	ldr	r3, [pc, #60]	; c105048 <iis_init+0xc4>
 c105008:	e3a02009 	mov	r2, #9
 c10500c:	e5832000 	str	r2, [r3]
		IISFCON = 0xf00;
 c105010:	e59f3034 	ldr	r3, [pc, #52]	; c10504c <iis_init+0xc8>
 c105014:	e3a02c0f 	mov	r2, #3840	; 0xf00
 c105018:	e5832000 	str	r2, [r3]
		IISCON  = 0x32;
 c10501c:	e59f302c 	ldr	r3, [pc, #44]	; c105050 <iis_init+0xcc>
 c105020:	e3a02032 	mov	r2, #50	; 0x32
 c105024:	e5832000 	str	r2, [r3]
		bdma0_init();
 c105028:	eb001737 	bl	c10ad0c <bdma0_init>
		bdma0_open( isr_bdma0 );
 c10502c:	e59f0020 	ldr	r0, [pc, #32]	; c105054 <iis_init+0xd0>
 c105030:	eb00174a 	bl	c10ad60 <bdma0_open>
    }
}
 c105034:	e24bd00c 	sub	sp, fp, #12
 c105038:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10503c:	e12fff1e 	bx	lr
 c105040:	0c10efa0 	.word	0x0c10efa0
 c105044:	01d18008 	.word	0x01d18008
 c105048:	01d18004 	.word	0x01d18004
 c10504c:	01d1800c 	.word	0x01d1800c
 c105050:	01d18000 	.word	0x01d18000
 c105054:	0c105058 	.word	0x0c105058

0c105058 <isr_bdma0>:

static void isr_bdma0( void )
{
 c105058:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10505c:	e1a0c00d 	mov	ip, sp
 c105060:	e92dd80c 	push	{r2, r3, fp, ip, lr, pc}
 c105064:	e24cb004 	sub	fp, ip, #4
    IISCON &= ~1;
 c105068:	e59f3028 	ldr	r3, [pc, #40]	; c105098 <isr_bdma0+0x40>
 c10506c:	e59f2024 	ldr	r2, [pc, #36]	; c105098 <isr_bdma0+0x40>
 c105070:	e5922000 	ldr	r2, [r2]
 c105074:	e3c22001 	bic	r2, r2, #1
 c105078:	e5832000 	str	r2, [r3]
    I_ISPC = BIT_BDMA0; 
 c10507c:	e59f3018 	ldr	r3, [pc, #24]	; c10509c <isr_bdma0+0x44>
 c105080:	e3a02802 	mov	r2, #131072	; 0x20000
 c105084:	e5832000 	str	r2, [r3]
}
 c105088:	e24bd014 	sub	sp, fp, #20
 c10508c:	e89d680c 	ldm	sp, {r2, r3, fp, sp, lr}
 c105090:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c105094:	e25ef004 	subs	pc, lr, #4
 c105098:	01d18000 	.word	0x01d18000
 c10509c:	01e00024 	.word	0x01e00024

0c1050a0 <iis_putSample>:

inline void iis_putSample( int16 ch0, int16 ch1 )
{
 c1050a0:	e1a0c00d 	mov	ip, sp
 c1050a4:	e92dd800 	push	{fp, ip, lr, pc}
 c1050a8:	e24cb004 	sub	fp, ip, #4
 c1050ac:	e24dd008 	sub	sp, sp, #8
 c1050b0:	e1a02000 	mov	r2, r0
 c1050b4:	e1a03001 	mov	r3, r1
 c1050b8:	e14b20be 	strh	r2, [fp, #-14]
 c1050bc:	e14b31b0 	strh	r3, [fp, #-16]
    while((IISFCON & 0xf0) > 6 );
 c1050c0:	e1a00000 	nop			; (mov r0, r0)
 c1050c4:	e59f3030 	ldr	r3, [pc, #48]	; c1050fc <iis_putSample+0x5c>
 c1050c8:	e5933000 	ldr	r3, [r3]
 c1050cc:	e20330f0 	and	r3, r3, #240	; 0xf0
 c1050d0:	e3530006 	cmp	r3, #6
 c1050d4:	8afffffa 	bhi	c1050c4 <iis_putSample+0x24>
    IISFIF = ch0;
 c1050d8:	e59f3020 	ldr	r3, [pc, #32]	; c105100 <iis_putSample+0x60>
 c1050dc:	e15b20fe 	ldrsh	r2, [fp, #-14]
 c1050e0:	e5832000 	str	r2, [r3]
    IISFIF = ch1;
 c1050e4:	e59f3014 	ldr	r3, [pc, #20]	; c105100 <iis_putSample+0x60>
 c1050e8:	e15b21f0 	ldrsh	r2, [fp, #-16]
 c1050ec:	e5832000 	str	r2, [r3]
}
 c1050f0:	e24bd00c 	sub	sp, fp, #12
 c1050f4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1050f8:	e12fff1e 	bx	lr
 c1050fc:	01d1800c 	.word	0x01d1800c
 c105100:	01d18010 	.word	0x01d18010

0c105104 <iis_getSample>:

inline void iis_getSample( int16 *ch0, int16 *ch1 )
{
 c105104:	e1a0c00d 	mov	ip, sp
 c105108:	e92dd800 	push	{fp, ip, lr, pc}
 c10510c:	e24cb004 	sub	fp, ip, #4
 c105110:	e24dd008 	sub	sp, sp, #8
 c105114:	e50b0010 	str	r0, [fp, #-16]
 c105118:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
	while ((IISFCON & 0xf) < 2);
 c10511c:	e1a00000 	nop			; (mov r0, r0)
 c105120:	e59f3048 	ldr	r3, [pc, #72]	; c105170 <iis_getSample+0x6c>
 c105124:	e5933000 	ldr	r3, [r3]
 c105128:	e203300f 	and	r3, r3, #15
 c10512c:	e3530001 	cmp	r3, #1
 c105130:	9afffffa 	bls	c105120 <iis_getSample+0x1c>

	*ch0 = IISFIF;
 c105134:	e59f3038 	ldr	r3, [pc, #56]	; c105174 <iis_getSample+0x70>
 c105138:	e5933000 	ldr	r3, [r3]
 c10513c:	e1a03803 	lsl	r3, r3, #16
 c105140:	e1a02823 	lsr	r2, r3, #16
 c105144:	e51b3010 	ldr	r3, [fp, #-16]
 c105148:	e1c320b0 	strh	r2, [r3]
    *ch1 = IISFIF;
 c10514c:	e59f3020 	ldr	r3, [pc, #32]	; c105174 <iis_getSample+0x70>
 c105150:	e5933000 	ldr	r3, [r3]
 c105154:	e1a03803 	lsl	r3, r3, #16
 c105158:	e1a02823 	lsr	r2, r3, #16
 c10515c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c105160:	e1c320b0 	strh	r2, [r3]
}
 c105164:	e24bd00c 	sub	sp, fp, #12
 c105168:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10516c:	e12fff1e 	bx	lr
 c105170:	01d1800c 	.word	0x01d1800c
 c105174:	01d18010 	.word	0x01d18010

0c105178 <iis_play>:

void iis_play( int16 *buffer, uint32 length, uint8 loop )
{
 c105178:	e1a0c00d 	mov	ip, sp
 c10517c:	e92dd800 	push	{fp, ip, lr, pc}
 c105180:	e24cb004 	sub	fp, ip, #4
 c105184:	e24dd018 	sub	sp, sp, #24
 c105188:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c10518c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 c105190:	e1a03002 	mov	r3, r2
 c105194:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
    uint32 i;
    int16 ch1, ch2;

    if( iomode == IIS_POLLING )
 c105198:	e59f319c 	ldr	r3, [pc, #412]	; c10533c <iis_play+0x1c4>
 c10519c:	e5d33000 	ldrb	r3, [r3]
 c1051a0:	e3530002 	cmp	r3, #2
 c1051a4:	1a00001e 	bne	c105224 <iis_play+0xac>
        for( i=0; i<length/2; )
 c1051a8:	e3a03000 	mov	r3, #0
 c1051ac:	e50b3010 	str	r3, [fp, #-16]
 c1051b0:	ea000016 	b	c105210 <iis_play+0x98>
        {
            ch1 = buffer[i++];
 c1051b4:	e51b3010 	ldr	r3, [fp, #-16]
 c1051b8:	e1a03083 	lsl	r3, r3, #1
 c1051bc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c1051c0:	e0823003 	add	r3, r2, r3
 c1051c4:	e1d330b0 	ldrh	r3, [r3]
 c1051c8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
 c1051cc:	e51b3010 	ldr	r3, [fp, #-16]
 c1051d0:	e2833001 	add	r3, r3, #1
 c1051d4:	e50b3010 	str	r3, [fp, #-16]
            ch2 = buffer[i++];
 c1051d8:	e51b3010 	ldr	r3, [fp, #-16]
 c1051dc:	e1a03083 	lsl	r3, r3, #1
 c1051e0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c1051e4:	e0823003 	add	r3, r2, r3
 c1051e8:	e1d330b0 	ldrh	r3, [r3]
 c1051ec:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
 c1051f0:	e51b3010 	ldr	r3, [fp, #-16]
 c1051f4:	e2833001 	add	r3, r3, #1
 c1051f8:	e50b3010 	str	r3, [fp, #-16]
            iis_putSample( ch1, ch2 );
 c1051fc:	e15b21f2 	ldrsh	r2, [fp, #-18]	; 0xffffffee
 c105200:	e15b31f4 	ldrsh	r3, [fp, #-20]	; 0xffffffec
 c105204:	e1a00002 	mov	r0, r2
 c105208:	e1a01003 	mov	r1, r3
 c10520c:	ebffffa3 	bl	c1050a0 <iis_putSample>
{
    uint32 i;
    int16 ch1, ch2;

    if( iomode == IIS_POLLING )
        for( i=0; i<length/2; )
 c105210:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c105214:	e1a020a3 	lsr	r2, r3, #1
 c105218:	e51b3010 	ldr	r3, [fp, #-16]
 c10521c:	e1520003 	cmp	r2, r3
 c105220:	8affffe3 	bhi	c1051b4 <iis_play+0x3c>
        {
            ch1 = buffer[i++];
            ch2 = buffer[i++];
            iis_putSample( ch1, ch2 );
        }
    if( iomode == IIS_DMA )
 c105224:	e59f3110 	ldr	r3, [pc, #272]	; c10533c <iis_play+0x1c4>
 c105228:	e5d33000 	ldrb	r3, [r3]
 c10522c:	e3530001 	cmp	r3, #1
 c105230:	1a00003e 	bne	c105330 <iis_play+0x1b8>
        {
            while( IISCON & 1  );
 c105234:	e1a00000 	nop			; (mov r0, r0)
 c105238:	e59f3100 	ldr	r3, [pc, #256]	; c105340 <iis_play+0x1c8>
 c10523c:	e5933000 	ldr	r3, [r3]
 c105240:	e2033001 	and	r3, r3, #1
 c105244:	e20330ff 	and	r3, r3, #255	; 0xff
 c105248:	e3530000 	cmp	r3, #0
 c10524c:	1afffff9 	bne	c105238 <iis_play+0xc0>
            BDISRC0  = (1 << 30) | (1 << 28) | (uint32) buffer;
 c105250:	e59f30ec 	ldr	r3, [pc, #236]	; c105344 <iis_play+0x1cc>
 c105254:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c105258:	e3822205 	orr	r2, r2, #1342177280	; 0x50000000
 c10525c:	e5832000 	str	r2, [r3]
            BDIDES0  = (1 << 30) | (3 << 28) | (uint32) &IISFIF;
 c105260:	e59f30e0 	ldr	r3, [pc, #224]	; c105348 <iis_play+0x1d0>
 c105264:	e59f20e0 	ldr	r2, [pc, #224]	; c10534c <iis_play+0x1d4>
 c105268:	e5832000 	str	r2, [r3]
            BDCON0   = 0;
 c10526c:	e3a0377e 	mov	r3, #33030144	; 0x1f80000
 c105270:	e3a02000 	mov	r2, #0
 c105274:	e5832000 	str	r2, [r3]
            BDICNT0  = (1 << 30) | (1 << 26) | (0xfffff & length);
 c105278:	e59f20d0 	ldr	r2, [pc, #208]	; c105350 <iis_play+0x1d8>
 c10527c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c105280:	e3c334ff 	bic	r3, r3, #-16777216	; 0xff000000
 c105284:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
 c105288:	e3833311 	orr	r3, r3, #1140850688	; 0x44000000
 c10528c:	e5823000 	str	r3, [r2]
            BDICNT0 |= (1 << 20);
 c105290:	e59f30b8 	ldr	r3, [pc, #184]	; c105350 <iis_play+0x1d8>
 c105294:	e59f20b4 	ldr	r2, [pc, #180]	; c105350 <iis_play+0x1d8>
 c105298:	e5922000 	ldr	r2, [r2]
 c10529c:	e3822601 	orr	r2, r2, #1048576	; 0x100000
 c1052a0:	e5832000 	str	r2, [r3]
            if (loop){
 c1052a4:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c1052a8:	e3530000 	cmp	r3, #0
 c1052ac:	0a00000a 	beq	c1052dc <iis_play+0x164>
                BDICNT0 |= (1 << 21);
 c1052b0:	e59f3098 	ldr	r3, [pc, #152]	; c105350 <iis_play+0x1d8>
 c1052b4:	e59f2094 	ldr	r2, [pc, #148]	; c105350 <iis_play+0x1d8>
 c1052b8:	e5922000 	ldr	r2, [r2]
 c1052bc:	e3822602 	orr	r2, r2, #2097152	; 0x200000
 c1052c0:	e5832000 	str	r2, [r3]
                BDICNT0 &= ~(3 << 22);
 c1052c4:	e59f3084 	ldr	r3, [pc, #132]	; c105350 <iis_play+0x1d8>
 c1052c8:	e59f2080 	ldr	r2, [pc, #128]	; c105350 <iis_play+0x1d8>
 c1052cc:	e5922000 	ldr	r2, [r2]
 c1052d0:	e3c22503 	bic	r2, r2, #12582912	; 0xc00000
 c1052d4:	e5832000 	str	r2, [r3]
 c1052d8:	ea000009 	b	c105304 <iis_play+0x18c>
            }
            else{
                BDICNT0 &= ~(1 << 21);
 c1052dc:	e59f306c 	ldr	r3, [pc, #108]	; c105350 <iis_play+0x1d8>
 c1052e0:	e59f2068 	ldr	r2, [pc, #104]	; c105350 <iis_play+0x1d8>
 c1052e4:	e5922000 	ldr	r2, [r2]
 c1052e8:	e3c22602 	bic	r2, r2, #2097152	; 0x200000
 c1052ec:	e5832000 	str	r2, [r3]
                BDICNT0 |= (3 << 22);
 c1052f0:	e59f3058 	ldr	r3, [pc, #88]	; c105350 <iis_play+0x1d8>
 c1052f4:	e59f2054 	ldr	r2, [pc, #84]	; c105350 <iis_play+0x1d8>
 c1052f8:	e5922000 	ldr	r2, [r2]
 c1052fc:	e3822503 	orr	r2, r2, #12582912	; 0xc00000
 c105300:	e5832000 	str	r2, [r3]
            }


            IISMOD = (IISMOD & ~(3 << 6)) | (2 << 6);
 c105304:	e59f3048 	ldr	r3, [pc, #72]	; c105354 <iis_play+0x1dc>
 c105308:	e59f2044 	ldr	r2, [pc, #68]	; c105354 <iis_play+0x1dc>
 c10530c:	e5922000 	ldr	r2, [r2]
 c105310:	e3c220c0 	bic	r2, r2, #192	; 0xc0
 c105314:	e3822080 	orr	r2, r2, #128	; 0x80
 c105318:	e5832000 	str	r2, [r3]

            IISCON |= 1 << 0;
 c10531c:	e59f301c 	ldr	r3, [pc, #28]	; c105340 <iis_play+0x1c8>
 c105320:	e59f2018 	ldr	r2, [pc, #24]	; c105340 <iis_play+0x1c8>
 c105324:	e5922000 	ldr	r2, [r2]
 c105328:	e3822001 	orr	r2, r2, #1
 c10532c:	e5832000 	str	r2, [r3]
        }
}
 c105330:	e24bd00c 	sub	sp, fp, #12
 c105334:	e89d6800 	ldm	sp, {fp, sp, lr}
 c105338:	e12fff1e 	bx	lr
 c10533c:	0c10efa0 	.word	0x0c10efa0
 c105340:	01d18000 	.word	0x01d18000
 c105344:	01f80004 	.word	0x01f80004
 c105348:	01f80008 	.word	0x01f80008
 c10534c:	71d18010 	.word	0x71d18010
 c105350:	01f8000c 	.word	0x01f8000c
 c105354:	01d18004 	.word	0x01d18004

0c105358 <iis_rec>:

void iis_rec( int16 *buffer, uint32 length )
{
 c105358:	e1a0c00d 	mov	ip, sp
 c10535c:	e92dd800 	push	{fp, ip, lr, pc}
 c105360:	e24cb004 	sub	fp, ip, #4
 c105364:	e24dd010 	sub	sp, sp, #16
 c105368:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c10536c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    uint32 i;
    int16 ch1, ch2;

    if( iomode == IIS_POLLING )
 c105370:	e59f3140 	ldr	r3, [pc, #320]	; c1054b8 <iis_rec+0x160>
 c105374:	e5d33000 	ldrb	r3, [r3]
 c105378:	e3530002 	cmp	r3, #2
 c10537c:	1a00001e 	bne	c1053fc <iis_rec+0xa4>
        for( i=0; i<length/2; )
 c105380:	e3a03000 	mov	r3, #0
 c105384:	e50b3010 	str	r3, [fp, #-16]
 c105388:	ea000016 	b	c1053e8 <iis_rec+0x90>
        {
            iis_getSample( &ch1, &ch2 );
 c10538c:	e24b2012 	sub	r2, fp, #18
 c105390:	e24b3014 	sub	r3, fp, #20
 c105394:	e1a00002 	mov	r0, r2
 c105398:	e1a01003 	mov	r1, r3
 c10539c:	ebffff58 	bl	c105104 <iis_getSample>
            buffer[i++] = ch1;
 c1053a0:	e51b3010 	ldr	r3, [fp, #-16]
 c1053a4:	e1a03083 	lsl	r3, r3, #1
 c1053a8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c1053ac:	e0823003 	add	r3, r2, r3
 c1053b0:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c1053b4:	e1c320b0 	strh	r2, [r3]
 c1053b8:	e51b3010 	ldr	r3, [fp, #-16]
 c1053bc:	e2833001 	add	r3, r3, #1
 c1053c0:	e50b3010 	str	r3, [fp, #-16]
            buffer[i++] = ch2;
 c1053c4:	e51b3010 	ldr	r3, [fp, #-16]
 c1053c8:	e1a03083 	lsl	r3, r3, #1
 c1053cc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c1053d0:	e0823003 	add	r3, r2, r3
 c1053d4:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
 c1053d8:	e1c320b0 	strh	r2, [r3]
 c1053dc:	e51b3010 	ldr	r3, [fp, #-16]
 c1053e0:	e2833001 	add	r3, r3, #1
 c1053e4:	e50b3010 	str	r3, [fp, #-16]
{
    uint32 i;
    int16 ch1, ch2;

    if( iomode == IIS_POLLING )
        for( i=0; i<length/2; )
 c1053e8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c1053ec:	e1a020a3 	lsr	r2, r3, #1
 c1053f0:	e51b3010 	ldr	r3, [fp, #-16]
 c1053f4:	e1520003 	cmp	r2, r3
 c1053f8:	8affffe3 	bhi	c10538c <iis_rec+0x34>
            iis_getSample( &ch1, &ch2 );
            buffer[i++] = ch1;
            buffer[i++] = ch2;
        }

    if( iomode == IIS_DMA )
 c1053fc:	e59f30b4 	ldr	r3, [pc, #180]	; c1054b8 <iis_rec+0x160>
 c105400:	e5d33000 	ldrb	r3, [r3]
 c105404:	e3530001 	cmp	r3, #1
 c105408:	1a000027 	bne	c1054ac <iis_rec+0x154>
    {
        while( IISCON & 1  );
 c10540c:	e1a00000 	nop			; (mov r0, r0)
 c105410:	e59f30a4 	ldr	r3, [pc, #164]	; c1054bc <iis_rec+0x164>
 c105414:	e5933000 	ldr	r3, [r3]
 c105418:	e2033001 	and	r3, r3, #1
 c10541c:	e20330ff 	and	r3, r3, #255	; 0xff
 c105420:	e3530000 	cmp	r3, #0
 c105424:	1afffff9 	bne	c105410 <iis_rec+0xb8>
        BDISRC0  = (1 << 30) | (3 << 28) | (uint32) &IISFIF;
 c105428:	e59f3090 	ldr	r3, [pc, #144]	; c1054c0 <iis_rec+0x168>
 c10542c:	e59f2090 	ldr	r2, [pc, #144]	; c1054c4 <iis_rec+0x16c>
 c105430:	e5832000 	str	r2, [r3]
        BDIDES0  = (2 << 30) | (1 << 28) | (uint32) buffer;      
 c105434:	e59f308c 	ldr	r3, [pc, #140]	; c1054c8 <iis_rec+0x170>
 c105438:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c10543c:	e3822209 	orr	r2, r2, #-1879048192	; 0x90000000
 c105440:	e5832000 	str	r2, [r3]
        BDCON0   = 0;
 c105444:	e3a0377e 	mov	r3, #33030144	; 0x1f80000
 c105448:	e3a02000 	mov	r2, #0
 c10544c:	e5832000 	str	r2, [r3]
        BDICNT0  = (1 << 30) | (1 << 26) | (3 << 22) | (0xfffff & length); 
 c105450:	e59f2074 	ldr	r2, [pc, #116]	; c1054cc <iis_rec+0x174>
 c105454:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c105458:	e3c334ff 	bic	r3, r3, #-16777216	; 0xff000000
 c10545c:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
 c105460:	e3833311 	orr	r3, r3, #1140850688	; 0x44000000
 c105464:	e3833503 	orr	r3, r3, #12582912	; 0xc00000
 c105468:	e5823000 	str	r3, [r2]
        BDICNT0 |= (1 << 20);
 c10546c:	e59f3058 	ldr	r3, [pc, #88]	; c1054cc <iis_rec+0x174>
 c105470:	e59f2054 	ldr	r2, [pc, #84]	; c1054cc <iis_rec+0x174>
 c105474:	e5922000 	ldr	r2, [r2]
 c105478:	e3822601 	orr	r2, r2, #1048576	; 0x100000
 c10547c:	e5832000 	str	r2, [r3]

        IISMOD   = (IISMOD & ~(3 << 6)) | (1 << 6);
 c105480:	e59f3048 	ldr	r3, [pc, #72]	; c1054d0 <iis_rec+0x178>
 c105484:	e59f2044 	ldr	r2, [pc, #68]	; c1054d0 <iis_rec+0x178>
 c105488:	e5922000 	ldr	r2, [r2]
 c10548c:	e3c220c0 	bic	r2, r2, #192	; 0xc0
 c105490:	e3822040 	orr	r2, r2, #64	; 0x40
 c105494:	e5832000 	str	r2, [r3]
        IISCON  |= 1 << 0;
 c105498:	e59f301c 	ldr	r3, [pc, #28]	; c1054bc <iis_rec+0x164>
 c10549c:	e59f2018 	ldr	r2, [pc, #24]	; c1054bc <iis_rec+0x164>
 c1054a0:	e5922000 	ldr	r2, [r2]
 c1054a4:	e3822001 	orr	r2, r2, #1
 c1054a8:	e5832000 	str	r2, [r3]
    }
}
 c1054ac:	e24bd00c 	sub	sp, fp, #12
 c1054b0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1054b4:	e12fff1e 	bx	lr
 c1054b8:	0c10efa0 	.word	0x0c10efa0
 c1054bc:	01d18000 	.word	0x01d18000
 c1054c0:	01f80004 	.word	0x01f80004
 c1054c4:	71d18010 	.word	0x71d18010
 c1054c8:	01f80008 	.word	0x01f80008
 c1054cc:	01f8000c 	.word	0x01f8000c
 c1054d0:	01d18004 	.word	0x01d18004

0c1054d4 <iis_pause>:

void iis_pause( void )
{
 c1054d4:	e1a0c00d 	mov	ip, sp
 c1054d8:	e92dd800 	push	{fp, ip, lr, pc}
 c1054dc:	e24cb004 	sub	fp, ip, #4
    IISCON &= ~1;
 c1054e0:	e59f3018 	ldr	r3, [pc, #24]	; c105500 <iis_pause+0x2c>
 c1054e4:	e59f2014 	ldr	r2, [pc, #20]	; c105500 <iis_pause+0x2c>
 c1054e8:	e5922000 	ldr	r2, [r2]
 c1054ec:	e3c22001 	bic	r2, r2, #1
 c1054f0:	e5832000 	str	r2, [r3]
}
 c1054f4:	e24bd00c 	sub	sp, fp, #12
 c1054f8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1054fc:	e12fff1e 	bx	lr
 c105500:	01d18000 	.word	0x01d18000

0c105504 <iis_continue>:

void iis_continue( void )
{
 c105504:	e1a0c00d 	mov	ip, sp
 c105508:	e92dd800 	push	{fp, ip, lr, pc}
 c10550c:	e24cb004 	sub	fp, ip, #4
    IISCON |= 1;
 c105510:	e59f3018 	ldr	r3, [pc, #24]	; c105530 <iis_continue+0x2c>
 c105514:	e59f2014 	ldr	r2, [pc, #20]	; c105530 <iis_continue+0x2c>
 c105518:	e5922000 	ldr	r2, [r2]
 c10551c:	e3822001 	orr	r2, r2, #1
 c105520:	e5832000 	str	r2, [r3]
}
 c105524:	e24bd00c 	sub	sp, fp, #12
 c105528:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10552c:	e12fff1e 	bx	lr
 c105530:	01d18000 	.word	0x01d18000

0c105534 <iis_status>:

uint8 iis_status( void )
{
 c105534:	e1a0c00d 	mov	ip, sp
 c105538:	e92dd800 	push	{fp, ip, lr, pc}
 c10553c:	e24cb004 	sub	fp, ip, #4
    return (IISCON & 1);
 c105540:	e59f301c 	ldr	r3, [pc, #28]	; c105564 <iis_status+0x30>
 c105544:	e5933000 	ldr	r3, [r3]
 c105548:	e20330ff 	and	r3, r3, #255	; 0xff
 c10554c:	e2033001 	and	r3, r3, #1
 c105550:	e20330ff 	and	r3, r3, #255	; 0xff
}
 c105554:	e1a00003 	mov	r0, r3
 c105558:	e24bd00c 	sub	sp, fp, #12
 c10555c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c105560:	e12fff1e 	bx	lr
 c105564:	01d18000 	.word	0x01d18000

0c105568 <iis_playWawFile>:

void iis_playWawFile( int16 *wav, uint8 loop )
{
 c105568:	e1a0c00d 	mov	ip, sp
 c10556c:	e92dd800 	push	{fp, ip, lr, pc}
 c105570:	e24cb004 	sub	fp, ip, #4
 c105574:	e24dd010 	sub	sp, sp, #16
 c105578:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c10557c:	e1a03001 	mov	r3, r1
 c105580:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7

    uint32 size;
    char *p;

    p = (char *) wav;
 c105584:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105588:	e50b3010 	str	r3, [fp, #-16]
    while ( !(p[0] == 'd' && p[1] == 'a' && p[2] == 't' && p[3] == 'a') ) // busca el chunck 
 c10558c:	ea000002 	b	c10559c <iis_playWawFile+0x34>
        p++;
 c105590:	e51b3010 	ldr	r3, [fp, #-16]
 c105594:	e2833001 	add	r3, r3, #1
 c105598:	e50b3010 	str	r3, [fp, #-16]

    uint32 size;
    char *p;

    p = (char *) wav;
    while ( !(p[0] == 'd' && p[1] == 'a' && p[2] == 't' && p[3] == 'a') ) // busca el chunck 
 c10559c:	e51b3010 	ldr	r3, [fp, #-16]
 c1055a0:	e5d33000 	ldrb	r3, [r3]
 c1055a4:	e3530064 	cmp	r3, #100	; 0x64
 c1055a8:	1afffff8 	bne	c105590 <iis_playWawFile+0x28>
 c1055ac:	e51b3010 	ldr	r3, [fp, #-16]
 c1055b0:	e2833001 	add	r3, r3, #1
 c1055b4:	e5d33000 	ldrb	r3, [r3]
 c1055b8:	e3530061 	cmp	r3, #97	; 0x61
 c1055bc:	1afffff3 	bne	c105590 <iis_playWawFile+0x28>
 c1055c0:	e51b3010 	ldr	r3, [fp, #-16]
 c1055c4:	e2833002 	add	r3, r3, #2
 c1055c8:	e5d33000 	ldrb	r3, [r3]
 c1055cc:	e3530074 	cmp	r3, #116	; 0x74
 c1055d0:	1affffee 	bne	c105590 <iis_playWawFile+0x28>
 c1055d4:	e51b3010 	ldr	r3, [fp, #-16]
 c1055d8:	e2833003 	add	r3, r3, #3
 c1055dc:	e5d33000 	ldrb	r3, [r3]
 c1055e0:	e3530061 	cmp	r3, #97	; 0x61
 c1055e4:	1affffe9 	bne	c105590 <iis_playWawFile+0x28>
        p++;
    p += 4;
 c1055e8:	e51b3010 	ldr	r3, [fp, #-16]
 c1055ec:	e2833004 	add	r3, r3, #4
 c1055f0:	e50b3010 	str	r3, [fp, #-16]

    size = p[0] + (p[1] << 8) + (p[2] << 16) + (p[3] << 24); // los datos de cabecera estï¿½n en little-endian
 c1055f4:	e51b3010 	ldr	r3, [fp, #-16]
 c1055f8:	e5d33000 	ldrb	r3, [r3]
 c1055fc:	e1a02003 	mov	r2, r3
 c105600:	e51b3010 	ldr	r3, [fp, #-16]
 c105604:	e2833001 	add	r3, r3, #1
 c105608:	e5d33000 	ldrb	r3, [r3]
 c10560c:	e1a03403 	lsl	r3, r3, #8
 c105610:	e0822003 	add	r2, r2, r3
 c105614:	e51b3010 	ldr	r3, [fp, #-16]
 c105618:	e2833002 	add	r3, r3, #2
 c10561c:	e5d33000 	ldrb	r3, [r3]
 c105620:	e1a03803 	lsl	r3, r3, #16
 c105624:	e0822003 	add	r2, r2, r3
 c105628:	e51b3010 	ldr	r3, [fp, #-16]
 c10562c:	e2833003 	add	r3, r3, #3
 c105630:	e5d33000 	ldrb	r3, [r3]
 c105634:	e1a03c03 	lsl	r3, r3, #24
 c105638:	e0823003 	add	r3, r2, r3
 c10563c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    p += 4;
 c105640:	e51b3010 	ldr	r3, [fp, #-16]
 c105644:	e2833004 	add	r3, r3, #4
 c105648:	e50b3010 	str	r3, [fp, #-16]

    iis_play( (int16 *)p, size, loop );
 c10564c:	e51b2010 	ldr	r2, [fp, #-16]
 c105650:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c105654:	e1a00002 	mov	r0, r2
 c105658:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
 c10565c:	e1a02003 	mov	r2, r3
 c105660:	ebfffec4 	bl	c105178 <iis_play>

}
 c105664:	e24bd00c 	sub	sp, fp, #12
 c105668:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10566c:	e12fff1e 	bx	lr

0c105670 <keypad_scan>:
#include <keypad.h>

extern void isr_KEYPAD_dummy( void );

uint8 keypad_scan( void )
{
 c105670:	e1a0c00d 	mov	ip, sp
 c105674:	e92dd800 	push	{fp, ip, lr, pc}
 c105678:	e24cb004 	sub	fp, ip, #4
 c10567c:	e24dd008 	sub	sp, sp, #8
    uint8 aux;

    aux = *( KEYPAD_ADDR + 0x1c );
 c105680:	e59f31fc 	ldr	r3, [pc, #508]	; c105884 <keypad_scan+0x214>
 c105684:	e5d33000 	ldrb	r3, [r3]
 c105688:	e54b300d 	strb	r3, [fp, #-13]
    if( (aux & 0x0f) != 0x0f )
 c10568c:	e55b300d 	ldrb	r3, [fp, #-13]
 c105690:	e203300f 	and	r3, r3, #15
 c105694:	e353000f 	cmp	r3, #15
 c105698:	0a000017 	beq	c1056fc <keypad_scan+0x8c>
    {
        if( (aux & 0x8) == 0 )
 c10569c:	e55b300d 	ldrb	r3, [fp, #-13]
 c1056a0:	e2033008 	and	r3, r3, #8
 c1056a4:	e3530000 	cmp	r3, #0
 c1056a8:	1a000001 	bne	c1056b4 <keypad_scan+0x44>
            return KEYPAD_KEY0;
 c1056ac:	e3a03000 	mov	r3, #0
 c1056b0:	ea00006f 	b	c105874 <keypad_scan+0x204>
        else if( (aux & 0x4) == 0 )
 c1056b4:	e55b300d 	ldrb	r3, [fp, #-13]
 c1056b8:	e2033004 	and	r3, r3, #4
 c1056bc:	e3530000 	cmp	r3, #0
 c1056c0:	1a000001 	bne	c1056cc <keypad_scan+0x5c>
            return KEYPAD_KEY1;
 c1056c4:	e3a03001 	mov	r3, #1
 c1056c8:	ea000069 	b	c105874 <keypad_scan+0x204>
        else if( (aux & 0x2) == 0 )
 c1056cc:	e55b300d 	ldrb	r3, [fp, #-13]
 c1056d0:	e2033002 	and	r3, r3, #2
 c1056d4:	e3530000 	cmp	r3, #0
 c1056d8:	1a000001 	bne	c1056e4 <keypad_scan+0x74>
            return KEYPAD_KEY2;
 c1056dc:	e3a03002 	mov	r3, #2
 c1056e0:	ea000063 	b	c105874 <keypad_scan+0x204>
        else if( (aux & 0x1) == 0 )
 c1056e4:	e55b300d 	ldrb	r3, [fp, #-13]
 c1056e8:	e2033001 	and	r3, r3, #1
 c1056ec:	e3530000 	cmp	r3, #0
 c1056f0:	1a000001 	bne	c1056fc <keypad_scan+0x8c>
            return KEYPAD_KEY3;
 c1056f4:	e3a03003 	mov	r3, #3
 c1056f8:	ea00005d 	b	c105874 <keypad_scan+0x204>
    }
	aux = *( KEYPAD_ADDR + 0x1a );
 c1056fc:	e59f3184 	ldr	r3, [pc, #388]	; c105888 <keypad_scan+0x218>
 c105700:	e5d33000 	ldrb	r3, [r3]
 c105704:	e54b300d 	strb	r3, [fp, #-13]
	if( (aux & 0x0f) != 0x0f )
 c105708:	e55b300d 	ldrb	r3, [fp, #-13]
 c10570c:	e203300f 	and	r3, r3, #15
 c105710:	e353000f 	cmp	r3, #15
 c105714:	0a000017 	beq	c105778 <keypad_scan+0x108>
	{
		if( (aux & 0x8) == 0 )
 c105718:	e55b300d 	ldrb	r3, [fp, #-13]
 c10571c:	e2033008 	and	r3, r3, #8
 c105720:	e3530000 	cmp	r3, #0
 c105724:	1a000001 	bne	c105730 <keypad_scan+0xc0>
			return KEYPAD_KEY4;
 c105728:	e3a03004 	mov	r3, #4
 c10572c:	ea000050 	b	c105874 <keypad_scan+0x204>
		else if( (aux & 0x4) == 0 )
 c105730:	e55b300d 	ldrb	r3, [fp, #-13]
 c105734:	e2033004 	and	r3, r3, #4
 c105738:	e3530000 	cmp	r3, #0
 c10573c:	1a000001 	bne	c105748 <keypad_scan+0xd8>
			return KEYPAD_KEY5;
 c105740:	e3a03005 	mov	r3, #5
 c105744:	ea00004a 	b	c105874 <keypad_scan+0x204>
		else if( (aux & 0x2) == 0 )
 c105748:	e55b300d 	ldrb	r3, [fp, #-13]
 c10574c:	e2033002 	and	r3, r3, #2
 c105750:	e3530000 	cmp	r3, #0
 c105754:	1a000001 	bne	c105760 <keypad_scan+0xf0>
			return KEYPAD_KEY6;
 c105758:	e3a03006 	mov	r3, #6
 c10575c:	ea000044 	b	c105874 <keypad_scan+0x204>
		else if( (aux & 0x1) == 0 )
 c105760:	e55b300d 	ldrb	r3, [fp, #-13]
 c105764:	e2033001 	and	r3, r3, #1
 c105768:	e3530000 	cmp	r3, #0
 c10576c:	1a000001 	bne	c105778 <keypad_scan+0x108>
			return KEYPAD_KEY7;
 c105770:	e3a03007 	mov	r3, #7
 c105774:	ea00003e 	b	c105874 <keypad_scan+0x204>
	}
	aux = *( KEYPAD_ADDR + 0x16 );
 c105778:	e59f310c 	ldr	r3, [pc, #268]	; c10588c <keypad_scan+0x21c>
 c10577c:	e5d33000 	ldrb	r3, [r3]
 c105780:	e54b300d 	strb	r3, [fp, #-13]
	if( (aux & 0x0f) != 0x0f )
 c105784:	e55b300d 	ldrb	r3, [fp, #-13]
 c105788:	e203300f 	and	r3, r3, #15
 c10578c:	e353000f 	cmp	r3, #15
 c105790:	0a000017 	beq	c1057f4 <keypad_scan+0x184>
	{
		if( (aux & 0x8) == 0 )
 c105794:	e55b300d 	ldrb	r3, [fp, #-13]
 c105798:	e2033008 	and	r3, r3, #8
 c10579c:	e3530000 	cmp	r3, #0
 c1057a0:	1a000001 	bne	c1057ac <keypad_scan+0x13c>
			return KEYPAD_KEY8;
 c1057a4:	e3a03008 	mov	r3, #8
 c1057a8:	ea000031 	b	c105874 <keypad_scan+0x204>
		else if( (aux & 0x4) == 0 )
 c1057ac:	e55b300d 	ldrb	r3, [fp, #-13]
 c1057b0:	e2033004 	and	r3, r3, #4
 c1057b4:	e3530000 	cmp	r3, #0
 c1057b8:	1a000001 	bne	c1057c4 <keypad_scan+0x154>
			return KEYPAD_KEY9;
 c1057bc:	e3a03009 	mov	r3, #9
 c1057c0:	ea00002b 	b	c105874 <keypad_scan+0x204>
		else if( (aux & 0x2) == 0 )
 c1057c4:	e55b300d 	ldrb	r3, [fp, #-13]
 c1057c8:	e2033002 	and	r3, r3, #2
 c1057cc:	e3530000 	cmp	r3, #0
 c1057d0:	1a000001 	bne	c1057dc <keypad_scan+0x16c>
			return KEYPAD_KEYA;
 c1057d4:	e3a0300a 	mov	r3, #10
 c1057d8:	ea000025 	b	c105874 <keypad_scan+0x204>
		else if( (aux & 0x1) == 0 )
 c1057dc:	e55b300d 	ldrb	r3, [fp, #-13]
 c1057e0:	e2033001 	and	r3, r3, #1
 c1057e4:	e3530000 	cmp	r3, #0
 c1057e8:	1a000001 	bne	c1057f4 <keypad_scan+0x184>
			return KEYPAD_KEYB;
 c1057ec:	e3a0300b 	mov	r3, #11
 c1057f0:	ea00001f 	b	c105874 <keypad_scan+0x204>
	}
	aux = *( KEYPAD_ADDR + 0x0e );
 c1057f4:	e59f3094 	ldr	r3, [pc, #148]	; c105890 <keypad_scan+0x220>
 c1057f8:	e5d33000 	ldrb	r3, [r3]
 c1057fc:	e54b300d 	strb	r3, [fp, #-13]
	if( (aux & 0x0f) != 0x0f )
 c105800:	e55b300d 	ldrb	r3, [fp, #-13]
 c105804:	e203300f 	and	r3, r3, #15
 c105808:	e353000f 	cmp	r3, #15
 c10580c:	0a000017 	beq	c105870 <keypad_scan+0x200>
	{
		if( (aux & 0x8) == 0 )
 c105810:	e55b300d 	ldrb	r3, [fp, #-13]
 c105814:	e2033008 	and	r3, r3, #8
 c105818:	e3530000 	cmp	r3, #0
 c10581c:	1a000001 	bne	c105828 <keypad_scan+0x1b8>
			return KEYPAD_KEYC;
 c105820:	e3a0300c 	mov	r3, #12
 c105824:	ea000012 	b	c105874 <keypad_scan+0x204>
		else if( (aux & 0x4) == 0 )
 c105828:	e55b300d 	ldrb	r3, [fp, #-13]
 c10582c:	e2033004 	and	r3, r3, #4
 c105830:	e3530000 	cmp	r3, #0
 c105834:	1a000001 	bne	c105840 <keypad_scan+0x1d0>
			return KEYPAD_KEYD;
 c105838:	e3a0300d 	mov	r3, #13
 c10583c:	ea00000c 	b	c105874 <keypad_scan+0x204>
		else if( (aux & 0x2) == 0 )
 c105840:	e55b300d 	ldrb	r3, [fp, #-13]
 c105844:	e2033002 	and	r3, r3, #2
 c105848:	e3530000 	cmp	r3, #0
 c10584c:	1a000001 	bne	c105858 <keypad_scan+0x1e8>
			return KEYPAD_KEYE;
 c105850:	e3a0300e 	mov	r3, #14
 c105854:	ea000006 	b	c105874 <keypad_scan+0x204>
		else if( (aux & 0x1) == 0 )
 c105858:	e55b300d 	ldrb	r3, [fp, #-13]
 c10585c:	e2033001 	and	r3, r3, #1
 c105860:	e3530000 	cmp	r3, #0
 c105864:	1a000001 	bne	c105870 <keypad_scan+0x200>
			return KEYPAD_KEYF;
 c105868:	e3a0300f 	mov	r3, #15
 c10586c:	ea000000 	b	c105874 <keypad_scan+0x204>
	}

    return KEYPAD_FAILURE;
 c105870:	e3a030ff 	mov	r3, #255	; 0xff
}
 c105874:	e1a00003 	mov	r0, r3
 c105878:	e24bd00c 	sub	sp, fp, #12
 c10587c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c105880:	e12fff1e 	bx	lr
 c105884:	0600001c 	.word	0x0600001c
 c105888:	0600001a 	.word	0x0600001a
 c10588c:	06000016 	.word	0x06000016
 c105890:	0600000e 	.word	0x0600000e

0c105894 <keypad_pressed>:

uint8 keypad_pressed( void )
{
 c105894:	e1a0c00d 	mov	ip, sp
 c105898:	e92dd800 	push	{fp, ip, lr, pc}
 c10589c:	e24cb004 	sub	fp, ip, #4
	return keypad_scan() != KEYPAD_FAILURE;
 c1058a0:	ebffff72 	bl	c105670 <keypad_scan>
 c1058a4:	e1a03000 	mov	r3, r0
 c1058a8:	e35300ff 	cmp	r3, #255	; 0xff
 c1058ac:	03a03000 	moveq	r3, #0
 c1058b0:	13a03001 	movne	r3, #1
 c1058b4:	e20330ff 	and	r3, r3, #255	; 0xff

}
 c1058b8:	e1a00003 	mov	r0, r3
 c1058bc:	e24bd00c 	sub	sp, fp, #12
 c1058c0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1058c4:	e12fff1e 	bx	lr

0c1058c8 <keypad_open>:

void keypad_open( void (*isr)(void) )
{
 c1058c8:	e1a0c00d 	mov	ip, sp
 c1058cc:	e92dd800 	push	{fp, ip, lr, pc}
 c1058d0:	e24cb004 	sub	fp, ip, #4
 c1058d4:	e24dd008 	sub	sp, sp, #8
 c1058d8:	e50b0010 	str	r0, [fp, #-16]
    pISR_KEYPAD = isr;
 c1058dc:	e59f3044 	ldr	r3, [pc, #68]	; c105928 <keypad_open+0x60>
 c1058e0:	e51b2010 	ldr	r2, [fp, #-16]
 c1058e4:	e5832000 	str	r2, [r3]
    EXTINTPND = 0x0;
 c1058e8:	e59f303c 	ldr	r3, [pc, #60]	; c10592c <keypad_open+0x64>
 c1058ec:	e3a02000 	mov	r2, #0
 c1058f0:	e5832000 	str	r2, [r3]
	I_ISPC |= BIT_EINT1;
 c1058f4:	e59f3034 	ldr	r3, [pc, #52]	; c105930 <keypad_open+0x68>
 c1058f8:	e59f2030 	ldr	r2, [pc, #48]	; c105930 <keypad_open+0x68>
 c1058fc:	e5922000 	ldr	r2, [r2]
 c105900:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
 c105904:	e5832000 	str	r2, [r3]
	INTMSK &= ~(BIT_GLOBAL | BIT_EINT1);
 c105908:	e59f3024 	ldr	r3, [pc, #36]	; c105934 <keypad_open+0x6c>
 c10590c:	e59f2020 	ldr	r2, [pc, #32]	; c105934 <keypad_open+0x6c>
 c105910:	e5922000 	ldr	r2, [r2]
 c105914:	e3c22405 	bic	r2, r2, #83886080	; 0x5000000
 c105918:	e5832000 	str	r2, [r3]
}
 c10591c:	e24bd00c 	sub	sp, fp, #12
 c105920:	e89d6800 	ldm	sp, {fp, sp, lr}
 c105924:	e12fff1e 	bx	lr
 c105928:	0c7fff80 	.word	0x0c7fff80
 c10592c:	01d20054 	.word	0x01d20054
 c105930:	01e00024 	.word	0x01e00024
 c105934:	01e0000c 	.word	0x01e0000c

0c105938 <keypad_close>:

void keypad_close( void )
{
 c105938:	e1a0c00d 	mov	ip, sp
 c10593c:	e92dd800 	push	{fp, ip, lr, pc}
 c105940:	e24cb004 	sub	fp, ip, #4
	INTMSK |= (BIT_EINT1);
 c105944:	e59f3024 	ldr	r3, [pc, #36]	; c105970 <keypad_close+0x38>
 c105948:	e59f2020 	ldr	r2, [pc, #32]	; c105970 <keypad_close+0x38>
 c10594c:	e5922000 	ldr	r2, [r2]
 c105950:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
 c105954:	e5832000 	str	r2, [r3]
	pISR_KEYPAD  = isr_KEYPAD_dummy;
 c105958:	e59f3014 	ldr	r3, [pc, #20]	; c105974 <keypad_close+0x3c>
 c10595c:	e59f2014 	ldr	r2, [pc, #20]	; c105978 <keypad_close+0x40>
 c105960:	e5832000 	str	r2, [r3]
}
 c105964:	e24bd00c 	sub	sp, fp, #12
 c105968:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10596c:	e12fff1e 	bx	lr
 c105970:	01e0000c 	.word	0x01e0000c
 c105974:	0c7fff80 	.word	0x0c7fff80
 c105978:	0c108a20 	.word	0x0c108a20

0c10597c <keypad_init>:

#if KEYPAD_IO_METHOD == POOLING


void keypad_init( void )
{
 c10597c:	e1a0c00d 	mov	ip, sp
 c105980:	e92dd800 	push	{fp, ip, lr, pc}
 c105984:	e24cb004 	sub	fp, ip, #4
    timers_init();
 c105988:	eb000d1a 	bl	c108df8 <timers_init>

};
 c10598c:	e24bd00c 	sub	sp, fp, #12
 c105990:	e89d6800 	ldm	sp, {fp, sp, lr}
 c105994:	e12fff1e 	bx	lr

0c105998 <keypad_getchar>:

uint8 keypad_getchar( void )
{
 c105998:	e1a0c00d 	mov	ip, sp
 c10599c:	e92dd800 	push	{fp, ip, lr, pc}
 c1059a0:	e24cb004 	sub	fp, ip, #4
 c1059a4:	e24dd008 	sub	sp, sp, #8
	uint8 scan_code,aux= keypad_scan();
 c1059a8:	ebffff30 	bl	c105670 <keypad_scan>
 c1059ac:	e1a03000 	mov	r3, r0
 c1059b0:	e54b300d 	strb	r3, [fp, #-13]
	while((aux) == KEYPAD_FAILURE){
 c1059b4:	ea000002 	b	c1059c4 <keypad_getchar+0x2c>
		aux = keypad_scan();
 c1059b8:	ebffff2c 	bl	c105670 <keypad_scan>
 c1059bc:	e1a03000 	mov	r3, r0
 c1059c0:	e54b300d 	strb	r3, [fp, #-13]
};

uint8 keypad_getchar( void )
{
	uint8 scan_code,aux= keypad_scan();
	while((aux) == KEYPAD_FAILURE){
 c1059c4:	e55b300d 	ldrb	r3, [fp, #-13]
 c1059c8:	e35300ff 	cmp	r3, #255	; 0xff
 c1059cc:	0afffff9 	beq	c1059b8 <keypad_getchar+0x20>
		aux = keypad_scan();
	}
	sw_delay_ms( KEYPAD_KEYDOWN_DELAY );
 c1059d0:	e3a0001e 	mov	r0, #30
 c1059d4:	eb000dde 	bl	c109154 <sw_delay_ms>
	scan_code = aux;
 c1059d8:	e55b300d 	ldrb	r3, [fp, #-13]
 c1059dc:	e54b300e 	strb	r3, [fp, #-14]
	while(keypad_scan() != KEYPAD_FAILURE);
 c1059e0:	e1a00000 	nop			; (mov r0, r0)
 c1059e4:	ebffff21 	bl	c105670 <keypad_scan>
 c1059e8:	e1a03000 	mov	r3, r0
 c1059ec:	e35300ff 	cmp	r3, #255	; 0xff
 c1059f0:	1afffffb 	bne	c1059e4 <keypad_getchar+0x4c>
	sw_delay_ms( KEYPAD_KEYUP_DELAY );
 c1059f4:	e3a00064 	mov	r0, #100	; 0x64
 c1059f8:	eb000dd5 	bl	c109154 <sw_delay_ms>
	return scan_code;
 c1059fc:	e55b300e 	ldrb	r3, [fp, #-14]
}
 c105a00:	e1a00003 	mov	r0, r3
 c105a04:	e24bd00c 	sub	sp, fp, #12
 c105a08:	e89d6800 	ldm	sp, {fp, sp, lr}
 c105a0c:	e12fff1e 	bx	lr

0c105a10 <keypad_getchartime>:

uint8 keypad_getchartime( uint16 *ms )
{
 c105a10:	e1a0c00d 	mov	ip, sp
 c105a14:	e92dd800 	push	{fp, ip, lr, pc}
 c105a18:	e24cb004 	sub	fp, ip, #4
 c105a1c:	e24dd010 	sub	sp, sp, #16
 c105a20:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
	uint8 scancode;

	while( (keypad_scan() == KEYPAD_FAILURE ));
 c105a24:	e1a00000 	nop			; (mov r0, r0)
 c105a28:	ebffff10 	bl	c105670 <keypad_scan>
 c105a2c:	e1a03000 	mov	r3, r0
 c105a30:	e35300ff 	cmp	r3, #255	; 0xff
 c105a34:	0afffffb 	beq	c105a28 <keypad_getchartime+0x18>
	timer3_start();
 c105a38:	eb000e2c 	bl	c1092f0 <timer3_start>
	sw_delay_ms( KEYPAD_KEYDOWN_DELAY );
 c105a3c:	e3a0001e 	mov	r0, #30
 c105a40:	eb000dc3 	bl	c109154 <sw_delay_ms>

	scancode = keypad_scan();
 c105a44:	ebffff09 	bl	c105670 <keypad_scan>
 c105a48:	e1a03000 	mov	r3, r0
 c105a4c:	e54b300d 	strb	r3, [fp, #-13]

	while((keypad_scan() != KEYPAD_FAILURE ));
 c105a50:	e1a00000 	nop			; (mov r0, r0)
 c105a54:	ebffff05 	bl	c105670 <keypad_scan>
 c105a58:	e1a03000 	mov	r3, r0
 c105a5c:	e35300ff 	cmp	r3, #255	; 0xff
 c105a60:	1afffffb 	bne	c105a54 <keypad_getchartime+0x44>
	*ms = timer3_stop() / 10;
 c105a64:	eb000e4d 	bl	c1093a0 <timer3_stop>
 c105a68:	e1a03000 	mov	r3, r0
 c105a6c:	e1a02003 	mov	r2, r3
 c105a70:	e59f3030 	ldr	r3, [pc, #48]	; c105aa8 <keypad_getchartime+0x98>
 c105a74:	e0831392 	umull	r1, r3, r2, r3
 c105a78:	e1a031a3 	lsr	r3, r3, #3
 c105a7c:	e1a03803 	lsl	r3, r3, #16
 c105a80:	e1a02823 	lsr	r2, r3, #16
 c105a84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c105a88:	e1c320b0 	strh	r2, [r3]
	sw_delay_ms( KEYPAD_KEYUP_DELAY );
 c105a8c:	e3a00064 	mov	r0, #100	; 0x64
 c105a90:	eb000daf 	bl	c109154 <sw_delay_ms>

	return scancode;
 c105a94:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c105a98:	e1a00003 	mov	r0, r3
 c105a9c:	e24bd00c 	sub	sp, fp, #12
 c105aa0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c105aa4:	e12fff1e 	bx	lr
 c105aa8:	cccccccd 	.word	0xcccccccd

0c105aac <keypad_timeout_getchar>:

uint8 keypad_timeout_getchar( uint16 ms ) // falla todavia
{
 c105aac:	e1a0c00d 	mov	ip, sp
 c105ab0:	e92dd800 	push	{fp, ip, lr, pc}
 c105ab4:	e24cb004 	sub	fp, ip, #4
 c105ab8:	e24dd010 	sub	sp, sp, #16
 c105abc:	e1a03000 	mov	r3, r0
 c105ac0:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
	uint8 scancode;
	timer3_start_timeout(ms*10);
 c105ac4:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c105ac8:	e1a02003 	mov	r2, r3
 c105acc:	e1a02102 	lsl	r2, r2, #2
 c105ad0:	e0823003 	add	r3, r2, r3
 c105ad4:	e1a03083 	lsl	r3, r3, #1
 c105ad8:	e1a03803 	lsl	r3, r3, #16
 c105adc:	e1a03823 	lsr	r3, r3, #16
 c105ae0:	e1a00003 	mov	r0, r3
 c105ae4:	eb000e42 	bl	c1093f4 <timer3_start_timeout>
	while( (keypad_scan() == KEYPAD_FAILURE )&&  !timer3_timeout());
 c105ae8:	e1a00000 	nop			; (mov r0, r0)
 c105aec:	ebfffedf 	bl	c105670 <keypad_scan>
 c105af0:	e1a03000 	mov	r3, r0
 c105af4:	e35300ff 	cmp	r3, #255	; 0xff
 c105af8:	1a000003 	bne	c105b0c <keypad_timeout_getchar+0x60>
 c105afc:	eb000e6a 	bl	c1094ac <timer3_timeout>
 c105b00:	e1a03000 	mov	r3, r0
 c105b04:	e3530000 	cmp	r3, #0
 c105b08:	0afffff7 	beq	c105aec <keypad_timeout_getchar+0x40>
	sw_delay_ms( PB_KEYDOWN_DELAY );
 c105b0c:	e3a0001e 	mov	r0, #30
 c105b10:	eb000d8f 	bl	c109154 <sw_delay_ms>

	scancode = keypad_scan();
 c105b14:	ebfffed5 	bl	c105670 <keypad_scan>
 c105b18:	e1a03000 	mov	r3, r0
 c105b1c:	e54b300d 	strb	r3, [fp, #-13]

	while((keypad_scan() != KEYPAD_FAILURE )&&  !timer3_timeout());
 c105b20:	e1a00000 	nop			; (mov r0, r0)
 c105b24:	ebfffed1 	bl	c105670 <keypad_scan>
 c105b28:	e1a03000 	mov	r3, r0
 c105b2c:	e35300ff 	cmp	r3, #255	; 0xff
 c105b30:	0a000003 	beq	c105b44 <keypad_timeout_getchar+0x98>
 c105b34:	eb000e5c 	bl	c1094ac <timer3_timeout>
 c105b38:	e1a03000 	mov	r3, r0
 c105b3c:	e3530000 	cmp	r3, #0
 c105b40:	0afffff7 	beq	c105b24 <keypad_timeout_getchar+0x78>
	if( timer3_timeout()) return KEYPAD_TIMEOUT;
 c105b44:	eb000e58 	bl	c1094ac <timer3_timeout>
 c105b48:	e1a03000 	mov	r3, r0
 c105b4c:	e3530000 	cmp	r3, #0
 c105b50:	0a000001 	beq	c105b5c <keypad_timeout_getchar+0xb0>
 c105b54:	e3a030fe 	mov	r3, #254	; 0xfe
 c105b58:	ea000002 	b	c105b68 <keypad_timeout_getchar+0xbc>
	sw_delay_ms( PB_KEYUP_DELAY );
 c105b5c:	e3a00064 	mov	r0, #100	; 0x64
 c105b60:	eb000d7b 	bl	c109154 <sw_delay_ms>

	return scancode;
 c105b64:	e55b300d 	ldrb	r3, [fp, #-13]

}
 c105b68:	e1a00003 	mov	r0, r3
 c105b6c:	e24bd00c 	sub	sp, fp, #12
 c105b70:	e89d6800 	ldm	sp, {fp, sp, lr}
 c105b74:	e12fff1e 	bx	lr

0c105b78 <lcd_init>:
uint8 lcd_buffer[LCD_BUFFER_SIZE];

static uint8 state;

void lcd_init( void )
{
 c105b78:	e1a0c00d 	mov	ip, sp
 c105b7c:	e92dd800 	push	{fp, ip, lr, pc}
 c105b80:	e24cb004 	sub	fp, ip, #4
	LCDCON1 = 0x1C020;
 c105b84:	e3a0361f 	mov	r3, #32505856	; 0x1f00000
 c105b88:	e59f20f8 	ldr	r2, [pc, #248]	; c105c88 <lcd_init+0x110>
 c105b8c:	e5832000 	str	r2, [r3]
	LCDCON2 = 0x13CEF ;
 c105b90:	e59f30f4 	ldr	r3, [pc, #244]	; c105c8c <lcd_init+0x114>
 c105b94:	e59f20f4 	ldr	r2, [pc, #244]	; c105c90 <lcd_init+0x118>
 c105b98:	e5832000 	str	r2, [r3]
	LCDSADDR3 = 0x50;
 c105b9c:	e59f30f0 	ldr	r3, [pc, #240]	; c105c94 <lcd_init+0x11c>
 c105ba0:	e3a02050 	mov	r2, #80	; 0x50
 c105ba4:	e5832000 	str	r2, [r3]
	LCDCON3 = 0x0;
 c105ba8:	e59f30e8 	ldr	r3, [pc, #232]	; c105c98 <lcd_init+0x120>
 c105bac:	e3a02000 	mov	r2, #0
 c105bb0:	e5832000 	str	r2, [r3]
	REDLUT = 0x0;
 c105bb4:	e59f30e0 	ldr	r3, [pc, #224]	; c105c9c <lcd_init+0x124>
 c105bb8:	e3a02000 	mov	r2, #0
 c105bbc:	e5832000 	str	r2, [r3]
	GREENLUT = 0x0;
 c105bc0:	e59f30d8 	ldr	r3, [pc, #216]	; c105ca0 <lcd_init+0x128>
 c105bc4:	e3a02000 	mov	r2, #0
 c105bc8:	e5832000 	str	r2, [r3]
	BLUELUT = 0x0;
 c105bcc:	e59f30d0 	ldr	r3, [pc, #208]	; c105ca4 <lcd_init+0x12c>
 c105bd0:	e3a02000 	mov	r2, #0
 c105bd4:	e5832000 	str	r2, [r3]
	DITHMODE = 0x12210;
 c105bd8:	e59f30c8 	ldr	r3, [pc, #200]	; c105ca8 <lcd_init+0x130>
 c105bdc:	e59f20c8 	ldr	r2, [pc, #200]	; c105cac <lcd_init+0x134>
 c105be0:	e5832000 	str	r2, [r3]
	DP1_2 = 0xA5A5;
 c105be4:	e59f30c4 	ldr	r3, [pc, #196]	; c105cb0 <lcd_init+0x138>
 c105be8:	e59f20c4 	ldr	r2, [pc, #196]	; c105cb4 <lcd_init+0x13c>
 c105bec:	e5832000 	str	r2, [r3]
	DP4_7 = 0xBA5DA65;
 c105bf0:	e59f30c0 	ldr	r3, [pc, #192]	; c105cb8 <lcd_init+0x140>
 c105bf4:	e59f20c0 	ldr	r2, [pc, #192]	; c105cbc <lcd_init+0x144>
 c105bf8:	e5832000 	str	r2, [r3]
	DP3_5 = 0xA5A5F;
 c105bfc:	e59f30bc 	ldr	r3, [pc, #188]	; c105cc0 <lcd_init+0x148>
 c105c00:	e59f20bc 	ldr	r2, [pc, #188]	; c105cc4 <lcd_init+0x14c>
 c105c04:	e5832000 	str	r2, [r3]
	DP2_3 = 0xD6B;
 c105c08:	e59f30b8 	ldr	r3, [pc, #184]	; c105cc8 <lcd_init+0x150>
 c105c0c:	e59f20b8 	ldr	r2, [pc, #184]	; c105ccc <lcd_init+0x154>
 c105c10:	e5832000 	str	r2, [r3]
	DP5_7 = 0xEB7B5ED;
 c105c14:	e59f30b4 	ldr	r3, [pc, #180]	; c105cd0 <lcd_init+0x158>
 c105c18:	e59f20b4 	ldr	r2, [pc, #180]	; c105cd4 <lcd_init+0x15c>
 c105c1c:	e5832000 	str	r2, [r3]
	DP3_4 = 0x7DBE;
 c105c20:	e59f30b0 	ldr	r3, [pc, #176]	; c105cd8 <lcd_init+0x160>
 c105c24:	e59f20b0 	ldr	r2, [pc, #176]	; c105cdc <lcd_init+0x164>
 c105c28:	e5832000 	str	r2, [r3]
	DP4_5 = 0x7EBDF;
 c105c2c:	e59f30ac 	ldr	r3, [pc, #172]	; c105ce0 <lcd_init+0x168>
 c105c30:	e59f20ac 	ldr	r2, [pc, #172]	; c105ce4 <lcd_init+0x16c>
 c105c34:	e5832000 	str	r2, [r3]
	DP6_7 = 0x7FDFBFE;
 c105c38:	e59f30a8 	ldr	r3, [pc, #168]	; c105ce8 <lcd_init+0x170>
 c105c3c:	e59f20a8 	ldr	r2, [pc, #168]	; c105cec <lcd_init+0x174>
 c105c40:	e5832000 	str	r2, [r3]

    LCDSADDR1 = (2 << 27) | ((uint32)lcd_buffer >> 1);
 c105c44:	e59f30a4 	ldr	r3, [pc, #164]	; c105cf0 <lcd_init+0x178>
 c105c48:	e59f20a4 	ldr	r2, [pc, #164]	; c105cf4 <lcd_init+0x17c>
 c105c4c:	e1a020a2 	lsr	r2, r2, #1
 c105c50:	e3822201 	orr	r2, r2, #268435456	; 0x10000000
 c105c54:	e5832000 	str	r2, [r3]
    LCDSADDR2 = (1 << 29) | (((uint32)lcd_buffer + LCD_BUFFER_SIZE) & 0x3FFFFF) >> 1;
 c105c58:	e59f2098 	ldr	r2, [pc, #152]	; c105cf8 <lcd_init+0x180>
 c105c5c:	e59f3090 	ldr	r3, [pc, #144]	; c105cf4 <lcd_init+0x17c>
 c105c60:	e2833c96 	add	r3, r3, #38400	; 0x9600
 c105c64:	e3c334ff 	bic	r3, r3, #-16777216	; 0xff000000
 c105c68:	e3c33503 	bic	r3, r3, #12582912	; 0xc00000
 c105c6c:	e1a030a3 	lsr	r3, r3, #1
 c105c70:	e3833202 	orr	r3, r3, #536870912	; 0x20000000
 c105c74:	e5823000 	str	r3, [r2]
    
    lcd_off();
 c105c78:	eb00002a 	bl	c105d28 <lcd_off>
}
 c105c7c:	e24bd00c 	sub	sp, fp, #12
 c105c80:	e89d6800 	ldm	sp, {fp, sp, lr}
 c105c84:	e12fff1e 	bx	lr
 c105c88:	0001c020 	.word	0x0001c020
 c105c8c:	01f00004 	.word	0x01f00004
 c105c90:	00013cef 	.word	0x00013cef
 c105c94:	01f00010 	.word	0x01f00010
 c105c98:	01f00040 	.word	0x01f00040
 c105c9c:	01f00014 	.word	0x01f00014
 c105ca0:	01f00018 	.word	0x01f00018
 c105ca4:	01f0001c 	.word	0x01f0001c
 c105ca8:	01f00044 	.word	0x01f00044
 c105cac:	00012210 	.word	0x00012210
 c105cb0:	01f00020 	.word	0x01f00020
 c105cb4:	0000a5a5 	.word	0x0000a5a5
 c105cb8:	01f00024 	.word	0x01f00024
 c105cbc:	0ba5da65 	.word	0x0ba5da65
 c105cc0:	01f00028 	.word	0x01f00028
 c105cc4:	000a5a5f 	.word	0x000a5a5f
 c105cc8:	01f0002c 	.word	0x01f0002c
 c105ccc:	00000d6b 	.word	0x00000d6b
 c105cd0:	01f00030 	.word	0x01f00030
 c105cd4:	0eb7b5ed 	.word	0x0eb7b5ed
 c105cd8:	01f00034 	.word	0x01f00034
 c105cdc:	00007dbe 	.word	0x00007dbe
 c105ce0:	01f00038 	.word	0x01f00038
 c105ce4:	0007ebdf 	.word	0x0007ebdf
 c105ce8:	01f0003c 	.word	0x01f0003c
 c105cec:	07fdfbfe 	.word	0x07fdfbfe
 c105cf0:	01f00008 	.word	0x01f00008
 c105cf4:	0c1ab43c 	.word	0x0c1ab43c
 c105cf8:	01f0000c 	.word	0x01f0000c

0c105cfc <lcd_on>:

void lcd_on( void )
{
 c105cfc:	e1a0c00d 	mov	ip, sp
 c105d00:	e92dd800 	push	{fp, ip, lr, pc}
 c105d04:	e24cb004 	sub	fp, ip, #4
	LCDCON1 |= (1<<0);
 c105d08:	e3a0361f 	mov	r3, #32505856	; 0x1f00000
 c105d0c:	e3a0261f 	mov	r2, #32505856	; 0x1f00000
 c105d10:	e5922000 	ldr	r2, [r2]
 c105d14:	e3822001 	orr	r2, r2, #1
 c105d18:	e5832000 	str	r2, [r3]
}
 c105d1c:	e24bd00c 	sub	sp, fp, #12
 c105d20:	e89d6800 	ldm	sp, {fp, sp, lr}
 c105d24:	e12fff1e 	bx	lr

0c105d28 <lcd_off>:

void lcd_off( void )
{
 c105d28:	e1a0c00d 	mov	ip, sp
 c105d2c:	e92dd800 	push	{fp, ip, lr, pc}
 c105d30:	e24cb004 	sub	fp, ip, #4
	LCDCON1 &= ~(1<<0);
 c105d34:	e3a0361f 	mov	r3, #32505856	; 0x1f00000
 c105d38:	e3a0261f 	mov	r2, #32505856	; 0x1f00000
 c105d3c:	e5922000 	ldr	r2, [r2]
 c105d40:	e3c22001 	bic	r2, r2, #1
 c105d44:	e5832000 	str	r2, [r3]
}
 c105d48:	e24bd00c 	sub	sp, fp, #12
 c105d4c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c105d50:	e12fff1e 	bx	lr

0c105d54 <lcd_status>:

uint8 lcd_status( void )
{
 c105d54:	e1a0c00d 	mov	ip, sp
 c105d58:	e92dd800 	push	{fp, ip, lr, pc}
 c105d5c:	e24cb004 	sub	fp, ip, #4
	return (LCDCON1 & 0x00000001);
 c105d60:	e3a0361f 	mov	r3, #32505856	; 0x1f00000
 c105d64:	e5933000 	ldr	r3, [r3]
 c105d68:	e20330ff 	and	r3, r3, #255	; 0xff
 c105d6c:	e2033001 	and	r3, r3, #1
 c105d70:	e20330ff 	and	r3, r3, #255	; 0xff
}
 c105d74:	e1a00003 	mov	r0, r3
 c105d78:	e24bd00c 	sub	sp, fp, #12
 c105d7c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c105d80:	e12fff1e 	bx	lr

0c105d84 <lcd_clear>:

void lcd_clear( void )
{
 c105d84:	e1a0c00d 	mov	ip, sp
 c105d88:	e92dd800 	push	{fp, ip, lr, pc}
 c105d8c:	e24cb004 	sub	fp, ip, #4
 c105d90:	e24dd008 	sub	sp, sp, #8
	uint16 x, ySrc;
	for( ySrc=0; ySrc<LCD_HEIGHT; ySrc++)
 c105d94:	e3a03000 	mov	r3, #0
 c105d98:	e14b31b0 	strh	r3, [fp, #-16]
 c105d9c:	ea000019 	b	c105e08 <lcd_clear+0x84>
	{
		for( x=0; x<LCD_WIDTH/2; x++ )
 c105da0:	e3a03000 	mov	r3, #0
 c105da4:	e14b30be 	strh	r3, [fp, #-14]
 c105da8:	ea000010 	b	c105df0 <lcd_clear+0x6c>
			lcd_buffer[ySrc*320/2 + x] = WHITE;
 c105dac:	e15b21b0 	ldrh	r2, [fp, #-16]
 c105db0:	e1a03002 	mov	r3, r2
 c105db4:	e1a03103 	lsl	r3, r3, #2
 c105db8:	e0833002 	add	r3, r3, r2
 c105dbc:	e1a03303 	lsl	r3, r3, #6
 c105dc0:	e1a02fa3 	lsr	r2, r3, #31
 c105dc4:	e0823003 	add	r3, r2, r3
 c105dc8:	e1a030c3 	asr	r3, r3, #1
 c105dcc:	e1a02003 	mov	r2, r3
 c105dd0:	e15b30be 	ldrh	r3, [fp, #-14]
 c105dd4:	e0823003 	add	r3, r2, r3
 c105dd8:	e59f2040 	ldr	r2, [pc, #64]	; c105e20 <lcd_clear+0x9c>
 c105ddc:	e3a01000 	mov	r1, #0
 c105de0:	e7c21003 	strb	r1, [r2, r3]
void lcd_clear( void )
{
	uint16 x, ySrc;
	for( ySrc=0; ySrc<LCD_HEIGHT; ySrc++)
	{
		for( x=0; x<LCD_WIDTH/2; x++ )
 c105de4:	e15b30be 	ldrh	r3, [fp, #-14]
 c105de8:	e2833001 	add	r3, r3, #1
 c105dec:	e14b30be 	strh	r3, [fp, #-14]
 c105df0:	e15b30be 	ldrh	r3, [fp, #-14]
 c105df4:	e353009f 	cmp	r3, #159	; 0x9f
 c105df8:	9affffeb 	bls	c105dac <lcd_clear+0x28>
}

void lcd_clear( void )
{
	uint16 x, ySrc;
	for( ySrc=0; ySrc<LCD_HEIGHT; ySrc++)
 c105dfc:	e15b31b0 	ldrh	r3, [fp, #-16]
 c105e00:	e2833001 	add	r3, r3, #1
 c105e04:	e14b31b0 	strh	r3, [fp, #-16]
 c105e08:	e15b31b0 	ldrh	r3, [fp, #-16]
 c105e0c:	e35300ef 	cmp	r3, #239	; 0xef
 c105e10:	9affffe2 	bls	c105da0 <lcd_clear+0x1c>
	{
		for( x=0; x<LCD_WIDTH/2; x++ )
			lcd_buffer[ySrc*320/2 + x] = WHITE;
	}
}
 c105e14:	e24bd00c 	sub	sp, fp, #12
 c105e18:	e89d6800 	ldm	sp, {fp, sp, lr}
 c105e1c:	e12fff1e 	bx	lr
 c105e20:	0c1ab43c 	.word	0x0c1ab43c

0c105e24 <lcd_clear_area>:
void lcd_clear_area(uint16 x1, uint16 y1, uint16 x2, uint16 y2)
{
 c105e24:	e1a0c00d 	mov	ip, sp
 c105e28:	e92dd800 	push	{fp, ip, lr, pc}
 c105e2c:	e24cb004 	sub	fp, ip, #4
 c105e30:	e24dd010 	sub	sp, sp, #16
 c105e34:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c105e38:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c105e3c:	e14b21ba 	strh	r2, [fp, #-26]	; 0xffffffe6
 c105e40:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
	uint16 x, ySrc;
	for( ySrc=y1; ySrc<y2; ySrc++)
 c105e44:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c105e48:	e14b31b0 	strh	r3, [fp, #-16]
 c105e4c:	ea00001a 	b	c105ebc <lcd_clear_area+0x98>
	{
		for( x=x1; x<x2; x++ )
 c105e50:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c105e54:	e14b30be 	strh	r3, [fp, #-14]
 c105e58:	ea000010 	b	c105ea0 <lcd_clear_area+0x7c>
			lcd_buffer[ySrc*320/2  + x] = WHITE;
 c105e5c:	e15b21b0 	ldrh	r2, [fp, #-16]
 c105e60:	e1a03002 	mov	r3, r2
 c105e64:	e1a03103 	lsl	r3, r3, #2
 c105e68:	e0833002 	add	r3, r3, r2
 c105e6c:	e1a03303 	lsl	r3, r3, #6
 c105e70:	e1a02fa3 	lsr	r2, r3, #31
 c105e74:	e0823003 	add	r3, r2, r3
 c105e78:	e1a030c3 	asr	r3, r3, #1
 c105e7c:	e1a02003 	mov	r2, r3
 c105e80:	e15b30be 	ldrh	r3, [fp, #-14]
 c105e84:	e0823003 	add	r3, r2, r3
 c105e88:	e59f2048 	ldr	r2, [pc, #72]	; c105ed8 <lcd_clear_area+0xb4>
 c105e8c:	e3a01000 	mov	r1, #0
 c105e90:	e7c21003 	strb	r1, [r2, r3]
void lcd_clear_area(uint16 x1, uint16 y1, uint16 x2, uint16 y2)
{
	uint16 x, ySrc;
	for( ySrc=y1; ySrc<y2; ySrc++)
	{
		for( x=x1; x<x2; x++ )
 c105e94:	e15b30be 	ldrh	r3, [fp, #-14]
 c105e98:	e2833001 	add	r3, r3, #1
 c105e9c:	e14b30be 	strh	r3, [fp, #-14]
 c105ea0:	e15b20be 	ldrh	r2, [fp, #-14]
 c105ea4:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c105ea8:	e1520003 	cmp	r2, r3
 c105eac:	3affffea 	bcc	c105e5c <lcd_clear_area+0x38>
	}
}
void lcd_clear_area(uint16 x1, uint16 y1, uint16 x2, uint16 y2)
{
	uint16 x, ySrc;
	for( ySrc=y1; ySrc<y2; ySrc++)
 c105eb0:	e15b31b0 	ldrh	r3, [fp, #-16]
 c105eb4:	e2833001 	add	r3, r3, #1
 c105eb8:	e14b31b0 	strh	r3, [fp, #-16]
 c105ebc:	e15b21b0 	ldrh	r2, [fp, #-16]
 c105ec0:	e15b31bc 	ldrh	r3, [fp, #-28]	; 0xffffffe4
 c105ec4:	e1520003 	cmp	r2, r3
 c105ec8:	3affffe0 	bcc	c105e50 <lcd_clear_area+0x2c>
	{
		for( x=x1; x<x2; x++ )
			lcd_buffer[ySrc*320/2  + x] = WHITE;
	}
}
 c105ecc:	e24bd00c 	sub	sp, fp, #12
 c105ed0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c105ed4:	e12fff1e 	bx	lr
 c105ed8:	0c1ab43c 	.word	0x0c1ab43c

0c105edc <lcd_putpixel>:


void lcd_putpixel( uint16 x, uint16 y, uint8 c)
{
 c105edc:	e1a0c00d 	mov	ip, sp
 c105ee0:	e92dd800 	push	{fp, ip, lr, pc}
 c105ee4:	e24cb004 	sub	fp, ip, #4
 c105ee8:	e24dd010 	sub	sp, sp, #16
 c105eec:	e1a03002 	mov	r3, r2
 c105ef0:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c105ef4:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c105ef8:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    uint8 byte, bit;
    uint16 i;

    i = x/2 + y*(LCD_WIDTH/2);
 c105efc:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c105f00:	e1a030a3 	lsr	r3, r3, #1
 c105f04:	e1a03803 	lsl	r3, r3, #16
 c105f08:	e1a02823 	lsr	r2, r3, #16
 c105f0c:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c105f10:	e1a01003 	mov	r1, r3
 c105f14:	e1a01101 	lsl	r1, r1, #2
 c105f18:	e0813003 	add	r3, r1, r3
 c105f1c:	e1a03283 	lsl	r3, r3, #5
 c105f20:	e1a03803 	lsl	r3, r3, #16
 c105f24:	e1a03823 	lsr	r3, r3, #16
 c105f28:	e0823003 	add	r3, r2, r3
 c105f2c:	e14b30be 	strh	r3, [fp, #-14]
    bit = (1-x%2)*4;
 c105f30:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c105f34:	e2033001 	and	r3, r3, #1
 c105f38:	e3530000 	cmp	r3, #0
 c105f3c:	1a000001 	bne	c105f48 <lcd_putpixel+0x6c>
 c105f40:	e3a03004 	mov	r3, #4
 c105f44:	ea000000 	b	c105f4c <lcd_putpixel+0x70>
 c105f48:	e3a03000 	mov	r3, #0
 c105f4c:	e54b300f 	strb	r3, [fp, #-15]
    
    byte = lcd_buffer[i];
 c105f50:	e15b30be 	ldrh	r3, [fp, #-14]
 c105f54:	e59f2068 	ldr	r2, [pc, #104]	; c105fc4 <lcd_putpixel+0xe8>
 c105f58:	e7d23003 	ldrb	r3, [r2, r3]
 c105f5c:	e54b3010 	strb	r3, [fp, #-16]
    byte &= ~(0xF << bit);
 c105f60:	e55b300f 	ldrb	r3, [fp, #-15]
 c105f64:	e3a0200f 	mov	r2, #15
 c105f68:	e1a03312 	lsl	r3, r2, r3
 c105f6c:	e20330ff 	and	r3, r3, #255	; 0xff
 c105f70:	e1e03003 	mvn	r3, r3
 c105f74:	e20320ff 	and	r2, r3, #255	; 0xff
 c105f78:	e55b3010 	ldrb	r3, [fp, #-16]
 c105f7c:	e0023003 	and	r3, r2, r3
 c105f80:	e20330ff 	and	r3, r3, #255	; 0xff
 c105f84:	e54b3010 	strb	r3, [fp, #-16]
    byte |= c << bit;
 c105f88:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
 c105f8c:	e55b300f 	ldrb	r3, [fp, #-15]
 c105f90:	e1a03312 	lsl	r3, r2, r3
 c105f94:	e20320ff 	and	r2, r3, #255	; 0xff
 c105f98:	e55b3010 	ldrb	r3, [fp, #-16]
 c105f9c:	e1823003 	orr	r3, r2, r3
 c105fa0:	e20330ff 	and	r3, r3, #255	; 0xff
 c105fa4:	e54b3010 	strb	r3, [fp, #-16]
    lcd_buffer[i] = byte;
 c105fa8:	e15b30be 	ldrh	r3, [fp, #-14]
 c105fac:	e59f2010 	ldr	r2, [pc, #16]	; c105fc4 <lcd_putpixel+0xe8>
 c105fb0:	e55b1010 	ldrb	r1, [fp, #-16]
 c105fb4:	e7c21003 	strb	r1, [r2, r3]
}
 c105fb8:	e24bd00c 	sub	sp, fp, #12
 c105fbc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c105fc0:	e12fff1e 	bx	lr
 c105fc4:	0c1ab43c 	.word	0x0c1ab43c

0c105fc8 <lcd_getpixel>:

uint8 lcd_getpixel( uint16 x, uint16 y )
{
 c105fc8:	e1a0c00d 	mov	ip, sp
 c105fcc:	e92dd800 	push	{fp, ip, lr, pc}
 c105fd0:	e24cb004 	sub	fp, ip, #4
 c105fd4:	e24dd008 	sub	sp, sp, #8
 c105fd8:	e1a02000 	mov	r2, r0
 c105fdc:	e1a03001 	mov	r3, r1
 c105fe0:	e14b20be 	strh	r2, [fp, #-14]
 c105fe4:	e14b31b0 	strh	r3, [fp, #-16]
	return lcd_buffer[y*320/2 + x/2];
 c105fe8:	e15b21b0 	ldrh	r2, [fp, #-16]
 c105fec:	e1a03002 	mov	r3, r2
 c105ff0:	e1a03103 	lsl	r3, r3, #2
 c105ff4:	e0833002 	add	r3, r3, r2
 c105ff8:	e1a03303 	lsl	r3, r3, #6
 c105ffc:	e1a02fa3 	lsr	r2, r3, #31
 c106000:	e0823003 	add	r3, r2, r3
 c106004:	e1a030c3 	asr	r3, r3, #1
 c106008:	e1a02003 	mov	r2, r3
 c10600c:	e15b30be 	ldrh	r3, [fp, #-14]
 c106010:	e1a030a3 	lsr	r3, r3, #1
 c106014:	e1a03803 	lsl	r3, r3, #16
 c106018:	e1a03823 	lsr	r3, r3, #16
 c10601c:	e0823003 	add	r3, r2, r3
 c106020:	e59f2010 	ldr	r2, [pc, #16]	; c106038 <lcd_getpixel+0x70>
 c106024:	e7d23003 	ldrb	r3, [r2, r3]
}
 c106028:	e1a00003 	mov	r0, r3
 c10602c:	e24bd00c 	sub	sp, fp, #12
 c106030:	e89d6800 	ldm	sp, {fp, sp, lr}
 c106034:	e12fff1e 	bx	lr
 c106038:	0c1ab43c 	.word	0x0c1ab43c

0c10603c <lcd_draw_hrow>:

void lcd_draw_hrow( uint16 xleft, uint16 xright, uint16 y, uint8 color, uint16 width )
{
 c10603c:	e1a0c00d 	mov	ip, sp
 c106040:	e92dd800 	push	{fp, ip, lr, pc}
 c106044:	e24cb004 	sub	fp, ip, #4
 c106048:	e24dd010 	sub	sp, sp, #16
 c10604c:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c106050:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c106054:	e14b21ba 	strh	r2, [fp, #-26]	; 0xffffffe6
 c106058:	e54b301b 	strb	r3, [fp, #-27]	; 0xffffffe5

	uint16 x, ySrc;
	for( ySrc=0; ySrc<width; ySrc++)
 c10605c:	e3a03000 	mov	r3, #0
 c106060:	e14b31b0 	strh	r3, [fp, #-16]
 c106064:	ea000017 	b	c1060c8 <lcd_draw_hrow+0x8c>
	{
		for( x=xleft; x<xright; x++ )
 c106068:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c10606c:	e14b30be 	strh	r3, [fp, #-14]
 c106070:	ea00000d 	b	c1060ac <lcd_draw_hrow+0x70>
			lcd_putpixel(x, y + ySrc, color);
 c106074:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
 c106078:	e15b31b0 	ldrh	r3, [fp, #-16]
 c10607c:	e0823003 	add	r3, r2, r3
 c106080:	e1a03803 	lsl	r3, r3, #16
 c106084:	e1a02823 	lsr	r2, r3, #16
 c106088:	e15b10be 	ldrh	r1, [fp, #-14]
 c10608c:	e55b301b 	ldrb	r3, [fp, #-27]	; 0xffffffe5
 c106090:	e1a00001 	mov	r0, r1
 c106094:	e1a01002 	mov	r1, r2
 c106098:	e1a02003 	mov	r2, r3
 c10609c:	ebffff8e 	bl	c105edc <lcd_putpixel>
{

	uint16 x, ySrc;
	for( ySrc=0; ySrc<width; ySrc++)
	{
		for( x=xleft; x<xright; x++ )
 c1060a0:	e15b30be 	ldrh	r3, [fp, #-14]
 c1060a4:	e2833001 	add	r3, r3, #1
 c1060a8:	e14b30be 	strh	r3, [fp, #-14]
 c1060ac:	e15b20be 	ldrh	r2, [fp, #-14]
 c1060b0:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c1060b4:	e1520003 	cmp	r2, r3
 c1060b8:	3affffed 	bcc	c106074 <lcd_draw_hrow+0x38>

void lcd_draw_hrow( uint16 xleft, uint16 xright, uint16 y, uint8 color, uint16 width )
{

	uint16 x, ySrc;
	for( ySrc=0; ySrc<width; ySrc++)
 c1060bc:	e15b31b0 	ldrh	r3, [fp, #-16]
 c1060c0:	e2833001 	add	r3, r3, #1
 c1060c4:	e14b31b0 	strh	r3, [fp, #-16]
 c1060c8:	e15b21b0 	ldrh	r2, [fp, #-16]
 c1060cc:	e1db30b4 	ldrh	r3, [fp, #4]
 c1060d0:	e1520003 	cmp	r2, r3
 c1060d4:	3affffe3 	bcc	c106068 <lcd_draw_hrow+0x2c>
	{
		for( x=xleft; x<xright; x++ )
			lcd_putpixel(x, y + ySrc, color);
	}
}
 c1060d8:	e24bd00c 	sub	sp, fp, #12
 c1060dc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1060e0:	e12fff1e 	bx	lr

0c1060e4 <lcd_draw_vrow>:

void lcd_draw_vrow( uint16 yup, uint16 ydown, uint16 x, uint8 color, uint16 width )
{
 c1060e4:	e1a0c00d 	mov	ip, sp
 c1060e8:	e92dd800 	push	{fp, ip, lr, pc}
 c1060ec:	e24cb004 	sub	fp, ip, #4
 c1060f0:	e24dd010 	sub	sp, sp, #16
 c1060f4:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c1060f8:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c1060fc:	e14b21ba 	strh	r2, [fp, #-26]	; 0xffffffe6
 c106100:	e54b301b 	strb	r3, [fp, #-27]	; 0xffffffe5
	uint16 s, xSrc;
		for( s=yup; s<ydown; s++ )
 c106104:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c106108:	e14b30be 	strh	r3, [fp, #-14]
 c10610c:	ea000017 	b	c106170 <lcd_draw_vrow+0x8c>
		{
			for( xSrc=0; xSrc<width; xSrc++)
 c106110:	e3a03000 	mov	r3, #0
 c106114:	e14b31b0 	strh	r3, [fp, #-16]
 c106118:	ea00000d 	b	c106154 <lcd_draw_vrow+0x70>
				lcd_putpixel(x + xSrc,s,color);
 c10611c:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
 c106120:	e15b31b0 	ldrh	r3, [fp, #-16]
 c106124:	e0823003 	add	r3, r2, r3
 c106128:	e1a03803 	lsl	r3, r3, #16
 c10612c:	e1a01823 	lsr	r1, r3, #16
 c106130:	e15b20be 	ldrh	r2, [fp, #-14]
 c106134:	e55b301b 	ldrb	r3, [fp, #-27]	; 0xffffffe5
 c106138:	e1a00001 	mov	r0, r1
 c10613c:	e1a01002 	mov	r1, r2
 c106140:	e1a02003 	mov	r2, r3
 c106144:	ebffff64 	bl	c105edc <lcd_putpixel>
void lcd_draw_vrow( uint16 yup, uint16 ydown, uint16 x, uint8 color, uint16 width )
{
	uint16 s, xSrc;
		for( s=yup; s<ydown; s++ )
		{
			for( xSrc=0; xSrc<width; xSrc++)
 c106148:	e15b31b0 	ldrh	r3, [fp, #-16]
 c10614c:	e2833001 	add	r3, r3, #1
 c106150:	e14b31b0 	strh	r3, [fp, #-16]
 c106154:	e15b21b0 	ldrh	r2, [fp, #-16]
 c106158:	e1db30b4 	ldrh	r3, [fp, #4]
 c10615c:	e1520003 	cmp	r2, r3
 c106160:	3affffed 	bcc	c10611c <lcd_draw_vrow+0x38>
}

void lcd_draw_vrow( uint16 yup, uint16 ydown, uint16 x, uint8 color, uint16 width )
{
	uint16 s, xSrc;
		for( s=yup; s<ydown; s++ )
 c106164:	e15b30be 	ldrh	r3, [fp, #-14]
 c106168:	e2833001 	add	r3, r3, #1
 c10616c:	e14b30be 	strh	r3, [fp, #-14]
 c106170:	e15b20be 	ldrh	r2, [fp, #-14]
 c106174:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c106178:	e1520003 	cmp	r2, r3
 c10617c:	3affffe3 	bcc	c106110 <lcd_draw_vrow+0x2c>
		{
			for( xSrc=0; xSrc<width; xSrc++)
				lcd_putpixel(x + xSrc,s,color);
		}
}
 c106180:	e24bd00c 	sub	sp, fp, #12
 c106184:	e89d6800 	ldm	sp, {fp, sp, lr}
 c106188:	e12fff1e 	bx	lr

0c10618c <lcd_draw_box>:

void lcd_draw_box( uint16 xleft, uint16 yup, uint16 xright, uint16 ydown, uint8 color, uint16 width )
{
 c10618c:	e1a0c00d 	mov	ip, sp
 c106190:	e92dd800 	push	{fp, ip, lr, pc}
 c106194:	e24cb004 	sub	fp, ip, #4
 c106198:	e24dd010 	sub	sp, sp, #16
 c10619c:	e14b00be 	strh	r0, [fp, #-14]
 c1061a0:	e14b11b0 	strh	r1, [fp, #-16]
 c1061a4:	e14b21b2 	strh	r2, [fp, #-18]	; 0xffffffee
 c1061a8:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
	lcd_draw_hrow(xleft, xright, yup, color, width);
 c1061ac:	e15b00be 	ldrh	r0, [fp, #-14]
 c1061b0:	e15b11b2 	ldrh	r1, [fp, #-18]	; 0xffffffee
 c1061b4:	e15b21b0 	ldrh	r2, [fp, #-16]
 c1061b8:	e5db3004 	ldrb	r3, [fp, #4]
 c1061bc:	e1dbc0b8 	ldrh	ip, [fp, #8]
 c1061c0:	e58dc000 	str	ip, [sp]
 c1061c4:	ebffff9c 	bl	c10603c <lcd_draw_hrow>
	lcd_draw_vrow(yup, ydown, xleft, color, width);
 c1061c8:	e15b01b0 	ldrh	r0, [fp, #-16]
 c1061cc:	e15b11b4 	ldrh	r1, [fp, #-20]	; 0xffffffec
 c1061d0:	e15b20be 	ldrh	r2, [fp, #-14]
 c1061d4:	e5db3004 	ldrb	r3, [fp, #4]
 c1061d8:	e1dbc0b8 	ldrh	ip, [fp, #8]
 c1061dc:	e58dc000 	str	ip, [sp]
 c1061e0:	ebffffbf 	bl	c1060e4 <lcd_draw_vrow>
	lcd_draw_hrow(xleft, xright, ydown - width, color, width);
 c1061e4:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
 c1061e8:	e1db30b8 	ldrh	r3, [fp, #8]
 c1061ec:	e0633002 	rsb	r3, r3, r2
 c1061f0:	e1a03803 	lsl	r3, r3, #16
 c1061f4:	e1a02823 	lsr	r2, r3, #16
 c1061f8:	e15b00be 	ldrh	r0, [fp, #-14]
 c1061fc:	e15b11b2 	ldrh	r1, [fp, #-18]	; 0xffffffee
 c106200:	e5db3004 	ldrb	r3, [fp, #4]
 c106204:	e1dbc0b8 	ldrh	ip, [fp, #8]
 c106208:	e58dc000 	str	ip, [sp]
 c10620c:	ebffff8a 	bl	c10603c <lcd_draw_hrow>
	lcd_draw_vrow(yup, ydown, xright - width, color, width);
 c106210:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c106214:	e1db30b8 	ldrh	r3, [fp, #8]
 c106218:	e0633002 	rsb	r3, r3, r2
 c10621c:	e1a03803 	lsl	r3, r3, #16
 c106220:	e1a02823 	lsr	r2, r3, #16
 c106224:	e15b01b0 	ldrh	r0, [fp, #-16]
 c106228:	e15b11b4 	ldrh	r1, [fp, #-20]	; 0xffffffec
 c10622c:	e5db3004 	ldrb	r3, [fp, #4]
 c106230:	e1dbc0b8 	ldrh	ip, [fp, #8]
 c106234:	e58dc000 	str	ip, [sp]
 c106238:	ebffffa9 	bl	c1060e4 <lcd_draw_vrow>

}
 c10623c:	e24bd00c 	sub	sp, fp, #12
 c106240:	e89d6800 	ldm	sp, {fp, sp, lr}
 c106244:	e12fff1e 	bx	lr

0c106248 <lcd_putchar>:

void lcd_putchar( uint16 x, uint16 y, uint8 color, char ch )
{
 c106248:	e1a0c00d 	mov	ip, sp
 c10624c:	e92dd800 	push	{fp, ip, lr, pc}
 c106250:	e24cb004 	sub	fp, ip, #4
 c106254:	e24dd010 	sub	sp, sp, #16
 c106258:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c10625c:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c106260:	e54b2019 	strb	r2, [fp, #-25]	; 0xffffffe7
 c106264:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
    uint8 row, col;
    uint8 *bitmap;

    bitmap = font + ch*16;
 c106268:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
 c10626c:	e1a03203 	lsl	r3, r3, #4
 c106270:	e1a02003 	mov	r2, r3
 c106274:	e59f311c 	ldr	r3, [pc, #284]	; c106398 <lcd_putchar+0x150>
 c106278:	e0823003 	add	r3, r2, r3
 c10627c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for( row=0; row<16; row++ )
 c106280:	e3a03000 	mov	r3, #0
 c106284:	e54b300d 	strb	r3, [fp, #-13]
 c106288:	ea00003c 	b	c106380 <lcd_putchar+0x138>
        for( col=0; col<8; col++ )                    
 c10628c:	e3a03000 	mov	r3, #0
 c106290:	e54b300e 	strb	r3, [fp, #-14]
 c106294:	ea000033 	b	c106368 <lcd_putchar+0x120>
            if( bitmap[row] & (0x80 >> col) )
 c106298:	e55b300d 	ldrb	r3, [fp, #-13]
 c10629c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c1062a0:	e0823003 	add	r3, r2, r3
 c1062a4:	e5d33000 	ldrb	r3, [r3]
 c1062a8:	e1a02003 	mov	r2, r3
 c1062ac:	e55b300e 	ldrb	r3, [fp, #-14]
 c1062b0:	e3a01080 	mov	r1, #128	; 0x80
 c1062b4:	e1a03351 	asr	r3, r1, r3
 c1062b8:	e0023003 	and	r3, r2, r3
 c1062bc:	e3530000 	cmp	r3, #0
 c1062c0:	0a000013 	beq	c106314 <lcd_putchar+0xcc>
                lcd_putpixel( x+col, y+row, color );
 c1062c4:	e55b300e 	ldrb	r3, [fp, #-14]
 c1062c8:	e1a03803 	lsl	r3, r3, #16
 c1062cc:	e1a02823 	lsr	r2, r3, #16
 c1062d0:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1062d4:	e0823003 	add	r3, r2, r3
 c1062d8:	e1a03803 	lsl	r3, r3, #16
 c1062dc:	e1a01823 	lsr	r1, r3, #16
 c1062e0:	e55b300d 	ldrb	r3, [fp, #-13]
 c1062e4:	e1a03803 	lsl	r3, r3, #16
 c1062e8:	e1a02823 	lsr	r2, r3, #16
 c1062ec:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c1062f0:	e0823003 	add	r3, r2, r3
 c1062f4:	e1a03803 	lsl	r3, r3, #16
 c1062f8:	e1a02823 	lsr	r2, r3, #16
 c1062fc:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c106300:	e1a00001 	mov	r0, r1
 c106304:	e1a01002 	mov	r1, r2
 c106308:	e1a02003 	mov	r2, r3
 c10630c:	ebfffef2 	bl	c105edc <lcd_putpixel>
 c106310:	ea000011 	b	c10635c <lcd_putchar+0x114>
            else
                lcd_putpixel( x+col, y+row, WHITE );
 c106314:	e55b300e 	ldrb	r3, [fp, #-14]
 c106318:	e1a03803 	lsl	r3, r3, #16
 c10631c:	e1a02823 	lsr	r2, r3, #16
 c106320:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c106324:	e0823003 	add	r3, r2, r3
 c106328:	e1a03803 	lsl	r3, r3, #16
 c10632c:	e1a02823 	lsr	r2, r3, #16
 c106330:	e55b300d 	ldrb	r3, [fp, #-13]
 c106334:	e1a03803 	lsl	r3, r3, #16
 c106338:	e1a01823 	lsr	r1, r3, #16
 c10633c:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c106340:	e0813003 	add	r3, r1, r3
 c106344:	e1a03803 	lsl	r3, r3, #16
 c106348:	e1a03823 	lsr	r3, r3, #16
 c10634c:	e1a00002 	mov	r0, r2
 c106350:	e1a01003 	mov	r1, r3
 c106354:	e3a02000 	mov	r2, #0
 c106358:	ebfffedf 	bl	c105edc <lcd_putpixel>
    uint8 row, col;
    uint8 *bitmap;

    bitmap = font + ch*16;
    for( row=0; row<16; row++ )
        for( col=0; col<8; col++ )                    
 c10635c:	e55b300e 	ldrb	r3, [fp, #-14]
 c106360:	e2833001 	add	r3, r3, #1
 c106364:	e54b300e 	strb	r3, [fp, #-14]
 c106368:	e55b300e 	ldrb	r3, [fp, #-14]
 c10636c:	e3530007 	cmp	r3, #7
 c106370:	9affffc8 	bls	c106298 <lcd_putchar+0x50>
{
    uint8 row, col;
    uint8 *bitmap;

    bitmap = font + ch*16;
    for( row=0; row<16; row++ )
 c106374:	e55b300d 	ldrb	r3, [fp, #-13]
 c106378:	e2833001 	add	r3, r3, #1
 c10637c:	e54b300d 	strb	r3, [fp, #-13]
 c106380:	e55b300d 	ldrb	r3, [fp, #-13]
 c106384:	e353000f 	cmp	r3, #15
 c106388:	9affffbf 	bls	c10628c <lcd_putchar+0x44>
        for( col=0; col<8; col++ )                    
            if( bitmap[row] & (0x80 >> col) )
                lcd_putpixel( x+col, y+row, color );
            else
                lcd_putpixel( x+col, y+row, WHITE );
}
 c10638c:	e24bd00c 	sub	sp, fp, #12
 c106390:	e89d6800 	ldm	sp, {fp, sp, lr}
 c106394:	e12fff1e 	bx	lr
 c106398:	0c10d5b8 	.word	0x0c10d5b8

0c10639c <lcd_puts>:

void lcd_puts( uint16 x, uint16 y, uint8 color, char *s )
{
 c10639c:	e1a0c00d 	mov	ip, sp
 c1063a0:	e92dd800 	push	{fp, ip, lr, pc}
 c1063a4:	e24cb004 	sub	fp, ip, #4
 c1063a8:	e24dd018 	sub	sp, sp, #24
 c1063ac:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 c1063b0:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c1063b4:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c1063b8:	e1a03002 	mov	r3, r2
 c1063bc:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
	uint8 i = 0;
 c1063c0:	e3a03000 	mov	r3, #0
 c1063c4:	e54b300d 	strb	r3, [fp, #-13]
	uint8 j = 0;
 c1063c8:	e3a03000 	mov	r3, #0
 c1063cc:	e54b300e 	strb	r3, [fp, #-14]
	while(*s != '\0'){
 c1063d0:	ea000028 	b	c106478 <lcd_puts+0xdc>
		lcd_putchar(x + (i * 8), y + (j * 16), color, *s++);
 c1063d4:	e55b300d 	ldrb	r3, [fp, #-13]
 c1063d8:	e1a03803 	lsl	r3, r3, #16
 c1063dc:	e1a03823 	lsr	r3, r3, #16
 c1063e0:	e1a03183 	lsl	r3, r3, #3
 c1063e4:	e1a03803 	lsl	r3, r3, #16
 c1063e8:	e1a02823 	lsr	r2, r3, #16
 c1063ec:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1063f0:	e0823003 	add	r3, r2, r3
 c1063f4:	e1a03803 	lsl	r3, r3, #16
 c1063f8:	e1a00823 	lsr	r0, r3, #16
 c1063fc:	e55b300e 	ldrb	r3, [fp, #-14]
 c106400:	e1a03803 	lsl	r3, r3, #16
 c106404:	e1a03823 	lsr	r3, r3, #16
 c106408:	e1a03203 	lsl	r3, r3, #4
 c10640c:	e1a03803 	lsl	r3, r3, #16
 c106410:	e1a02823 	lsr	r2, r3, #16
 c106414:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c106418:	e0823003 	add	r3, r2, r3
 c10641c:	e1a03803 	lsl	r3, r3, #16
 c106420:	e1a01823 	lsr	r1, r3, #16
 c106424:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c106428:	e5d33000 	ldrb	r3, [r3]
 c10642c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c106430:	e2822001 	add	r2, r2, #1
 c106434:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
 c106438:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
 c10643c:	ebffff81 	bl	c106248 <lcd_putchar>
		i++;
 c106440:	e55b300d 	ldrb	r3, [fp, #-13]
 c106444:	e2833001 	add	r3, r3, #1
 c106448:	e54b300d 	strb	r3, [fp, #-13]
		if(x + (i * 8) == LCD_WIDTH){
 c10644c:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
 c106450:	e55b300d 	ldrb	r3, [fp, #-13]
 c106454:	e1a03183 	lsl	r3, r3, #3
 c106458:	e0823003 	add	r3, r2, r3
 c10645c:	e3530d05 	cmp	r3, #320	; 0x140
 c106460:	1a000004 	bne	c106478 <lcd_puts+0xdc>
			i = 0;
 c106464:	e3a03000 	mov	r3, #0
 c106468:	e54b300d 	strb	r3, [fp, #-13]
			j++;
 c10646c:	e55b300e 	ldrb	r3, [fp, #-14]
 c106470:	e2833001 	add	r3, r3, #1
 c106474:	e54b300e 	strb	r3, [fp, #-14]

void lcd_puts( uint16 x, uint16 y, uint8 color, char *s )
{
	uint8 i = 0;
	uint8 j = 0;
	while(*s != '\0'){
 c106478:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10647c:	e5d33000 	ldrb	r3, [r3]
 c106480:	e3530000 	cmp	r3, #0
 c106484:	1affffd2 	bne	c1063d4 <lcd_puts+0x38>
			i = 0;
			j++;
		}

	}
}
 c106488:	e24bd00c 	sub	sp, fp, #12
 c10648c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c106490:	e12fff1e 	bx	lr

0c106494 <lcd_putint>:

void lcd_putint( uint16 x, uint16 y, uint8 color, int32 i )
{
 c106494:	e1a0c00d 	mov	ip, sp
 c106498:	e92dd800 	push	{fp, ip, lr, pc}
 c10649c:	e24cb004 	sub	fp, ip, #4
 c1064a0:	e24dde12 	sub	sp, sp, #288	; 0x120
 c1064a4:	e50b3128 	str	r3, [fp, #-296]	; 0xfffffed8
 c1064a8:	e59f3134 	ldr	r3, [pc, #308]	; c1065e4 <lcd_putint+0x150>
 c1064ac:	e24bc00c 	sub	ip, fp, #12
 c1064b0:	e18c00b3 	strh	r0, [ip, r3]
 c1064b4:	e59f312c 	ldr	r3, [pc, #300]	; c1065e8 <lcd_putint+0x154>
 c1064b8:	e24b000c 	sub	r0, fp, #12
 c1064bc:	e18010b3 	strh	r1, [r0, r3]
 c1064c0:	e1a03002 	mov	r3, r2
 c1064c4:	e54b3121 	strb	r3, [fp, #-289]	; 0xfffffedf
	boolean negativo = 0;
 c1064c8:	e3a03000 	mov	r3, #0
 c1064cc:	e54b300d 	strb	r3, [fp, #-13]
	char buf[256 + 1];
	char *p = buf + 256;
 c1064d0:	e24b3f46 	sub	r3, fp, #280	; 0x118
 c1064d4:	e2833c01 	add	r3, r3, #256	; 0x100
 c1064d8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	uint8 c;

	*p = '\0';
 c1064dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1064e0:	e3a02000 	mov	r2, #0
 c1064e4:	e5c32000 	strb	r2, [r3]
	if(i<0){
 c1064e8:	e51b3128 	ldr	r3, [fp, #-296]	; 0xfffffed8
 c1064ec:	e3530000 	cmp	r3, #0
 c1064f0:	aa000004 	bge	c106508 <lcd_putint+0x74>
		negativo = 1;
 c1064f4:	e3a03001 	mov	r3, #1
 c1064f8:	e54b300d 	strb	r3, [fp, #-13]
		i*=-1;
 c1064fc:	e51b3128 	ldr	r3, [fp, #-296]	; 0xfffffed8
 c106500:	e2633000 	rsb	r3, r3, #0
 c106504:	e50b3128 	str	r3, [fp, #-296]	; 0xfffffed8
	}
	do {
	   c = i % 10;
 c106508:	e51b1128 	ldr	r1, [fp, #-296]	; 0xfffffed8
 c10650c:	e59f30d8 	ldr	r3, [pc, #216]	; c1065ec <lcd_putint+0x158>
 c106510:	e0c32391 	smull	r2, r3, r1, r3
 c106514:	e1a02143 	asr	r2, r3, #2
 c106518:	e1a03fc1 	asr	r3, r1, #31
 c10651c:	e0632002 	rsb	r2, r3, r2
 c106520:	e1a03002 	mov	r3, r2
 c106524:	e1a03103 	lsl	r3, r3, #2
 c106528:	e0833002 	add	r3, r3, r2
 c10652c:	e1a03083 	lsl	r3, r3, #1
 c106530:	e0632001 	rsb	r2, r3, r1
 c106534:	e1a03002 	mov	r3, r2
 c106538:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	   *--p = '0' + c;
 c10653c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106540:	e2433001 	sub	r3, r3, #1
 c106544:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c106548:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10654c:	e2833030 	add	r3, r3, #48	; 0x30
 c106550:	e20320ff 	and	r2, r3, #255	; 0xff
 c106554:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106558:	e5c32000 	strb	r2, [r3]

	   i = i / 10;
 c10655c:	e51b3128 	ldr	r3, [fp, #-296]	; 0xfffffed8
 c106560:	e59f2084 	ldr	r2, [pc, #132]	; c1065ec <lcd_putint+0x158>
 c106564:	e0c2c293 	smull	ip, r2, r3, r2
 c106568:	e1a02142 	asr	r2, r2, #2
 c10656c:	e1a03fc3 	asr	r3, r3, #31
 c106570:	e0633002 	rsb	r3, r3, r2
 c106574:	e50b3128 	str	r3, [fp, #-296]	; 0xfffffed8
	} while( i );
 c106578:	e51b3128 	ldr	r3, [fp, #-296]	; 0xfffffed8
 c10657c:	e3530000 	cmp	r3, #0
 c106580:	1affffe0 	bne	c106508 <lcd_putint+0x74>

	if(negativo){
 c106584:	e55b300d 	ldrb	r3, [fp, #-13]
 c106588:	e3530000 	cmp	r3, #0
 c10658c:	0a000005 	beq	c1065a8 <lcd_putint+0x114>
		*--p = '-';
 c106590:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106594:	e2433001 	sub	r3, r3, #1
 c106598:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c10659c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1065a0:	e3a0202d 	mov	r2, #45	; 0x2d
 c1065a4:	e5c32000 	strb	r2, [r3]
	}
	lcd_puts(x, y, color, p );
 c1065a8:	e59f3034 	ldr	r3, [pc, #52]	; c1065e4 <lcd_putint+0x150>
 c1065ac:	e24b000c 	sub	r0, fp, #12
 c1065b0:	e19010b3 	ldrh	r1, [r0, r3]
 c1065b4:	e59f302c 	ldr	r3, [pc, #44]	; c1065e8 <lcd_putint+0x154>
 c1065b8:	e24bc00c 	sub	ip, fp, #12
 c1065bc:	e19c20b3 	ldrh	r2, [ip, r3]
 c1065c0:	e55b3121 	ldrb	r3, [fp, #-289]	; 0xfffffedf
 c1065c4:	e1a00001 	mov	r0, r1
 c1065c8:	e1a01002 	mov	r1, r2
 c1065cc:	e1a02003 	mov	r2, r3
 c1065d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1065d4:	ebffff70 	bl	c10639c <lcd_puts>
}
 c1065d8:	e24bd00c 	sub	sp, fp, #12
 c1065dc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1065e0:	e12fff1e 	bx	lr
 c1065e4:	fffffeee 	.word	0xfffffeee
 c1065e8:	fffffeec 	.word	0xfffffeec
 c1065ec:	66666667 	.word	0x66666667

0c1065f0 <lcd_puthex>:

void lcd_puthex( uint16 x, uint16 y, uint8 color, uint32 i )
{
 c1065f0:	e1a0c00d 	mov	ip, sp
 c1065f4:	e92dd800 	push	{fp, ip, lr, pc}
 c1065f8:	e24cb004 	sub	fp, ip, #4
 c1065fc:	e24dd020 	sub	sp, sp, #32
 c106600:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
 c106604:	e14b01be 	strh	r0, [fp, #-30]	; 0xffffffe2
 c106608:	e14b12b0 	strh	r1, [fp, #-32]	; 0xffffffe0
 c10660c:	e1a03002 	mov	r3, r2
 c106610:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
    char buf[8 + 1];
    char *p = buf + 8;
 c106614:	e24b301c 	sub	r3, fp, #28
 c106618:	e2833008 	add	r3, r3, #8
 c10661c:	e50b3010 	str	r3, [fp, #-16]
    uint8 c;

    *p = '\0';
 c106620:	e51b3010 	ldr	r3, [fp, #-16]
 c106624:	e3a02000 	mov	r2, #0
 c106628:	e5c32000 	strb	r2, [r3]

    do {
        c = i & 0xf;
 c10662c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c106630:	e20330ff 	and	r3, r3, #255	; 0xff
 c106634:	e203300f 	and	r3, r3, #15
 c106638:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        if( c < 10 )
 c10663c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c106640:	e3530009 	cmp	r3, #9
 c106644:	8a000008 	bhi	c10666c <lcd_puthex+0x7c>
            *--p = '0' + c;
 c106648:	e51b3010 	ldr	r3, [fp, #-16]
 c10664c:	e2433001 	sub	r3, r3, #1
 c106650:	e50b3010 	str	r3, [fp, #-16]
 c106654:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c106658:	e2833030 	add	r3, r3, #48	; 0x30
 c10665c:	e20320ff 	and	r2, r3, #255	; 0xff
 c106660:	e51b3010 	ldr	r3, [fp, #-16]
 c106664:	e5c32000 	strb	r2, [r3]
 c106668:	ea000007 	b	c10668c <lcd_puthex+0x9c>
        else
            *--p = 'A' + c - 10;
 c10666c:	e51b3010 	ldr	r3, [fp, #-16]
 c106670:	e2433001 	sub	r3, r3, #1
 c106674:	e50b3010 	str	r3, [fp, #-16]
 c106678:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10667c:	e2833037 	add	r3, r3, #55	; 0x37
 c106680:	e20320ff 	and	r2, r3, #255	; 0xff
 c106684:	e51b3010 	ldr	r3, [fp, #-16]
 c106688:	e5c32000 	strb	r2, [r3]
        i = i >> 4;
 c10668c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c106690:	e1a03223 	lsr	r3, r3, #4
 c106694:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    } while( i );
 c106698:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c10669c:	e3530000 	cmp	r3, #0
 c1066a0:	1affffe1 	bne	c10662c <lcd_puthex+0x3c>

	lcd_puts(x, y, color, p );
 c1066a4:	e15b11be 	ldrh	r1, [fp, #-30]	; 0xffffffe2
 c1066a8:	e15b22b0 	ldrh	r2, [fp, #-32]	; 0xffffffe0
 c1066ac:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
 c1066b0:	e1a00001 	mov	r0, r1
 c1066b4:	e1a01002 	mov	r1, r2
 c1066b8:	e1a02003 	mov	r2, r3
 c1066bc:	e51b3010 	ldr	r3, [fp, #-16]
 c1066c0:	ebffff35 	bl	c10639c <lcd_puts>
}
 c1066c4:	e24bd00c 	sub	sp, fp, #12
 c1066c8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1066cc:	e12fff1e 	bx	lr

0c1066d0 <lcd_putchar_x2>:


void lcd_putchar_x2( uint16 x, uint16 y, uint8 color, char ch )
{
 c1066d0:	e1a0c00d 	mov	ip, sp
 c1066d4:	e92dd800 	push	{fp, ip, lr, pc}
 c1066d8:	e24cb004 	sub	fp, ip, #4
 c1066dc:	e24dd010 	sub	sp, sp, #16
 c1066e0:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c1066e4:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c1066e8:	e54b2019 	strb	r2, [fp, #-25]	; 0xffffffe7
 c1066ec:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
    uint8 row, col;
	uint8 *bitmap;

	bitmap = font + ch*16;
 c1066f0:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
 c1066f4:	e1a03203 	lsl	r3, r3, #4
 c1066f8:	e1a02003 	mov	r2, r3
 c1066fc:	e59f312c 	ldr	r3, [pc, #300]	; c106830 <lcd_putchar_x2+0x160>
 c106700:	e0823003 	add	r3, r2, r3
 c106704:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	for( row=0; row<32; row++ ){
 c106708:	e3a03000 	mov	r3, #0
 c10670c:	e54b300d 	strb	r3, [fp, #-13]
 c106710:	ea000040 	b	c106818 <lcd_putchar_x2+0x148>
		for( col=0; col<16; col++ ){
 c106714:	e3a03000 	mov	r3, #0
 c106718:	e54b300e 	strb	r3, [fp, #-14]
 c10671c:	ea000037 	b	c106800 <lcd_putchar_x2+0x130>
			if( bitmap[row/2] & (0x80 >> col/2) )
 c106720:	e55b300d 	ldrb	r3, [fp, #-13]
 c106724:	e1a030a3 	lsr	r3, r3, #1
 c106728:	e20330ff 	and	r3, r3, #255	; 0xff
 c10672c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c106730:	e0823003 	add	r3, r2, r3
 c106734:	e5d33000 	ldrb	r3, [r3]
 c106738:	e1a02003 	mov	r2, r3
 c10673c:	e55b300e 	ldrb	r3, [fp, #-14]
 c106740:	e1a030a3 	lsr	r3, r3, #1
 c106744:	e20330ff 	and	r3, r3, #255	; 0xff
 c106748:	e3a01080 	mov	r1, #128	; 0x80
 c10674c:	e1a03351 	asr	r3, r1, r3
 c106750:	e0023003 	and	r3, r2, r3
 c106754:	e3530000 	cmp	r3, #0
 c106758:	0a000013 	beq	c1067ac <lcd_putchar_x2+0xdc>
				lcd_putpixel( x+col, y+row, color );
 c10675c:	e55b300e 	ldrb	r3, [fp, #-14]
 c106760:	e1a03803 	lsl	r3, r3, #16
 c106764:	e1a02823 	lsr	r2, r3, #16
 c106768:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c10676c:	e0823003 	add	r3, r2, r3
 c106770:	e1a03803 	lsl	r3, r3, #16
 c106774:	e1a01823 	lsr	r1, r3, #16
 c106778:	e55b300d 	ldrb	r3, [fp, #-13]
 c10677c:	e1a03803 	lsl	r3, r3, #16
 c106780:	e1a02823 	lsr	r2, r3, #16
 c106784:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c106788:	e0823003 	add	r3, r2, r3
 c10678c:	e1a03803 	lsl	r3, r3, #16
 c106790:	e1a02823 	lsr	r2, r3, #16
 c106794:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c106798:	e1a00001 	mov	r0, r1
 c10679c:	e1a01002 	mov	r1, r2
 c1067a0:	e1a02003 	mov	r2, r3
 c1067a4:	ebfffdcc 	bl	c105edc <lcd_putpixel>
 c1067a8:	ea000011 	b	c1067f4 <lcd_putchar_x2+0x124>
			else
				lcd_putpixel( x+col, y+row, WHITE );
 c1067ac:	e55b300e 	ldrb	r3, [fp, #-14]
 c1067b0:	e1a03803 	lsl	r3, r3, #16
 c1067b4:	e1a02823 	lsr	r2, r3, #16
 c1067b8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1067bc:	e0823003 	add	r3, r2, r3
 c1067c0:	e1a03803 	lsl	r3, r3, #16
 c1067c4:	e1a02823 	lsr	r2, r3, #16
 c1067c8:	e55b300d 	ldrb	r3, [fp, #-13]
 c1067cc:	e1a03803 	lsl	r3, r3, #16
 c1067d0:	e1a01823 	lsr	r1, r3, #16
 c1067d4:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c1067d8:	e0813003 	add	r3, r1, r3
 c1067dc:	e1a03803 	lsl	r3, r3, #16
 c1067e0:	e1a03823 	lsr	r3, r3, #16
 c1067e4:	e1a00002 	mov	r0, r2
 c1067e8:	e1a01003 	mov	r1, r3
 c1067ec:	e3a02000 	mov	r2, #0
 c1067f0:	ebfffdb9 	bl	c105edc <lcd_putpixel>
    uint8 row, col;
	uint8 *bitmap;

	bitmap = font + ch*16;
	for( row=0; row<32; row++ ){
		for( col=0; col<16; col++ ){
 c1067f4:	e55b300e 	ldrb	r3, [fp, #-14]
 c1067f8:	e2833001 	add	r3, r3, #1
 c1067fc:	e54b300e 	strb	r3, [fp, #-14]
 c106800:	e55b300e 	ldrb	r3, [fp, #-14]
 c106804:	e353000f 	cmp	r3, #15
 c106808:	9affffc4 	bls	c106720 <lcd_putchar_x2+0x50>
{
    uint8 row, col;
	uint8 *bitmap;

	bitmap = font + ch*16;
	for( row=0; row<32; row++ ){
 c10680c:	e55b300d 	ldrb	r3, [fp, #-13]
 c106810:	e2833001 	add	r3, r3, #1
 c106814:	e54b300d 	strb	r3, [fp, #-13]
 c106818:	e55b300d 	ldrb	r3, [fp, #-13]
 c10681c:	e353001f 	cmp	r3, #31
 c106820:	9affffbb 	bls	c106714 <lcd_putchar_x2+0x44>
				lcd_putpixel( x+col, y+row, color );
			else
				lcd_putpixel( x+col, y+row, WHITE );
		}
	}
}
 c106824:	e24bd00c 	sub	sp, fp, #12
 c106828:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10682c:	e12fff1e 	bx	lr
 c106830:	0c10d5b8 	.word	0x0c10d5b8

0c106834 <lcd_putchar_x3>:
void lcd_putchar_x3( uint16 x, uint16 y, uint8 color, char ch )
{
 c106834:	e1a0c00d 	mov	ip, sp
 c106838:	e92dd800 	push	{fp, ip, lr, pc}
 c10683c:	e24cb004 	sub	fp, ip, #4
 c106840:	e24dd010 	sub	sp, sp, #16
 c106844:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c106848:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c10684c:	e54b2019 	strb	r2, [fp, #-25]	; 0xffffffe7
 c106850:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
    uint8 row, col;
	uint8 *bitmap;

	bitmap = font + ch*16;
 c106854:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
 c106858:	e1a03203 	lsl	r3, r3, #4
 c10685c:	e1a02003 	mov	r2, r3
 c106860:	e59f312c 	ldr	r3, [pc, #300]	; c106994 <lcd_putchar_x3+0x160>
 c106864:	e0823003 	add	r3, r2, r3
 c106868:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	for( row=0; row<64; row++ ){
 c10686c:	e3a03000 	mov	r3, #0
 c106870:	e54b300d 	strb	r3, [fp, #-13]
 c106874:	ea000040 	b	c10697c <lcd_putchar_x3+0x148>
		for( col=0; col<32; col++ ){
 c106878:	e3a03000 	mov	r3, #0
 c10687c:	e54b300e 	strb	r3, [fp, #-14]
 c106880:	ea000037 	b	c106964 <lcd_putchar_x3+0x130>
			if( bitmap[row/4] & (0x80 >> col/4) )
 c106884:	e55b300d 	ldrb	r3, [fp, #-13]
 c106888:	e1a03123 	lsr	r3, r3, #2
 c10688c:	e20330ff 	and	r3, r3, #255	; 0xff
 c106890:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c106894:	e0823003 	add	r3, r2, r3
 c106898:	e5d33000 	ldrb	r3, [r3]
 c10689c:	e1a02003 	mov	r2, r3
 c1068a0:	e55b300e 	ldrb	r3, [fp, #-14]
 c1068a4:	e1a03123 	lsr	r3, r3, #2
 c1068a8:	e20330ff 	and	r3, r3, #255	; 0xff
 c1068ac:	e3a01080 	mov	r1, #128	; 0x80
 c1068b0:	e1a03351 	asr	r3, r1, r3
 c1068b4:	e0023003 	and	r3, r2, r3
 c1068b8:	e3530000 	cmp	r3, #0
 c1068bc:	0a000013 	beq	c106910 <lcd_putchar_x3+0xdc>
				lcd_putpixel( x+col, y+row, color );
 c1068c0:	e55b300e 	ldrb	r3, [fp, #-14]
 c1068c4:	e1a03803 	lsl	r3, r3, #16
 c1068c8:	e1a02823 	lsr	r2, r3, #16
 c1068cc:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1068d0:	e0823003 	add	r3, r2, r3
 c1068d4:	e1a03803 	lsl	r3, r3, #16
 c1068d8:	e1a01823 	lsr	r1, r3, #16
 c1068dc:	e55b300d 	ldrb	r3, [fp, #-13]
 c1068e0:	e1a03803 	lsl	r3, r3, #16
 c1068e4:	e1a02823 	lsr	r2, r3, #16
 c1068e8:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c1068ec:	e0823003 	add	r3, r2, r3
 c1068f0:	e1a03803 	lsl	r3, r3, #16
 c1068f4:	e1a02823 	lsr	r2, r3, #16
 c1068f8:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c1068fc:	e1a00001 	mov	r0, r1
 c106900:	e1a01002 	mov	r1, r2
 c106904:	e1a02003 	mov	r2, r3
 c106908:	ebfffd73 	bl	c105edc <lcd_putpixel>
 c10690c:	ea000011 	b	c106958 <lcd_putchar_x3+0x124>
			else
				lcd_putpixel( x+col, y+row, WHITE );
 c106910:	e55b300e 	ldrb	r3, [fp, #-14]
 c106914:	e1a03803 	lsl	r3, r3, #16
 c106918:	e1a02823 	lsr	r2, r3, #16
 c10691c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c106920:	e0823003 	add	r3, r2, r3
 c106924:	e1a03803 	lsl	r3, r3, #16
 c106928:	e1a02823 	lsr	r2, r3, #16
 c10692c:	e55b300d 	ldrb	r3, [fp, #-13]
 c106930:	e1a03803 	lsl	r3, r3, #16
 c106934:	e1a01823 	lsr	r1, r3, #16
 c106938:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c10693c:	e0813003 	add	r3, r1, r3
 c106940:	e1a03803 	lsl	r3, r3, #16
 c106944:	e1a03823 	lsr	r3, r3, #16
 c106948:	e1a00002 	mov	r0, r2
 c10694c:	e1a01003 	mov	r1, r3
 c106950:	e3a02000 	mov	r2, #0
 c106954:	ebfffd60 	bl	c105edc <lcd_putpixel>
    uint8 row, col;
	uint8 *bitmap;

	bitmap = font + ch*16;
	for( row=0; row<64; row++ ){
		for( col=0; col<32; col++ ){
 c106958:	e55b300e 	ldrb	r3, [fp, #-14]
 c10695c:	e2833001 	add	r3, r3, #1
 c106960:	e54b300e 	strb	r3, [fp, #-14]
 c106964:	e55b300e 	ldrb	r3, [fp, #-14]
 c106968:	e353001f 	cmp	r3, #31
 c10696c:	9affffc4 	bls	c106884 <lcd_putchar_x3+0x50>
{
    uint8 row, col;
	uint8 *bitmap;

	bitmap = font + ch*16;
	for( row=0; row<64; row++ ){
 c106970:	e55b300d 	ldrb	r3, [fp, #-13]
 c106974:	e2833001 	add	r3, r3, #1
 c106978:	e54b300d 	strb	r3, [fp, #-13]
 c10697c:	e55b300d 	ldrb	r3, [fp, #-13]
 c106980:	e353003f 	cmp	r3, #63	; 0x3f
 c106984:	9affffbb 	bls	c106878 <lcd_putchar_x3+0x44>
				lcd_putpixel( x+col, y+row, color );
			else
				lcd_putpixel( x+col, y+row, WHITE );
		}
	}
}
 c106988:	e24bd00c 	sub	sp, fp, #12
 c10698c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c106990:	e12fff1e 	bx	lr
 c106994:	0c10d5b8 	.word	0x0c10d5b8

0c106998 <lcd_puts_x2>:

void lcd_puts_x2( uint16 x, uint16 y, uint8 color, char *s )
{
 c106998:	e1a0c00d 	mov	ip, sp
 c10699c:	e92dd800 	push	{fp, ip, lr, pc}
 c1069a0:	e24cb004 	sub	fp, ip, #4
 c1069a4:	e24dd018 	sub	sp, sp, #24
 c1069a8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 c1069ac:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c1069b0:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c1069b4:	e1a03002 	mov	r3, r2
 c1069b8:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
	uint8 i = 0;
 c1069bc:	e3a03000 	mov	r3, #0
 c1069c0:	e54b300d 	strb	r3, [fp, #-13]
	uint8 j = 0;
 c1069c4:	e3a03000 	mov	r3, #0
 c1069c8:	e54b300e 	strb	r3, [fp, #-14]
	while(*s != '\0'){
 c1069cc:	ea000028 	b	c106a74 <lcd_puts_x2+0xdc>
		lcd_putchar_x2(x + (i * 16), y + (j * 32), color, *s++);
 c1069d0:	e55b300d 	ldrb	r3, [fp, #-13]
 c1069d4:	e1a03803 	lsl	r3, r3, #16
 c1069d8:	e1a03823 	lsr	r3, r3, #16
 c1069dc:	e1a03203 	lsl	r3, r3, #4
 c1069e0:	e1a03803 	lsl	r3, r3, #16
 c1069e4:	e1a02823 	lsr	r2, r3, #16
 c1069e8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1069ec:	e0823003 	add	r3, r2, r3
 c1069f0:	e1a03803 	lsl	r3, r3, #16
 c1069f4:	e1a00823 	lsr	r0, r3, #16
 c1069f8:	e55b300e 	ldrb	r3, [fp, #-14]
 c1069fc:	e1a03803 	lsl	r3, r3, #16
 c106a00:	e1a03823 	lsr	r3, r3, #16
 c106a04:	e1a03283 	lsl	r3, r3, #5
 c106a08:	e1a03803 	lsl	r3, r3, #16
 c106a0c:	e1a02823 	lsr	r2, r3, #16
 c106a10:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c106a14:	e0823003 	add	r3, r2, r3
 c106a18:	e1a03803 	lsl	r3, r3, #16
 c106a1c:	e1a01823 	lsr	r1, r3, #16
 c106a20:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c106a24:	e5d33000 	ldrb	r3, [r3]
 c106a28:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c106a2c:	e2822001 	add	r2, r2, #1
 c106a30:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
 c106a34:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
 c106a38:	ebffff24 	bl	c1066d0 <lcd_putchar_x2>
		i++;
 c106a3c:	e55b300d 	ldrb	r3, [fp, #-13]
 c106a40:	e2833001 	add	r3, r3, #1
 c106a44:	e54b300d 	strb	r3, [fp, #-13]
		if(x + (i * 16) == LCD_WIDTH){
 c106a48:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
 c106a4c:	e55b300d 	ldrb	r3, [fp, #-13]
 c106a50:	e1a03203 	lsl	r3, r3, #4
 c106a54:	e0823003 	add	r3, r2, r3
 c106a58:	e3530d05 	cmp	r3, #320	; 0x140
 c106a5c:	1a000004 	bne	c106a74 <lcd_puts_x2+0xdc>
			i = 0;
 c106a60:	e3a03000 	mov	r3, #0
 c106a64:	e54b300d 	strb	r3, [fp, #-13]
			j++;
 c106a68:	e55b300e 	ldrb	r3, [fp, #-14]
 c106a6c:	e2833001 	add	r3, r3, #1
 c106a70:	e54b300e 	strb	r3, [fp, #-14]

void lcd_puts_x2( uint16 x, uint16 y, uint8 color, char *s )
{
	uint8 i = 0;
	uint8 j = 0;
	while(*s != '\0'){
 c106a74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c106a78:	e5d33000 	ldrb	r3, [r3]
 c106a7c:	e3530000 	cmp	r3, #0
 c106a80:	1affffd2 	bne	c1069d0 <lcd_puts_x2+0x38>
			i = 0;
			j++;
		}

	}
}
 c106a84:	e24bd00c 	sub	sp, fp, #12
 c106a88:	e89d6800 	ldm	sp, {fp, sp, lr}
 c106a8c:	e12fff1e 	bx	lr

0c106a90 <lcd_puts_x3>:

void lcd_puts_x3( uint16 x, uint16 y, uint8 color, char *s )
{
 c106a90:	e1a0c00d 	mov	ip, sp
 c106a94:	e92dd800 	push	{fp, ip, lr, pc}
 c106a98:	e24cb004 	sub	fp, ip, #4
 c106a9c:	e24dd018 	sub	sp, sp, #24
 c106aa0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
 c106aa4:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c106aa8:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c106aac:	e1a03002 	mov	r3, r2
 c106ab0:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
	uint8 i = 0;
 c106ab4:	e3a03000 	mov	r3, #0
 c106ab8:	e54b300d 	strb	r3, [fp, #-13]
	uint8 j = 0;
 c106abc:	e3a03000 	mov	r3, #0
 c106ac0:	e54b300e 	strb	r3, [fp, #-14]
	while(*s != '\0'){
 c106ac4:	ea000028 	b	c106b6c <lcd_puts_x3+0xdc>
		lcd_putchar_x3(x + (i * 32), y + (j * 64), color, *s++);
 c106ac8:	e55b300d 	ldrb	r3, [fp, #-13]
 c106acc:	e1a03803 	lsl	r3, r3, #16
 c106ad0:	e1a03823 	lsr	r3, r3, #16
 c106ad4:	e1a03283 	lsl	r3, r3, #5
 c106ad8:	e1a03803 	lsl	r3, r3, #16
 c106adc:	e1a02823 	lsr	r2, r3, #16
 c106ae0:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c106ae4:	e0823003 	add	r3, r2, r3
 c106ae8:	e1a03803 	lsl	r3, r3, #16
 c106aec:	e1a00823 	lsr	r0, r3, #16
 c106af0:	e55b300e 	ldrb	r3, [fp, #-14]
 c106af4:	e1a03803 	lsl	r3, r3, #16
 c106af8:	e1a03823 	lsr	r3, r3, #16
 c106afc:	e1a03303 	lsl	r3, r3, #6
 c106b00:	e1a03803 	lsl	r3, r3, #16
 c106b04:	e1a02823 	lsr	r2, r3, #16
 c106b08:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c106b0c:	e0823003 	add	r3, r2, r3
 c106b10:	e1a03803 	lsl	r3, r3, #16
 c106b14:	e1a01823 	lsr	r1, r3, #16
 c106b18:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c106b1c:	e5d33000 	ldrb	r3, [r3]
 c106b20:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c106b24:	e2822001 	add	r2, r2, #1
 c106b28:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
 c106b2c:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
 c106b30:	ebffff3f 	bl	c106834 <lcd_putchar_x3>
		i++;
 c106b34:	e55b300d 	ldrb	r3, [fp, #-13]
 c106b38:	e2833001 	add	r3, r3, #1
 c106b3c:	e54b300d 	strb	r3, [fp, #-13]
		if(x + (i * 32) == LCD_WIDTH){
 c106b40:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
 c106b44:	e55b300d 	ldrb	r3, [fp, #-13]
 c106b48:	e1a03283 	lsl	r3, r3, #5
 c106b4c:	e0823003 	add	r3, r2, r3
 c106b50:	e3530d05 	cmp	r3, #320	; 0x140
 c106b54:	1a000004 	bne	c106b6c <lcd_puts_x3+0xdc>
			i = 0;
 c106b58:	e3a03000 	mov	r3, #0
 c106b5c:	e54b300d 	strb	r3, [fp, #-13]
			j++;
 c106b60:	e55b300e 	ldrb	r3, [fp, #-14]
 c106b64:	e2833001 	add	r3, r3, #1
 c106b68:	e54b300e 	strb	r3, [fp, #-14]

void lcd_puts_x3( uint16 x, uint16 y, uint8 color, char *s )
{
	uint8 i = 0;
	uint8 j = 0;
	while(*s != '\0'){
 c106b6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c106b70:	e5d33000 	ldrb	r3, [r3]
 c106b74:	e3530000 	cmp	r3, #0
 c106b78:	1affffd2 	bne	c106ac8 <lcd_puts_x3+0x38>
			i = 0;
			j++;
		}

	}
}
 c106b7c:	e24bd00c 	sub	sp, fp, #12
 c106b80:	e89d6800 	ldm	sp, {fp, sp, lr}
 c106b84:	e12fff1e 	bx	lr

0c106b88 <lcd_putint_x2>:

void lcd_putint_x2( uint16 x, uint16 y, uint8 color, int32 i )
{
 c106b88:	e1a0c00d 	mov	ip, sp
 c106b8c:	e92dd800 	push	{fp, ip, lr, pc}
 c106b90:	e24cb004 	sub	fp, ip, #4
 c106b94:	e24dde12 	sub	sp, sp, #288	; 0x120
 c106b98:	e50b3128 	str	r3, [fp, #-296]	; 0xfffffed8
 c106b9c:	e59f3134 	ldr	r3, [pc, #308]	; c106cd8 <lcd_putint_x2+0x150>
 c106ba0:	e24bc00c 	sub	ip, fp, #12
 c106ba4:	e18c00b3 	strh	r0, [ip, r3]
 c106ba8:	e59f312c 	ldr	r3, [pc, #300]	; c106cdc <lcd_putint_x2+0x154>
 c106bac:	e24b000c 	sub	r0, fp, #12
 c106bb0:	e18010b3 	strh	r1, [r0, r3]
 c106bb4:	e1a03002 	mov	r3, r2
 c106bb8:	e54b3121 	strb	r3, [fp, #-289]	; 0xfffffedf
	boolean negativo = 0;
 c106bbc:	e3a03000 	mov	r3, #0
 c106bc0:	e54b300d 	strb	r3, [fp, #-13]
	char buf[256 + 1];
	char *p = buf + 256;
 c106bc4:	e24b3f46 	sub	r3, fp, #280	; 0x118
 c106bc8:	e2833c01 	add	r3, r3, #256	; 0x100
 c106bcc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	uint8 c;

	*p = '\0';
 c106bd0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106bd4:	e3a02000 	mov	r2, #0
 c106bd8:	e5c32000 	strb	r2, [r3]
	if(i<0){
 c106bdc:	e51b3128 	ldr	r3, [fp, #-296]	; 0xfffffed8
 c106be0:	e3530000 	cmp	r3, #0
 c106be4:	aa000004 	bge	c106bfc <lcd_putint_x2+0x74>
		negativo = 1;
 c106be8:	e3a03001 	mov	r3, #1
 c106bec:	e54b300d 	strb	r3, [fp, #-13]
		i*=-1;
 c106bf0:	e51b3128 	ldr	r3, [fp, #-296]	; 0xfffffed8
 c106bf4:	e2633000 	rsb	r3, r3, #0
 c106bf8:	e50b3128 	str	r3, [fp, #-296]	; 0xfffffed8
	}
	do {
	   c = i % 10;
 c106bfc:	e51b1128 	ldr	r1, [fp, #-296]	; 0xfffffed8
 c106c00:	e59f30d8 	ldr	r3, [pc, #216]	; c106ce0 <lcd_putint_x2+0x158>
 c106c04:	e0c32391 	smull	r2, r3, r1, r3
 c106c08:	e1a02143 	asr	r2, r3, #2
 c106c0c:	e1a03fc1 	asr	r3, r1, #31
 c106c10:	e0632002 	rsb	r2, r3, r2
 c106c14:	e1a03002 	mov	r3, r2
 c106c18:	e1a03103 	lsl	r3, r3, #2
 c106c1c:	e0833002 	add	r3, r3, r2
 c106c20:	e1a03083 	lsl	r3, r3, #1
 c106c24:	e0632001 	rsb	r2, r3, r1
 c106c28:	e1a03002 	mov	r3, r2
 c106c2c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	   *--p = '0' + c;
 c106c30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106c34:	e2433001 	sub	r3, r3, #1
 c106c38:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c106c3c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c106c40:	e2833030 	add	r3, r3, #48	; 0x30
 c106c44:	e20320ff 	and	r2, r3, #255	; 0xff
 c106c48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106c4c:	e5c32000 	strb	r2, [r3]

	   i = i / 10;
 c106c50:	e51b3128 	ldr	r3, [fp, #-296]	; 0xfffffed8
 c106c54:	e59f2084 	ldr	r2, [pc, #132]	; c106ce0 <lcd_putint_x2+0x158>
 c106c58:	e0c2c293 	smull	ip, r2, r3, r2
 c106c5c:	e1a02142 	asr	r2, r2, #2
 c106c60:	e1a03fc3 	asr	r3, r3, #31
 c106c64:	e0633002 	rsb	r3, r3, r2
 c106c68:	e50b3128 	str	r3, [fp, #-296]	; 0xfffffed8
	} while( i );
 c106c6c:	e51b3128 	ldr	r3, [fp, #-296]	; 0xfffffed8
 c106c70:	e3530000 	cmp	r3, #0
 c106c74:	1affffe0 	bne	c106bfc <lcd_putint_x2+0x74>

	if(negativo){
 c106c78:	e55b300d 	ldrb	r3, [fp, #-13]
 c106c7c:	e3530000 	cmp	r3, #0
 c106c80:	0a000005 	beq	c106c9c <lcd_putint_x2+0x114>
		*--p = '-';
 c106c84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106c88:	e2433001 	sub	r3, r3, #1
 c106c8c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c106c90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106c94:	e3a0202d 	mov	r2, #45	; 0x2d
 c106c98:	e5c32000 	strb	r2, [r3]
	}
	lcd_puts_x2(x, y, color, p );
 c106c9c:	e59f3034 	ldr	r3, [pc, #52]	; c106cd8 <lcd_putint_x2+0x150>
 c106ca0:	e24b000c 	sub	r0, fp, #12
 c106ca4:	e19010b3 	ldrh	r1, [r0, r3]
 c106ca8:	e59f302c 	ldr	r3, [pc, #44]	; c106cdc <lcd_putint_x2+0x154>
 c106cac:	e24bc00c 	sub	ip, fp, #12
 c106cb0:	e19c20b3 	ldrh	r2, [ip, r3]
 c106cb4:	e55b3121 	ldrb	r3, [fp, #-289]	; 0xfffffedf
 c106cb8:	e1a00001 	mov	r0, r1
 c106cbc:	e1a01002 	mov	r1, r2
 c106cc0:	e1a02003 	mov	r2, r3
 c106cc4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106cc8:	ebffff32 	bl	c106998 <lcd_puts_x2>
}
 c106ccc:	e24bd00c 	sub	sp, fp, #12
 c106cd0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c106cd4:	e12fff1e 	bx	lr
 c106cd8:	fffffeee 	.word	0xfffffeee
 c106cdc:	fffffeec 	.word	0xfffffeec
 c106ce0:	66666667 	.word	0x66666667

0c106ce4 <lcd_putint_x3>:
void lcd_putint_x3( uint16 x, uint16 y, uint8 color, int32 i )
{
 c106ce4:	e1a0c00d 	mov	ip, sp
 c106ce8:	e92dd800 	push	{fp, ip, lr, pc}
 c106cec:	e24cb004 	sub	fp, ip, #4
 c106cf0:	e24dde12 	sub	sp, sp, #288	; 0x120
 c106cf4:	e50b3128 	str	r3, [fp, #-296]	; 0xfffffed8
 c106cf8:	e59f3134 	ldr	r3, [pc, #308]	; c106e34 <lcd_putint_x3+0x150>
 c106cfc:	e24bc00c 	sub	ip, fp, #12
 c106d00:	e18c00b3 	strh	r0, [ip, r3]
 c106d04:	e59f312c 	ldr	r3, [pc, #300]	; c106e38 <lcd_putint_x3+0x154>
 c106d08:	e24b000c 	sub	r0, fp, #12
 c106d0c:	e18010b3 	strh	r1, [r0, r3]
 c106d10:	e1a03002 	mov	r3, r2
 c106d14:	e54b3121 	strb	r3, [fp, #-289]	; 0xfffffedf
	boolean negativo = 0;
 c106d18:	e3a03000 	mov	r3, #0
 c106d1c:	e54b300d 	strb	r3, [fp, #-13]
	char buf[256 + 1];
	char *p = buf + 256;
 c106d20:	e24b3f46 	sub	r3, fp, #280	; 0x118
 c106d24:	e2833c01 	add	r3, r3, #256	; 0x100
 c106d28:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	uint8 c;

	*p = '\0';
 c106d2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106d30:	e3a02000 	mov	r2, #0
 c106d34:	e5c32000 	strb	r2, [r3]
	if(i<0){
 c106d38:	e51b3128 	ldr	r3, [fp, #-296]	; 0xfffffed8
 c106d3c:	e3530000 	cmp	r3, #0
 c106d40:	aa000004 	bge	c106d58 <lcd_putint_x3+0x74>
		negativo = 1;
 c106d44:	e3a03001 	mov	r3, #1
 c106d48:	e54b300d 	strb	r3, [fp, #-13]
		i*=-1;
 c106d4c:	e51b3128 	ldr	r3, [fp, #-296]	; 0xfffffed8
 c106d50:	e2633000 	rsb	r3, r3, #0
 c106d54:	e50b3128 	str	r3, [fp, #-296]	; 0xfffffed8
	}
	do {
	   c = i % 10;
 c106d58:	e51b1128 	ldr	r1, [fp, #-296]	; 0xfffffed8
 c106d5c:	e59f30d8 	ldr	r3, [pc, #216]	; c106e3c <lcd_putint_x3+0x158>
 c106d60:	e0c32391 	smull	r2, r3, r1, r3
 c106d64:	e1a02143 	asr	r2, r3, #2
 c106d68:	e1a03fc1 	asr	r3, r1, #31
 c106d6c:	e0632002 	rsb	r2, r3, r2
 c106d70:	e1a03002 	mov	r3, r2
 c106d74:	e1a03103 	lsl	r3, r3, #2
 c106d78:	e0833002 	add	r3, r3, r2
 c106d7c:	e1a03083 	lsl	r3, r3, #1
 c106d80:	e0632001 	rsb	r2, r3, r1
 c106d84:	e1a03002 	mov	r3, r2
 c106d88:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	   *--p = '0' + c;
 c106d8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106d90:	e2433001 	sub	r3, r3, #1
 c106d94:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c106d98:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c106d9c:	e2833030 	add	r3, r3, #48	; 0x30
 c106da0:	e20320ff 	and	r2, r3, #255	; 0xff
 c106da4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106da8:	e5c32000 	strb	r2, [r3]

	   i = i / 10;
 c106dac:	e51b3128 	ldr	r3, [fp, #-296]	; 0xfffffed8
 c106db0:	e59f2084 	ldr	r2, [pc, #132]	; c106e3c <lcd_putint_x3+0x158>
 c106db4:	e0c2c293 	smull	ip, r2, r3, r2
 c106db8:	e1a02142 	asr	r2, r2, #2
 c106dbc:	e1a03fc3 	asr	r3, r3, #31
 c106dc0:	e0633002 	rsb	r3, r3, r2
 c106dc4:	e50b3128 	str	r3, [fp, #-296]	; 0xfffffed8
	} while( i );
 c106dc8:	e51b3128 	ldr	r3, [fp, #-296]	; 0xfffffed8
 c106dcc:	e3530000 	cmp	r3, #0
 c106dd0:	1affffe0 	bne	c106d58 <lcd_putint_x3+0x74>

	if(negativo){
 c106dd4:	e55b300d 	ldrb	r3, [fp, #-13]
 c106dd8:	e3530000 	cmp	r3, #0
 c106ddc:	0a000005 	beq	c106df8 <lcd_putint_x3+0x114>
		*--p = '-';
 c106de0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106de4:	e2433001 	sub	r3, r3, #1
 c106de8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c106dec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106df0:	e3a0202d 	mov	r2, #45	; 0x2d
 c106df4:	e5c32000 	strb	r2, [r3]
	}
	lcd_puts_x3(x, y, color, p );
 c106df8:	e59f3034 	ldr	r3, [pc, #52]	; c106e34 <lcd_putint_x3+0x150>
 c106dfc:	e24b000c 	sub	r0, fp, #12
 c106e00:	e19010b3 	ldrh	r1, [r0, r3]
 c106e04:	e59f302c 	ldr	r3, [pc, #44]	; c106e38 <lcd_putint_x3+0x154>
 c106e08:	e24bc00c 	sub	ip, fp, #12
 c106e0c:	e19c20b3 	ldrh	r2, [ip, r3]
 c106e10:	e55b3121 	ldrb	r3, [fp, #-289]	; 0xfffffedf
 c106e14:	e1a00001 	mov	r0, r1
 c106e18:	e1a01002 	mov	r1, r2
 c106e1c:	e1a02003 	mov	r2, r3
 c106e20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c106e24:	ebffff19 	bl	c106a90 <lcd_puts_x3>
}
 c106e28:	e24bd00c 	sub	sp, fp, #12
 c106e2c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c106e30:	e12fff1e 	bx	lr
 c106e34:	fffffeee 	.word	0xfffffeee
 c106e38:	fffffeec 	.word	0xfffffeec
 c106e3c:	66666667 	.word	0x66666667

0c106e40 <lcd_puthex_x2>:

void lcd_puthex_x2( uint16 x, uint16 y, uint8 color, uint32 i )
{
 c106e40:	e1a0c00d 	mov	ip, sp
 c106e44:	e92dd800 	push	{fp, ip, lr, pc}
 c106e48:	e24cb004 	sub	fp, ip, #4
 c106e4c:	e24dd020 	sub	sp, sp, #32
 c106e50:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
 c106e54:	e14b01be 	strh	r0, [fp, #-30]	; 0xffffffe2
 c106e58:	e14b12b0 	strh	r1, [fp, #-32]	; 0xffffffe0
 c106e5c:	e1a03002 	mov	r3, r2
 c106e60:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
    char buf[8 + 1];
    char *p = buf + 8;
 c106e64:	e24b301c 	sub	r3, fp, #28
 c106e68:	e2833008 	add	r3, r3, #8
 c106e6c:	e50b3010 	str	r3, [fp, #-16]
    uint8 c;

    *p = '\0';
 c106e70:	e51b3010 	ldr	r3, [fp, #-16]
 c106e74:	e3a02000 	mov	r2, #0
 c106e78:	e5c32000 	strb	r2, [r3]

    do {
        c = i & 0xf;
 c106e7c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c106e80:	e20330ff 	and	r3, r3, #255	; 0xff
 c106e84:	e203300f 	and	r3, r3, #15
 c106e88:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        if( c < 10 )
 c106e8c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c106e90:	e3530009 	cmp	r3, #9
 c106e94:	8a000008 	bhi	c106ebc <lcd_puthex_x2+0x7c>
            *--p = '0' + c;
 c106e98:	e51b3010 	ldr	r3, [fp, #-16]
 c106e9c:	e2433001 	sub	r3, r3, #1
 c106ea0:	e50b3010 	str	r3, [fp, #-16]
 c106ea4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c106ea8:	e2833030 	add	r3, r3, #48	; 0x30
 c106eac:	e20320ff 	and	r2, r3, #255	; 0xff
 c106eb0:	e51b3010 	ldr	r3, [fp, #-16]
 c106eb4:	e5c32000 	strb	r2, [r3]
 c106eb8:	ea000007 	b	c106edc <lcd_puthex_x2+0x9c>
        else
            *--p = 'A' + c - 10;
 c106ebc:	e51b3010 	ldr	r3, [fp, #-16]
 c106ec0:	e2433001 	sub	r3, r3, #1
 c106ec4:	e50b3010 	str	r3, [fp, #-16]
 c106ec8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c106ecc:	e2833037 	add	r3, r3, #55	; 0x37
 c106ed0:	e20320ff 	and	r2, r3, #255	; 0xff
 c106ed4:	e51b3010 	ldr	r3, [fp, #-16]
 c106ed8:	e5c32000 	strb	r2, [r3]
        i = i >> 4;
 c106edc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c106ee0:	e1a03223 	lsr	r3, r3, #4
 c106ee4:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    } while( i );
 c106ee8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c106eec:	e3530000 	cmp	r3, #0
 c106ef0:	1affffe1 	bne	c106e7c <lcd_puthex_x2+0x3c>

	lcd_puts_x2(x, y, color, p );
 c106ef4:	e15b11be 	ldrh	r1, [fp, #-30]	; 0xffffffe2
 c106ef8:	e15b22b0 	ldrh	r2, [fp, #-32]	; 0xffffffe0
 c106efc:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
 c106f00:	e1a00001 	mov	r0, r1
 c106f04:	e1a01002 	mov	r1, r2
 c106f08:	e1a02003 	mov	r2, r3
 c106f0c:	e51b3010 	ldr	r3, [fp, #-16]
 c106f10:	ebfffea0 	bl	c106998 <lcd_puts_x2>
}
 c106f14:	e24bd00c 	sub	sp, fp, #12
 c106f18:	e89d6800 	ldm	sp, {fp, sp, lr}
 c106f1c:	e12fff1e 	bx	lr

0c106f20 <lcd_putWallpaper>:

void lcd_putWallpaper( uint8 *bmp )
{
 c106f20:	e1a0c00d 	mov	ip, sp
 c106f24:	e92dd800 	push	{fp, ip, lr, pc}
 c106f28:	e24cb004 	sub	fp, ip, #4
 c106f2c:	e24dd018 	sub	sp, sp, #24
 c106f30:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    uint32 headerSize;

    uint16 x, ySrc, yDst;
    uint16 offsetSrc, offsetDst;

    headerSize = bmp[10] + (bmp[11] << 8) + (bmp[12] << 16) + (bmp[13] << 24);
 c106f34:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c106f38:	e283300a 	add	r3, r3, #10
 c106f3c:	e5d33000 	ldrb	r3, [r3]
 c106f40:	e1a02003 	mov	r2, r3
 c106f44:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c106f48:	e283300b 	add	r3, r3, #11
 c106f4c:	e5d33000 	ldrb	r3, [r3]
 c106f50:	e1a03403 	lsl	r3, r3, #8
 c106f54:	e0822003 	add	r2, r2, r3
 c106f58:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c106f5c:	e283300c 	add	r3, r3, #12
 c106f60:	e5d33000 	ldrb	r3, [r3]
 c106f64:	e1a03803 	lsl	r3, r3, #16
 c106f68:	e0822003 	add	r2, r2, r3
 c106f6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c106f70:	e283300d 	add	r3, r3, #13
 c106f74:	e5d33000 	ldrb	r3, [r3]
 c106f78:	e1a03c03 	lsl	r3, r3, #24
 c106f7c:	e0823003 	add	r3, r2, r3
 c106f80:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

    bmp = bmp + headerSize;
 c106f84:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c106f88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c106f8c:	e0823003 	add	r3, r2, r3
 c106f90:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    
    for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )                                                                       
 c106f94:	e3a03000 	mov	r3, #0
 c106f98:	e14b31b0 	strh	r3, [fp, #-16]
 c106f9c:	e3a030ef 	mov	r3, #239	; 0xef
 c106fa0:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
 c106fa4:	ea00002d 	b	c107060 <lcd_putWallpaper+0x140>
    {
        offsetDst = yDst*LCD_WIDTH/2;
 c106fa8:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c106fac:	e1a03002 	mov	r3, r2
 c106fb0:	e1a03103 	lsl	r3, r3, #2
 c106fb4:	e0833002 	add	r3, r3, r2
 c106fb8:	e1a03303 	lsl	r3, r3, #6
 c106fbc:	e1a02fa3 	lsr	r2, r3, #31
 c106fc0:	e0823003 	add	r3, r2, r3
 c106fc4:	e1a030c3 	asr	r3, r3, #1
 c106fc8:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
        offsetSrc = ySrc*LCD_WIDTH/2;
 c106fcc:	e15b21b0 	ldrh	r2, [fp, #-16]
 c106fd0:	e1a03002 	mov	r3, r2
 c106fd4:	e1a03103 	lsl	r3, r3, #2
 c106fd8:	e0833002 	add	r3, r3, r2
 c106fdc:	e1a03303 	lsl	r3, r3, #6
 c106fe0:	e1a02fa3 	lsr	r2, r3, #31
 c106fe4:	e0823003 	add	r3, r2, r3
 c106fe8:	e1a030c3 	asr	r3, r3, #1
 c106fec:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
        for( x=0; x<LCD_WIDTH/2; x++ )
 c106ff0:	e3a03000 	mov	r3, #0
 c106ff4:	e14b30be 	strh	r3, [fp, #-14]
 c106ff8:	ea00000f 	b	c10703c <lcd_putWallpaper+0x11c>
            lcd_buffer[offsetDst+x] = ~bmp[offsetSrc+x];
 c106ffc:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
 c107000:	e15b30be 	ldrh	r3, [fp, #-14]
 c107004:	e0823003 	add	r3, r2, r3
 c107008:	e15b11bc 	ldrh	r1, [fp, #-28]	; 0xffffffe4
 c10700c:	e15b20be 	ldrh	r2, [fp, #-14]
 c107010:	e0812002 	add	r2, r1, r2
 c107014:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
 c107018:	e0812002 	add	r2, r1, r2
 c10701c:	e5d22000 	ldrb	r2, [r2]
 c107020:	e1e02002 	mvn	r2, r2
 c107024:	e20210ff 	and	r1, r2, #255	; 0xff
 c107028:	e59f2048 	ldr	r2, [pc, #72]	; c107078 <lcd_putWallpaper+0x158>
 c10702c:	e7c21003 	strb	r1, [r2, r3]
    
    for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )                                                                       
    {
        offsetDst = yDst*LCD_WIDTH/2;
        offsetSrc = ySrc*LCD_WIDTH/2;
        for( x=0; x<LCD_WIDTH/2; x++ )
 c107030:	e15b30be 	ldrh	r3, [fp, #-14]
 c107034:	e2833001 	add	r3, r3, #1
 c107038:	e14b30be 	strh	r3, [fp, #-14]
 c10703c:	e15b30be 	ldrh	r3, [fp, #-14]
 c107040:	e353009f 	cmp	r3, #159	; 0x9f
 c107044:	9affffec 	bls	c106ffc <lcd_putWallpaper+0xdc>

    headerSize = bmp[10] + (bmp[11] << 8) + (bmp[12] << 16) + (bmp[13] << 24);

    bmp = bmp + headerSize;
    
    for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )                                                                       
 c107048:	e15b31b0 	ldrh	r3, [fp, #-16]
 c10704c:	e2833001 	add	r3, r3, #1
 c107050:	e14b31b0 	strh	r3, [fp, #-16]
 c107054:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
 c107058:	e2433001 	sub	r3, r3, #1
 c10705c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
 c107060:	e15b31b0 	ldrh	r3, [fp, #-16]
 c107064:	e35300ef 	cmp	r3, #239	; 0xef
 c107068:	9affffce 	bls	c106fa8 <lcd_putWallpaper+0x88>
        offsetSrc = ySrc*LCD_WIDTH/2;
        for( x=0; x<LCD_WIDTH/2; x++ )
            lcd_buffer[offsetDst+x] = ~bmp[offsetSrc+x];
    }

}
 c10706c:	e24bd00c 	sub	sp, fp, #12
 c107070:	e89d6800 	ldm	sp, {fp, sp, lr}
 c107074:	e12fff1e 	bx	lr
 c107078:	0c1ab43c 	.word	0x0c1ab43c

0c10707c <leds_init>:

#include <s3c44b0x.h>
#include <leds.h>

void leds_init( void )
{
 c10707c:	e1a0c00d 	mov	ip, sp
 c107080:	e92dd800 	push	{fp, ip, lr, pc}
 c107084:	e24cb004 	sub	fp, ip, #4
    PDATB |= ((1<<9) |(1<<10));
 c107088:	e59f3018 	ldr	r3, [pc, #24]	; c1070a8 <leds_init+0x2c>
 c10708c:	e59f2014 	ldr	r2, [pc, #20]	; c1070a8 <leds_init+0x2c>
 c107090:	e5922000 	ldr	r2, [r2]
 c107094:	e3822c06 	orr	r2, r2, #1536	; 0x600
 c107098:	e5832000 	str	r2, [r3]
}
 c10709c:	e24bd00c 	sub	sp, fp, #12
 c1070a0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1070a4:	e12fff1e 	bx	lr
 c1070a8:	01d2000c 	.word	0x01d2000c

0c1070ac <led_on>:

void led_on( uint8 led )
{
 c1070ac:	e1a0c00d 	mov	ip, sp
 c1070b0:	e92dd800 	push	{fp, ip, lr, pc}
 c1070b4:	e24cb004 	sub	fp, ip, #4
 c1070b8:	e24dd008 	sub	sp, sp, #8
 c1070bc:	e1a03000 	mov	r3, r0
 c1070c0:	e54b300d 	strb	r3, [fp, #-13]
    if(led == LEFT_LED){
 c1070c4:	e55b300d 	ldrb	r3, [fp, #-13]
 c1070c8:	e3530001 	cmp	r3, #1
 c1070cc:	1a000005 	bne	c1070e8 <led_on+0x3c>
    	PDATB &= ~(1<<9); //pone a 0 el bit 9
 c1070d0:	e59f303c 	ldr	r3, [pc, #60]	; c107114 <led_on+0x68>
 c1070d4:	e59f2038 	ldr	r2, [pc, #56]	; c107114 <led_on+0x68>
 c1070d8:	e5922000 	ldr	r2, [r2]
 c1070dc:	e3c22c02 	bic	r2, r2, #512	; 0x200
 c1070e0:	e5832000 	str	r2, [r3]
 c1070e4:	ea000007 	b	c107108 <led_on+0x5c>
    }else if(led == RIGHT_LED){
 c1070e8:	e55b300d 	ldrb	r3, [fp, #-13]
 c1070ec:	e3530002 	cmp	r3, #2
 c1070f0:	1a000004 	bne	c107108 <led_on+0x5c>
    	PDATB &= ~(1<<10);//pone a 0 el bit 10
 c1070f4:	e59f3018 	ldr	r3, [pc, #24]	; c107114 <led_on+0x68>
 c1070f8:	e59f2014 	ldr	r2, [pc, #20]	; c107114 <led_on+0x68>
 c1070fc:	e5922000 	ldr	r2, [r2]
 c107100:	e3c22b01 	bic	r2, r2, #1024	; 0x400
 c107104:	e5832000 	str	r2, [r3]
    }
}
 c107108:	e24bd00c 	sub	sp, fp, #12
 c10710c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c107110:	e12fff1e 	bx	lr
 c107114:	01d2000c 	.word	0x01d2000c

0c107118 <led_off>:

void led_off( uint8 led )
{
 c107118:	e1a0c00d 	mov	ip, sp
 c10711c:	e92dd800 	push	{fp, ip, lr, pc}
 c107120:	e24cb004 	sub	fp, ip, #4
 c107124:	e24dd008 	sub	sp, sp, #8
 c107128:	e1a03000 	mov	r3, r0
 c10712c:	e54b300d 	strb	r3, [fp, #-13]
	if(led == LEFT_LED){
 c107130:	e55b300d 	ldrb	r3, [fp, #-13]
 c107134:	e3530001 	cmp	r3, #1
 c107138:	1a000005 	bne	c107154 <led_off+0x3c>
	    PDATB |= (1<<9); //pone a 1 el bit 9
 c10713c:	e59f303c 	ldr	r3, [pc, #60]	; c107180 <led_off+0x68>
 c107140:	e59f2038 	ldr	r2, [pc, #56]	; c107180 <led_off+0x68>
 c107144:	e5922000 	ldr	r2, [r2]
 c107148:	e3822c02 	orr	r2, r2, #512	; 0x200
 c10714c:	e5832000 	str	r2, [r3]
 c107150:	ea000007 	b	c107174 <led_off+0x5c>
	}else if(led == RIGHT_LED){
 c107154:	e55b300d 	ldrb	r3, [fp, #-13]
 c107158:	e3530002 	cmp	r3, #2
 c10715c:	1a000004 	bne	c107174 <led_off+0x5c>
	   	PDATB |= (1<<10); //pone a 1 el bit 10
 c107160:	e59f3018 	ldr	r3, [pc, #24]	; c107180 <led_off+0x68>
 c107164:	e59f2014 	ldr	r2, [pc, #20]	; c107180 <led_off+0x68>
 c107168:	e5922000 	ldr	r2, [r2]
 c10716c:	e3822b01 	orr	r2, r2, #1024	; 0x400
 c107170:	e5832000 	str	r2, [r3]
    }
}
 c107174:	e24bd00c 	sub	sp, fp, #12
 c107178:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10717c:	e12fff1e 	bx	lr
 c107180:	01d2000c 	.word	0x01d2000c

0c107184 <led_toggle>:

void led_toggle( uint8 led )
{
 c107184:	e1a0c00d 	mov	ip, sp
 c107188:	e92dd800 	push	{fp, ip, lr, pc}
 c10718c:	e24cb004 	sub	fp, ip, #4
 c107190:	e24dd008 	sub	sp, sp, #8
 c107194:	e1a03000 	mov	r3, r0
 c107198:	e54b300d 	strb	r3, [fp, #-13]
	if(led == LEFT_LED){
 c10719c:	e55b300d 	ldrb	r3, [fp, #-13]
 c1071a0:	e3530001 	cmp	r3, #1
 c1071a4:	1a000005 	bne	c1071c0 <led_toggle+0x3c>
		PDATB ^= (1<<9); //invierte el bit 9
 c1071a8:	e59f303c 	ldr	r3, [pc, #60]	; c1071ec <led_toggle+0x68>
 c1071ac:	e59f2038 	ldr	r2, [pc, #56]	; c1071ec <led_toggle+0x68>
 c1071b0:	e5922000 	ldr	r2, [r2]
 c1071b4:	e2222c02 	eor	r2, r2, #512	; 0x200
 c1071b8:	e5832000 	str	r2, [r3]
 c1071bc:	ea000007 	b	c1071e0 <led_toggle+0x5c>
	}else if(led == RIGHT_LED){
 c1071c0:	e55b300d 	ldrb	r3, [fp, #-13]
 c1071c4:	e3530002 	cmp	r3, #2
 c1071c8:	1a000004 	bne	c1071e0 <led_toggle+0x5c>
	   	PDATB ^= (1<<10); //invierte  el bit 10
 c1071cc:	e59f3018 	ldr	r3, [pc, #24]	; c1071ec <led_toggle+0x68>
 c1071d0:	e59f2014 	ldr	r2, [pc, #20]	; c1071ec <led_toggle+0x68>
 c1071d4:	e5922000 	ldr	r2, [r2]
 c1071d8:	e2222b01 	eor	r2, r2, #1024	; 0x400
 c1071dc:	e5832000 	str	r2, [r3]
	}
}
 c1071e0:	e24bd00c 	sub	sp, fp, #12
 c1071e4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1071e8:	e12fff1e 	bx	lr
 c1071ec:	01d2000c 	.word	0x01d2000c

0c1071f0 <led_status>:

uint8 led_status( uint8 led )
{
 c1071f0:	e1a0c00d 	mov	ip, sp
 c1071f4:	e92dd800 	push	{fp, ip, lr, pc}
 c1071f8:	e24cb004 	sub	fp, ip, #4
 c1071fc:	e24dd008 	sub	sp, sp, #8
 c107200:	e1a03000 	mov	r3, r0
 c107204:	e54b300d 	strb	r3, [fp, #-13]
	switch(led){
 c107208:	e55b300d 	ldrb	r3, [fp, #-13]
 c10720c:	e3530001 	cmp	r3, #1
 c107210:	0a00000a 	beq	c107240 <led_status+0x50>
 c107214:	e3530002 	cmp	r3, #2
 c107218:	1a000011 	bne	c107264 <led_status+0x74>
	case RIGHT_LED:
		if(PDATB &(1<<10)){
 c10721c:	e59f3054 	ldr	r3, [pc, #84]	; c107278 <led_status+0x88>
 c107220:	e5933000 	ldr	r3, [r3]
 c107224:	e2033b01 	and	r3, r3, #1024	; 0x400
 c107228:	e3530000 	cmp	r3, #0
 c10722c:	0a000001 	beq	c107238 <led_status+0x48>
			return 0;
 c107230:	e3a03000 	mov	r3, #0
 c107234:	ea00000b 	b	c107268 <led_status+0x78>
		}else{return 1;}
 c107238:	e3a03001 	mov	r3, #1
 c10723c:	ea000009 	b	c107268 <led_status+0x78>

	case LEFT_LED:
			if (PDATB &(1<<9)){
 c107240:	e59f3030 	ldr	r3, [pc, #48]	; c107278 <led_status+0x88>
 c107244:	e5933000 	ldr	r3, [r3]
 c107248:	e2033c02 	and	r3, r3, #512	; 0x200
 c10724c:	e3530000 	cmp	r3, #0
 c107250:	0a000001 	beq	c10725c <led_status+0x6c>
				return 0;
 c107254:	e3a03000 	mov	r3, #0
 c107258:	ea000002 	b	c107268 <led_status+0x78>

			}else{return 1;}
 c10725c:	e3a03001 	mov	r3, #1
 c107260:	ea000000 	b	c107268 <led_status+0x78>

	}
	return 1;
 c107264:	e3a03001 	mov	r3, #1
    }
    else if((led == LEFT_LED) && (PDATB &(1<<9))){ //si el bit 9 vale 1 significa que
    										  //que esta apagado y devuelve 0
    	return 0;
    }else{return 1;}*/
}
 c107268:	e1a00003 	mov	r0, r3
 c10726c:	e24bd00c 	sub	sp, fp, #12
 c107270:	e89d6800 	ldm	sp, {fp, sp, lr}
 c107274:	e12fff1e 	bx	lr
 c107278:	01d2000c 	.word	0x01d2000c

0c10727c <pbs_init>:
#include <timers.h>

extern void isr_PB_dummy( void );

void pbs_init( void )
{
 c10727c:	e1a0c00d 	mov	ip, sp
 c107280:	e92dd800 	push	{fp, ip, lr, pc}
 c107284:	e24cb004 	sub	fp, ip, #4
    timers_init();
 c107288:	eb0006da 	bl	c108df8 <timers_init>
}
 c10728c:	e24bd00c 	sub	sp, fp, #12
 c107290:	e89d6800 	ldm	sp, {fp, sp, lr}
 c107294:	e12fff1e 	bx	lr

0c107298 <pb_scan>:

uint8 pb_scan( void )
{
 c107298:	e1a0c00d 	mov	ip, sp
 c10729c:	e92dd800 	push	{fp, ip, lr, pc}
 c1072a0:	e24cb004 	sub	fp, ip, #4
    if(!(PDATG & PB_LEFT))
 c1072a4:	e59f3044 	ldr	r3, [pc, #68]	; c1072f0 <pb_scan+0x58>
 c1072a8:	e5933000 	ldr	r3, [r3]
 c1072ac:	e2033040 	and	r3, r3, #64	; 0x40
 c1072b0:	e3530000 	cmp	r3, #0
 c1072b4:	1a000001 	bne	c1072c0 <pb_scan+0x28>
        return PB_LEFT;
 c1072b8:	e3a03040 	mov	r3, #64	; 0x40
 c1072bc:	ea000007 	b	c1072e0 <pb_scan+0x48>
    else if(!(PDATG & PB_RIGHT))
 c1072c0:	e59f3028 	ldr	r3, [pc, #40]	; c1072f0 <pb_scan+0x58>
 c1072c4:	e5933000 	ldr	r3, [r3]
 c1072c8:	e2033080 	and	r3, r3, #128	; 0x80
 c1072cc:	e3530000 	cmp	r3, #0
 c1072d0:	1a000001 	bne	c1072dc <pb_scan+0x44>
        return PB_RIGHT;
 c1072d4:	e3a03080 	mov	r3, #128	; 0x80
 c1072d8:	ea000000 	b	c1072e0 <pb_scan+0x48>
    else
        return PB_FAILURE;
 c1072dc:	e3a030ff 	mov	r3, #255	; 0xff
}
 c1072e0:	e1a00003 	mov	r0, r3
 c1072e4:	e24bd00c 	sub	sp, fp, #12
 c1072e8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1072ec:	e12fff1e 	bx	lr
 c1072f0:	01d20044 	.word	0x01d20044

0c1072f4 <pb_pressed>:

uint8 pb_pressed( void )
{
 c1072f4:	e1a0c00d 	mov	ip, sp
 c1072f8:	e92dd800 	push	{fp, ip, lr, pc}
 c1072fc:	e24cb004 	sub	fp, ip, #4
    return pb_scan() != PB_FAILURE;
 c107300:	ebffffe4 	bl	c107298 <pb_scan>
 c107304:	e1a03000 	mov	r3, r0
 c107308:	e35300ff 	cmp	r3, #255	; 0xff
 c10730c:	03a03000 	moveq	r3, #0
 c107310:	13a03001 	movne	r3, #1
 c107314:	e20330ff 	and	r3, r3, #255	; 0xff
}
 c107318:	e1a00003 	mov	r0, r3
 c10731c:	e24bd00c 	sub	sp, fp, #12
 c107320:	e89d6800 	ldm	sp, {fp, sp, lr}
 c107324:	e12fff1e 	bx	lr

0c107328 <pb_getchar>:

uint8 pb_getchar( void )
{
 c107328:	e1a0c00d 	mov	ip, sp
 c10732c:	e92dd800 	push	{fp, ip, lr, pc}
 c107330:	e24cb004 	sub	fp, ip, #4
 c107334:	e24dd008 	sub	sp, sp, #8
	uint8 scancode;

	while( (pb_scan() == PB_FAILURE ));
 c107338:	e1a00000 	nop			; (mov r0, r0)
 c10733c:	ebffffd5 	bl	c107298 <pb_scan>
 c107340:	e1a03000 	mov	r3, r0
 c107344:	e35300ff 	cmp	r3, #255	; 0xff
 c107348:	0afffffb 	beq	c10733c <pb_getchar+0x14>
	sw_delay_ms( PB_KEYDOWN_DELAY );
 c10734c:	e3a0001e 	mov	r0, #30
 c107350:	eb00077f 	bl	c109154 <sw_delay_ms>

	scancode = pb_scan();
 c107354:	ebffffcf 	bl	c107298 <pb_scan>
 c107358:	e1a03000 	mov	r3, r0
 c10735c:	e54b300d 	strb	r3, [fp, #-13]

	while((pb_scan() != PB_FAILURE ));
 c107360:	e1a00000 	nop			; (mov r0, r0)
 c107364:	ebffffcb 	bl	c107298 <pb_scan>
 c107368:	e1a03000 	mov	r3, r0
 c10736c:	e35300ff 	cmp	r3, #255	; 0xff
 c107370:	1afffffb 	bne	c107364 <pb_getchar+0x3c>
	sw_delay_ms( PB_KEYUP_DELAY );
 c107374:	e3a00064 	mov	r0, #100	; 0x64
 c107378:	eb000775 	bl	c109154 <sw_delay_ms>

	return scancode;
 c10737c:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c107380:	e1a00003 	mov	r0, r3
 c107384:	e24bd00c 	sub	sp, fp, #12
 c107388:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10738c:	e12fff1e 	bx	lr

0c107390 <pb_getchartime>:

uint8 pb_getchartime( uint16 *ms )
{
 c107390:	e1a0c00d 	mov	ip, sp
 c107394:	e92dd800 	push	{fp, ip, lr, pc}
 c107398:	e24cb004 	sub	fp, ip, #4
 c10739c:	e24dd010 	sub	sp, sp, #16
 c1073a0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    uint8 scancode;
    
    while( (pb_scan() == PB_FAILURE ));
 c1073a4:	e1a00000 	nop			; (mov r0, r0)
 c1073a8:	ebffffba 	bl	c107298 <pb_scan>
 c1073ac:	e1a03000 	mov	r3, r0
 c1073b0:	e35300ff 	cmp	r3, #255	; 0xff
 c1073b4:	0afffffb 	beq	c1073a8 <pb_getchartime+0x18>
    timer3_start();
 c1073b8:	eb0007cc 	bl	c1092f0 <timer3_start>
    sw_delay_ms( PB_KEYDOWN_DELAY );
 c1073bc:	e3a0001e 	mov	r0, #30
 c1073c0:	eb000763 	bl	c109154 <sw_delay_ms>
    
    scancode = pb_scan();
 c1073c4:	ebffffb3 	bl	c107298 <pb_scan>
 c1073c8:	e1a03000 	mov	r3, r0
 c1073cc:	e54b300d 	strb	r3, [fp, #-13]
    
    while((pb_scan() != PB_FAILURE ));
 c1073d0:	e1a00000 	nop			; (mov r0, r0)
 c1073d4:	ebffffaf 	bl	c107298 <pb_scan>
 c1073d8:	e1a03000 	mov	r3, r0
 c1073dc:	e35300ff 	cmp	r3, #255	; 0xff
 c1073e0:	1afffffb 	bne	c1073d4 <pb_getchartime+0x44>
    *ms = timer3_stop() / 10;
 c1073e4:	eb0007ed 	bl	c1093a0 <timer3_stop>
 c1073e8:	e1a03000 	mov	r3, r0
 c1073ec:	e1a02003 	mov	r2, r3
 c1073f0:	e59f3030 	ldr	r3, [pc, #48]	; c107428 <pb_getchartime+0x98>
 c1073f4:	e0831392 	umull	r1, r3, r2, r3
 c1073f8:	e1a031a3 	lsr	r3, r3, #3
 c1073fc:	e1a03803 	lsl	r3, r3, #16
 c107400:	e1a02823 	lsr	r2, r3, #16
 c107404:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c107408:	e1c320b0 	strh	r2, [r3]
    sw_delay_ms( PB_KEYUP_DELAY );
 c10740c:	e3a00064 	mov	r0, #100	; 0x64
 c107410:	eb00074f 	bl	c109154 <sw_delay_ms>

    return scancode;
 c107414:	e55b300d 	ldrb	r3, [fp, #-13]
}
 c107418:	e1a00003 	mov	r0, r3
 c10741c:	e24bd00c 	sub	sp, fp, #12
 c107420:	e89d6800 	ldm	sp, {fp, sp, lr}
 c107424:	e12fff1e 	bx	lr
 c107428:	cccccccd 	.word	0xcccccccd

0c10742c <pb_timeout_getchar>:

uint8 pb_timeout_getchar( uint16 ms )
{
 c10742c:	e1a0c00d 	mov	ip, sp
 c107430:	e92dd800 	push	{fp, ip, lr, pc}
 c107434:	e24cb004 	sub	fp, ip, #4
 c107438:	e24dd010 	sub	sp, sp, #16
 c10743c:	e1a03000 	mov	r3, r0
 c107440:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    uint8 scancode;
	timer3_start_timeout(ms*10);
 c107444:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c107448:	e1a02003 	mov	r2, r3
 c10744c:	e1a02102 	lsl	r2, r2, #2
 c107450:	e0823003 	add	r3, r2, r3
 c107454:	e1a03083 	lsl	r3, r3, #1
 c107458:	e1a03803 	lsl	r3, r3, #16
 c10745c:	e1a03823 	lsr	r3, r3, #16
 c107460:	e1a00003 	mov	r0, r3
 c107464:	eb0007e2 	bl	c1093f4 <timer3_start_timeout>
    while( (pb_scan() == PB_FAILURE )&& !timer3_timeout());
 c107468:	e1a00000 	nop			; (mov r0, r0)
 c10746c:	ebffff89 	bl	c107298 <pb_scan>
 c107470:	e1a03000 	mov	r3, r0
 c107474:	e35300ff 	cmp	r3, #255	; 0xff
 c107478:	1a000003 	bne	c10748c <pb_timeout_getchar+0x60>
 c10747c:	eb00080a 	bl	c1094ac <timer3_timeout>
 c107480:	e1a03000 	mov	r3, r0
 c107484:	e3530000 	cmp	r3, #0
 c107488:	0afffff7 	beq	c10746c <pb_timeout_getchar+0x40>
	sw_delay_ms( PB_KEYDOWN_DELAY );
 c10748c:	e3a0001e 	mov	r0, #30
 c107490:	eb00072f 	bl	c109154 <sw_delay_ms>

	scancode = pb_scan();
 c107494:	ebffff7f 	bl	c107298 <pb_scan>
 c107498:	e1a03000 	mov	r3, r0
 c10749c:	e54b300d 	strb	r3, [fp, #-13]

	while((pb_scan() != PB_FAILURE ) && !timer3_timeout());
 c1074a0:	e1a00000 	nop			; (mov r0, r0)
 c1074a4:	ebffff7b 	bl	c107298 <pb_scan>
 c1074a8:	e1a03000 	mov	r3, r0
 c1074ac:	e35300ff 	cmp	r3, #255	; 0xff
 c1074b0:	0a000003 	beq	c1074c4 <pb_timeout_getchar+0x98>
 c1074b4:	eb0007fc 	bl	c1094ac <timer3_timeout>
 c1074b8:	e1a03000 	mov	r3, r0
 c1074bc:	e3530000 	cmp	r3, #0
 c1074c0:	0afffff7 	beq	c1074a4 <pb_timeout_getchar+0x78>
	if(timer3_timeout()) return PB_TIMEOUT;
 c1074c4:	eb0007f8 	bl	c1094ac <timer3_timeout>
 c1074c8:	e1a03000 	mov	r3, r0
 c1074cc:	e3530000 	cmp	r3, #0
 c1074d0:	0a000001 	beq	c1074dc <pb_timeout_getchar+0xb0>
 c1074d4:	e3a030fe 	mov	r3, #254	; 0xfe
 c1074d8:	ea000002 	b	c1074e8 <pb_timeout_getchar+0xbc>
	sw_delay_ms( PB_KEYUP_DELAY );
 c1074dc:	e3a00064 	mov	r0, #100	; 0x64
 c1074e0:	eb00071b 	bl	c109154 <sw_delay_ms>

	return scancode;
 c1074e4:	e55b300d 	ldrb	r3, [fp, #-13]

}
 c1074e8:	e1a00003 	mov	r0, r3
 c1074ec:	e24bd00c 	sub	sp, fp, #12
 c1074f0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1074f4:	e12fff1e 	bx	lr

0c1074f8 <pbs_open>:

void pbs_open( void (*isr)(void) )
{
 c1074f8:	e1a0c00d 	mov	ip, sp
 c1074fc:	e92dd800 	push	{fp, ip, lr, pc}
 c107500:	e24cb004 	sub	fp, ip, #4
 c107504:	e24dd008 	sub	sp, sp, #8
 c107508:	e50b0010 	str	r0, [fp, #-16]
    pISR_PB   = isr;
 c10750c:	e59f303c 	ldr	r3, [pc, #60]	; c107550 <pbs_open+0x58>
 c107510:	e51b2010 	ldr	r2, [fp, #-16]
 c107514:	e5832000 	str	r2, [r3]
    EXTINTPND = 0x0;
 c107518:	e59f3034 	ldr	r3, [pc, #52]	; c107554 <pbs_open+0x5c>
 c10751c:	e3a02000 	mov	r2, #0
 c107520:	e5832000 	str	r2, [r3]
    I_ISPC    = BIT_EINT4567;
 c107524:	e59f302c 	ldr	r3, [pc, #44]	; c107558 <pbs_open+0x60>
 c107528:	e3a02602 	mov	r2, #2097152	; 0x200000
 c10752c:	e5832000 	str	r2, [r3]
    INTMSK   &= ~(BIT_GLOBAL | BIT_EINT4567);
 c107530:	e59f3024 	ldr	r3, [pc, #36]	; c10755c <pbs_open+0x64>
 c107534:	e59f2020 	ldr	r2, [pc, #32]	; c10755c <pbs_open+0x64>
 c107538:	e5922000 	ldr	r2, [r2]
 c10753c:	e3c22642 	bic	r2, r2, #69206016	; 0x4200000
 c107540:	e5832000 	str	r2, [r3]
}
 c107544:	e24bd00c 	sub	sp, fp, #12
 c107548:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10754c:	e12fff1e 	bx	lr
 c107550:	0c7fff74 	.word	0x0c7fff74
 c107554:	01d20054 	.word	0x01d20054
 c107558:	01e00024 	.word	0x01e00024
 c10755c:	01e0000c 	.word	0x01e0000c

0c107560 <pbs_close>:

void pbs_close( void )
{
 c107560:	e1a0c00d 	mov	ip, sp
 c107564:	e92dd800 	push	{fp, ip, lr, pc}
 c107568:	e24cb004 	sub	fp, ip, #4
    INTMSK  |= BIT_EINT4567;
 c10756c:	e59f3024 	ldr	r3, [pc, #36]	; c107598 <pbs_close+0x38>
 c107570:	e59f2020 	ldr	r2, [pc, #32]	; c107598 <pbs_close+0x38>
 c107574:	e5922000 	ldr	r2, [r2]
 c107578:	e3822602 	orr	r2, r2, #2097152	; 0x200000
 c10757c:	e5832000 	str	r2, [r3]
    pISR_PB  = isr_PB_dummy;
 c107580:	e59f3014 	ldr	r3, [pc, #20]	; c10759c <pbs_close+0x3c>
 c107584:	e59f2014 	ldr	r2, [pc, #20]	; c1075a0 <pbs_close+0x40>
 c107588:	e5832000 	str	r2, [r3]
}
 c10758c:	e24bd00c 	sub	sp, fp, #12
 c107590:	e89d6800 	ldm	sp, {fp, sp, lr}
 c107594:	e12fff1e 	bx	lr
 c107598:	01e0000c 	.word	0x01e0000c
 c10759c:	0c7fff74 	.word	0x0c7fff74
 c1075a0:	0c10899c 	.word	0x0c10899c

0c1075a4 <rtc_init>:
#define BCD2bin(n) (((n)&15)+ ((n)>>4)*10)

extern void isr_TICK_dummy( void );

void rtc_init( void )
{
 c1075a4:	e1a0c00d 	mov	ip, sp
 c1075a8:	e92dd800 	push	{fp, ip, lr, pc}
 c1075ac:	e24cb004 	sub	fp, ip, #4
    TICNT   = 0x80;
 c1075b0:	e59f30ec 	ldr	r3, [pc, #236]	; c1076a4 <rtc_init+0x100>
 c1075b4:	e3a02080 	mov	r2, #128	; 0x80
 c1075b8:	e5832000 	str	r2, [r3]
    RTCALM  = 0x0;
 c1075bc:	e59f30e4 	ldr	r3, [pc, #228]	; c1076a8 <rtc_init+0x104>
 c1075c0:	e3a02000 	mov	r2, #0
 c1075c4:	e5832000 	str	r2, [r3]
    RTCRST  = 0x0;
 c1075c8:	e59f30dc 	ldr	r3, [pc, #220]	; c1076ac <rtc_init+0x108>
 c1075cc:	e3a02000 	mov	r2, #0
 c1075d0:	e5832000 	str	r2, [r3]
        
    RTCCON  |= (1<<0);
 c1075d4:	e59f30d4 	ldr	r3, [pc, #212]	; c1076b0 <rtc_init+0x10c>
 c1075d8:	e59f20d0 	ldr	r2, [pc, #208]	; c1076b0 <rtc_init+0x10c>
 c1075dc:	e5922000 	ldr	r2, [r2]
 c1075e0:	e3822001 	orr	r2, r2, #1
 c1075e4:	e5832000 	str	r2, [r3]
    
    BCDYEAR = 0x13;
 c1075e8:	e59f30c4 	ldr	r3, [pc, #196]	; c1076b4 <rtc_init+0x110>
 c1075ec:	e3a02013 	mov	r2, #19
 c1075f0:	e5832000 	str	r2, [r3]
    BCDMON  = 0x01;
 c1075f4:	e59f30bc 	ldr	r3, [pc, #188]	; c1076b8 <rtc_init+0x114>
 c1075f8:	e3a02001 	mov	r2, #1
 c1075fc:	e5832000 	str	r2, [r3]
    BCDDAY  = 0x01;
 c107600:	e59f30b4 	ldr	r3, [pc, #180]	; c1076bc <rtc_init+0x118>
 c107604:	e3a02001 	mov	r2, #1
 c107608:	e5832000 	str	r2, [r3]
    BCDDATE = 0x03;
 c10760c:	e59f30ac 	ldr	r3, [pc, #172]	; c1076c0 <rtc_init+0x11c>
 c107610:	e3a02003 	mov	r2, #3
 c107614:	e5832000 	str	r2, [r3]
    BCDHOUR = 0x00;
 c107618:	e59f30a4 	ldr	r3, [pc, #164]	; c1076c4 <rtc_init+0x120>
 c10761c:	e3a02000 	mov	r2, #0
 c107620:	e5832000 	str	r2, [r3]
    BCDMIN  = 0x00;
 c107624:	e59f309c 	ldr	r3, [pc, #156]	; c1076c8 <rtc_init+0x124>
 c107628:	e3a02000 	mov	r2, #0
 c10762c:	e5832000 	str	r2, [r3]
    BCDSEC  = 0x00;
 c107630:	e59f3094 	ldr	r3, [pc, #148]	; c1076cc <rtc_init+0x128>
 c107634:	e3a02000 	mov	r2, #0
 c107638:	e5832000 	str	r2, [r3]

    ALMYEAR = 0x0;
 c10763c:	e59f308c 	ldr	r3, [pc, #140]	; c1076d0 <rtc_init+0x12c>
 c107640:	e3a02000 	mov	r2, #0
 c107644:	e5832000 	str	r2, [r3]
    ALMMON  = 0x0;
 c107648:	e59f3084 	ldr	r3, [pc, #132]	; c1076d4 <rtc_init+0x130>
 c10764c:	e3a02000 	mov	r2, #0
 c107650:	e5832000 	str	r2, [r3]
    ALMDAY  = 0x0;
 c107654:	e59f307c 	ldr	r3, [pc, #124]	; c1076d8 <rtc_init+0x134>
 c107658:	e3a02000 	mov	r2, #0
 c10765c:	e5832000 	str	r2, [r3]
    ALMHOUR = 0x0;
 c107660:	e59f3074 	ldr	r3, [pc, #116]	; c1076dc <rtc_init+0x138>
 c107664:	e3a02000 	mov	r2, #0
 c107668:	e5832000 	str	r2, [r3]
    ALMMIN  = 0x0;
 c10766c:	e59f306c 	ldr	r3, [pc, #108]	; c1076e0 <rtc_init+0x13c>
 c107670:	e3a02000 	mov	r2, #0
 c107674:	e5832000 	str	r2, [r3]
    ALMSEC  = 0x0;
 c107678:	e59f3064 	ldr	r3, [pc, #100]	; c1076e4 <rtc_init+0x140>
 c10767c:	e3a02000 	mov	r2, #0
 c107680:	e5832000 	str	r2, [r3]

    RTCCON &= ~(1<<0);
 c107684:	e59f3024 	ldr	r3, [pc, #36]	; c1076b0 <rtc_init+0x10c>
 c107688:	e59f2020 	ldr	r2, [pc, #32]	; c1076b0 <rtc_init+0x10c>
 c10768c:	e5922000 	ldr	r2, [r2]
 c107690:	e3c22001 	bic	r2, r2, #1
 c107694:	e5832000 	str	r2, [r3]
}
 c107698:	e24bd00c 	sub	sp, fp, #12
 c10769c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1076a0:	e12fff1e 	bx	lr
 c1076a4:	01d7008c 	.word	0x01d7008c
 c1076a8:	01d70050 	.word	0x01d70050
 c1076ac:	01d7006c 	.word	0x01d7006c
 c1076b0:	01d70040 	.word	0x01d70040
 c1076b4:	01d70088 	.word	0x01d70088
 c1076b8:	01d70084 	.word	0x01d70084
 c1076bc:	01d7007c 	.word	0x01d7007c
 c1076c0:	01d70080 	.word	0x01d70080
 c1076c4:	01d70078 	.word	0x01d70078
 c1076c8:	01d70074 	.word	0x01d70074
 c1076cc:	01d70070 	.word	0x01d70070
 c1076d0:	01d70068 	.word	0x01d70068
 c1076d4:	01d70064 	.word	0x01d70064
 c1076d8:	01d70060 	.word	0x01d70060
 c1076dc:	01d7005c 	.word	0x01d7005c
 c1076e0:	01d70058 	.word	0x01d70058
 c1076e4:	01d70054 	.word	0x01d70054

0c1076e8 <rtc_puttime>:

void rtc_puttime( rtc_time_t *rtc_time )
{
 c1076e8:	e1a0c00d 	mov	ip, sp
 c1076ec:	e92dd800 	push	{fp, ip, lr, pc}
 c1076f0:	e24cb004 	sub	fp, ip, #4
 c1076f4:	e24dd008 	sub	sp, sp, #8
 c1076f8:	e50b0010 	str	r0, [fp, #-16]
    RTCCON |= (1<<0);
 c1076fc:	e59f3278 	ldr	r3, [pc, #632]	; c10797c <rtc_puttime+0x294>
 c107700:	e59f2274 	ldr	r2, [pc, #628]	; c10797c <rtc_puttime+0x294>
 c107704:	e5922000 	ldr	r2, [r2]
 c107708:	e3822001 	orr	r2, r2, #1
 c10770c:	e5832000 	str	r2, [r3]
    
   BCDYEAR = bin2BCD(rtc_time->year);
 c107710:	e59f0268 	ldr	r0, [pc, #616]	; c107980 <rtc_puttime+0x298>
 c107714:	e51b3010 	ldr	r3, [fp, #-16]
 c107718:	e5d32006 	ldrb	r2, [r3, #6]
 c10771c:	e59f3260 	ldr	r3, [pc, #608]	; c107984 <rtc_puttime+0x29c>
 c107720:	e0831392 	umull	r1, r3, r2, r3
 c107724:	e1a031a3 	lsr	r3, r3, #3
 c107728:	e20330ff 	and	r3, r3, #255	; 0xff
 c10772c:	e1a0c203 	lsl	ip, r3, #4
 c107730:	e51b3010 	ldr	r3, [fp, #-16]
 c107734:	e5d32006 	ldrb	r2, [r3, #6]
 c107738:	e59f3244 	ldr	r3, [pc, #580]	; c107984 <rtc_puttime+0x29c>
 c10773c:	e0831392 	umull	r1, r3, r2, r3
 c107740:	e1a011a3 	lsr	r1, r3, #3
 c107744:	e1a03001 	mov	r3, r1
 c107748:	e1a03103 	lsl	r3, r3, #2
 c10774c:	e0833001 	add	r3, r3, r1
 c107750:	e1a03083 	lsl	r3, r3, #1
 c107754:	e0633002 	rsb	r3, r3, r2
 c107758:	e20330ff 	and	r3, r3, #255	; 0xff
 c10775c:	e08c3003 	add	r3, ip, r3
 c107760:	e5803000 	str	r3, [r0]
   BCDMON  = bin2BCD(rtc_time->mon);
 c107764:	e59f021c 	ldr	r0, [pc, #540]	; c107988 <rtc_puttime+0x2a0>
 c107768:	e51b3010 	ldr	r3, [fp, #-16]
 c10776c:	e5d32005 	ldrb	r2, [r3, #5]
 c107770:	e59f320c 	ldr	r3, [pc, #524]	; c107984 <rtc_puttime+0x29c>
 c107774:	e0831392 	umull	r1, r3, r2, r3
 c107778:	e1a031a3 	lsr	r3, r3, #3
 c10777c:	e20330ff 	and	r3, r3, #255	; 0xff
 c107780:	e1a0c203 	lsl	ip, r3, #4
 c107784:	e51b3010 	ldr	r3, [fp, #-16]
 c107788:	e5d32005 	ldrb	r2, [r3, #5]
 c10778c:	e59f31f0 	ldr	r3, [pc, #496]	; c107984 <rtc_puttime+0x29c>
 c107790:	e0831392 	umull	r1, r3, r2, r3
 c107794:	e1a011a3 	lsr	r1, r3, #3
 c107798:	e1a03001 	mov	r3, r1
 c10779c:	e1a03103 	lsl	r3, r3, #2
 c1077a0:	e0833001 	add	r3, r3, r1
 c1077a4:	e1a03083 	lsl	r3, r3, #1
 c1077a8:	e0633002 	rsb	r3, r3, r2
 c1077ac:	e20330ff 	and	r3, r3, #255	; 0xff
 c1077b0:	e08c3003 	add	r3, ip, r3
 c1077b4:	e5803000 	str	r3, [r0]
   BCDDAY  = bin2BCD(rtc_time->mday);
 c1077b8:	e59f01cc 	ldr	r0, [pc, #460]	; c10798c <rtc_puttime+0x2a4>
 c1077bc:	e51b3010 	ldr	r3, [fp, #-16]
 c1077c0:	e5d32003 	ldrb	r2, [r3, #3]
 c1077c4:	e59f31b8 	ldr	r3, [pc, #440]	; c107984 <rtc_puttime+0x29c>
 c1077c8:	e0831392 	umull	r1, r3, r2, r3
 c1077cc:	e1a031a3 	lsr	r3, r3, #3
 c1077d0:	e20330ff 	and	r3, r3, #255	; 0xff
 c1077d4:	e1a0c203 	lsl	ip, r3, #4
 c1077d8:	e51b3010 	ldr	r3, [fp, #-16]
 c1077dc:	e5d32003 	ldrb	r2, [r3, #3]
 c1077e0:	e59f319c 	ldr	r3, [pc, #412]	; c107984 <rtc_puttime+0x29c>
 c1077e4:	e0831392 	umull	r1, r3, r2, r3
 c1077e8:	e1a011a3 	lsr	r1, r3, #3
 c1077ec:	e1a03001 	mov	r3, r1
 c1077f0:	e1a03103 	lsl	r3, r3, #2
 c1077f4:	e0833001 	add	r3, r3, r1
 c1077f8:	e1a03083 	lsl	r3, r3, #1
 c1077fc:	e0633002 	rsb	r3, r3, r2
 c107800:	e20330ff 	and	r3, r3, #255	; 0xff
 c107804:	e08c3003 	add	r3, ip, r3
 c107808:	e5803000 	str	r3, [r0]
   BCDDATE = bin2BCD(rtc_time->wday);
 c10780c:	e59f017c 	ldr	r0, [pc, #380]	; c107990 <rtc_puttime+0x2a8>
 c107810:	e51b3010 	ldr	r3, [fp, #-16]
 c107814:	e5d32004 	ldrb	r2, [r3, #4]
 c107818:	e59f3164 	ldr	r3, [pc, #356]	; c107984 <rtc_puttime+0x29c>
 c10781c:	e0831392 	umull	r1, r3, r2, r3
 c107820:	e1a031a3 	lsr	r3, r3, #3
 c107824:	e20330ff 	and	r3, r3, #255	; 0xff
 c107828:	e1a0c203 	lsl	ip, r3, #4
 c10782c:	e51b3010 	ldr	r3, [fp, #-16]
 c107830:	e5d32004 	ldrb	r2, [r3, #4]
 c107834:	e59f3148 	ldr	r3, [pc, #328]	; c107984 <rtc_puttime+0x29c>
 c107838:	e0831392 	umull	r1, r3, r2, r3
 c10783c:	e1a011a3 	lsr	r1, r3, #3
 c107840:	e1a03001 	mov	r3, r1
 c107844:	e1a03103 	lsl	r3, r3, #2
 c107848:	e0833001 	add	r3, r3, r1
 c10784c:	e1a03083 	lsl	r3, r3, #1
 c107850:	e0633002 	rsb	r3, r3, r2
 c107854:	e20330ff 	and	r3, r3, #255	; 0xff
 c107858:	e08c3003 	add	r3, ip, r3
 c10785c:	e5803000 	str	r3, [r0]
   BCDHOUR = bin2BCD(rtc_time->hour);
 c107860:	e59f012c 	ldr	r0, [pc, #300]	; c107994 <rtc_puttime+0x2ac>
 c107864:	e51b3010 	ldr	r3, [fp, #-16]
 c107868:	e5d32002 	ldrb	r2, [r3, #2]
 c10786c:	e59f3110 	ldr	r3, [pc, #272]	; c107984 <rtc_puttime+0x29c>
 c107870:	e0831392 	umull	r1, r3, r2, r3
 c107874:	e1a031a3 	lsr	r3, r3, #3
 c107878:	e20330ff 	and	r3, r3, #255	; 0xff
 c10787c:	e1a0c203 	lsl	ip, r3, #4
 c107880:	e51b3010 	ldr	r3, [fp, #-16]
 c107884:	e5d32002 	ldrb	r2, [r3, #2]
 c107888:	e59f30f4 	ldr	r3, [pc, #244]	; c107984 <rtc_puttime+0x29c>
 c10788c:	e0831392 	umull	r1, r3, r2, r3
 c107890:	e1a011a3 	lsr	r1, r3, #3
 c107894:	e1a03001 	mov	r3, r1
 c107898:	e1a03103 	lsl	r3, r3, #2
 c10789c:	e0833001 	add	r3, r3, r1
 c1078a0:	e1a03083 	lsl	r3, r3, #1
 c1078a4:	e0633002 	rsb	r3, r3, r2
 c1078a8:	e20330ff 	and	r3, r3, #255	; 0xff
 c1078ac:	e08c3003 	add	r3, ip, r3
 c1078b0:	e5803000 	str	r3, [r0]
   BCDMIN  = bin2BCD(rtc_time->min);
 c1078b4:	e59f00dc 	ldr	r0, [pc, #220]	; c107998 <rtc_puttime+0x2b0>
 c1078b8:	e51b3010 	ldr	r3, [fp, #-16]
 c1078bc:	e5d32001 	ldrb	r2, [r3, #1]
 c1078c0:	e59f30bc 	ldr	r3, [pc, #188]	; c107984 <rtc_puttime+0x29c>
 c1078c4:	e0831392 	umull	r1, r3, r2, r3
 c1078c8:	e1a031a3 	lsr	r3, r3, #3
 c1078cc:	e20330ff 	and	r3, r3, #255	; 0xff
 c1078d0:	e1a0c203 	lsl	ip, r3, #4
 c1078d4:	e51b3010 	ldr	r3, [fp, #-16]
 c1078d8:	e5d32001 	ldrb	r2, [r3, #1]
 c1078dc:	e59f30a0 	ldr	r3, [pc, #160]	; c107984 <rtc_puttime+0x29c>
 c1078e0:	e0831392 	umull	r1, r3, r2, r3
 c1078e4:	e1a011a3 	lsr	r1, r3, #3
 c1078e8:	e1a03001 	mov	r3, r1
 c1078ec:	e1a03103 	lsl	r3, r3, #2
 c1078f0:	e0833001 	add	r3, r3, r1
 c1078f4:	e1a03083 	lsl	r3, r3, #1
 c1078f8:	e0633002 	rsb	r3, r3, r2
 c1078fc:	e20330ff 	and	r3, r3, #255	; 0xff
 c107900:	e08c3003 	add	r3, ip, r3
 c107904:	e5803000 	str	r3, [r0]
   BCDSEC  = bin2BCD(rtc_time->sec);
 c107908:	e59f008c 	ldr	r0, [pc, #140]	; c10799c <rtc_puttime+0x2b4>
 c10790c:	e51b3010 	ldr	r3, [fp, #-16]
 c107910:	e5d32000 	ldrb	r2, [r3]
 c107914:	e59f3068 	ldr	r3, [pc, #104]	; c107984 <rtc_puttime+0x29c>
 c107918:	e0831392 	umull	r1, r3, r2, r3
 c10791c:	e1a031a3 	lsr	r3, r3, #3
 c107920:	e20330ff 	and	r3, r3, #255	; 0xff
 c107924:	e1a0c203 	lsl	ip, r3, #4
 c107928:	e51b3010 	ldr	r3, [fp, #-16]
 c10792c:	e5d32000 	ldrb	r2, [r3]
 c107930:	e59f304c 	ldr	r3, [pc, #76]	; c107984 <rtc_puttime+0x29c>
 c107934:	e0831392 	umull	r1, r3, r2, r3
 c107938:	e1a011a3 	lsr	r1, r3, #3
 c10793c:	e1a03001 	mov	r3, r1
 c107940:	e1a03103 	lsl	r3, r3, #2
 c107944:	e0833001 	add	r3, r3, r1
 c107948:	e1a03083 	lsl	r3, r3, #1
 c10794c:	e0633002 	rsb	r3, r3, r2
 c107950:	e20330ff 	and	r3, r3, #255	; 0xff
 c107954:	e08c3003 	add	r3, ip, r3
 c107958:	e5803000 	str	r3, [r0]

    RTCCON &= ~(1<<0);
 c10795c:	e59f3018 	ldr	r3, [pc, #24]	; c10797c <rtc_puttime+0x294>
 c107960:	e59f2014 	ldr	r2, [pc, #20]	; c10797c <rtc_puttime+0x294>
 c107964:	e5922000 	ldr	r2, [r2]
 c107968:	e3c22001 	bic	r2, r2, #1
 c10796c:	e5832000 	str	r2, [r3]
}
 c107970:	e24bd00c 	sub	sp, fp, #12
 c107974:	e89d6800 	ldm	sp, {fp, sp, lr}
 c107978:	e12fff1e 	bx	lr
 c10797c:	01d70040 	.word	0x01d70040
 c107980:	01d70088 	.word	0x01d70088
 c107984:	cccccccd 	.word	0xcccccccd
 c107988:	01d70084 	.word	0x01d70084
 c10798c:	01d7007c 	.word	0x01d7007c
 c107990:	01d70080 	.word	0x01d70080
 c107994:	01d70078 	.word	0x01d70078
 c107998:	01d70074 	.word	0x01d70074
 c10799c:	01d70070 	.word	0x01d70070

0c1079a0 <rtc_gettime>:

void rtc_gettime( rtc_time_t *rtc_time )
{
 c1079a0:	e1a0c00d 	mov	ip, sp
 c1079a4:	e92dd800 	push	{fp, ip, lr, pc}
 c1079a8:	e24cb004 	sub	fp, ip, #4
 c1079ac:	e24dd008 	sub	sp, sp, #8
 c1079b0:	e50b0010 	str	r0, [fp, #-16]
    RTCCON |= (1<<0);
 c1079b4:	e59f342c 	ldr	r3, [pc, #1068]	; c107de8 <rtc_gettime+0x448>
 c1079b8:	e59f2428 	ldr	r2, [pc, #1064]	; c107de8 <rtc_gettime+0x448>
 c1079bc:	e5922000 	ldr	r2, [r2]
 c1079c0:	e3822001 	orr	r2, r2, #1
 c1079c4:	e5832000 	str	r2, [r3]
    
    rtc_time->year = BCD2bin(BCDYEAR);
 c1079c8:	e59f341c 	ldr	r3, [pc, #1052]	; c107dec <rtc_gettime+0x44c>
 c1079cc:	e5933000 	ldr	r3, [r3]
 c1079d0:	e20330ff 	and	r3, r3, #255	; 0xff
 c1079d4:	e203300f 	and	r3, r3, #15
 c1079d8:	e20320ff 	and	r2, r3, #255	; 0xff
 c1079dc:	e59f3408 	ldr	r3, [pc, #1032]	; c107dec <rtc_gettime+0x44c>
 c1079e0:	e5933000 	ldr	r3, [r3]
 c1079e4:	e1a03223 	lsr	r3, r3, #4
 c1079e8:	e20330ff 	and	r3, r3, #255	; 0xff
 c1079ec:	e1a01003 	mov	r1, r3
 c1079f0:	e1a01101 	lsl	r1, r1, #2
 c1079f4:	e0813003 	add	r3, r1, r3
 c1079f8:	e1a03083 	lsl	r3, r3, #1
 c1079fc:	e20330ff 	and	r3, r3, #255	; 0xff
 c107a00:	e0823003 	add	r3, r2, r3
 c107a04:	e20320ff 	and	r2, r3, #255	; 0xff
 c107a08:	e51b3010 	ldr	r3, [fp, #-16]
 c107a0c:	e5c32006 	strb	r2, [r3, #6]
    rtc_time->mon  = BCD2bin(BCDMON);
 c107a10:	e59f33d8 	ldr	r3, [pc, #984]	; c107df0 <rtc_gettime+0x450>
 c107a14:	e5933000 	ldr	r3, [r3]
 c107a18:	e20330ff 	and	r3, r3, #255	; 0xff
 c107a1c:	e203300f 	and	r3, r3, #15
 c107a20:	e20320ff 	and	r2, r3, #255	; 0xff
 c107a24:	e59f33c4 	ldr	r3, [pc, #964]	; c107df0 <rtc_gettime+0x450>
 c107a28:	e5933000 	ldr	r3, [r3]
 c107a2c:	e1a03223 	lsr	r3, r3, #4
 c107a30:	e20330ff 	and	r3, r3, #255	; 0xff
 c107a34:	e1a01003 	mov	r1, r3
 c107a38:	e1a01101 	lsl	r1, r1, #2
 c107a3c:	e0813003 	add	r3, r1, r3
 c107a40:	e1a03083 	lsl	r3, r3, #1
 c107a44:	e20330ff 	and	r3, r3, #255	; 0xff
 c107a48:	e0823003 	add	r3, r2, r3
 c107a4c:	e20320ff 	and	r2, r3, #255	; 0xff
 c107a50:	e51b3010 	ldr	r3, [fp, #-16]
 c107a54:	e5c32005 	strb	r2, [r3, #5]
    rtc_time->mday = BCD2bin(BCDDAY);
 c107a58:	e59f3394 	ldr	r3, [pc, #916]	; c107df4 <rtc_gettime+0x454>
 c107a5c:	e5933000 	ldr	r3, [r3]
 c107a60:	e20330ff 	and	r3, r3, #255	; 0xff
 c107a64:	e203300f 	and	r3, r3, #15
 c107a68:	e20320ff 	and	r2, r3, #255	; 0xff
 c107a6c:	e59f3380 	ldr	r3, [pc, #896]	; c107df4 <rtc_gettime+0x454>
 c107a70:	e5933000 	ldr	r3, [r3]
 c107a74:	e1a03223 	lsr	r3, r3, #4
 c107a78:	e20330ff 	and	r3, r3, #255	; 0xff
 c107a7c:	e1a01003 	mov	r1, r3
 c107a80:	e1a01101 	lsl	r1, r1, #2
 c107a84:	e0813003 	add	r3, r1, r3
 c107a88:	e1a03083 	lsl	r3, r3, #1
 c107a8c:	e20330ff 	and	r3, r3, #255	; 0xff
 c107a90:	e0823003 	add	r3, r2, r3
 c107a94:	e20320ff 	and	r2, r3, #255	; 0xff
 c107a98:	e51b3010 	ldr	r3, [fp, #-16]
 c107a9c:	e5c32003 	strb	r2, [r3, #3]
    rtc_time->wday = BCD2bin(BCDDATE);
 c107aa0:	e59f3350 	ldr	r3, [pc, #848]	; c107df8 <rtc_gettime+0x458>
 c107aa4:	e5933000 	ldr	r3, [r3]
 c107aa8:	e20330ff 	and	r3, r3, #255	; 0xff
 c107aac:	e203300f 	and	r3, r3, #15
 c107ab0:	e20320ff 	and	r2, r3, #255	; 0xff
 c107ab4:	e59f333c 	ldr	r3, [pc, #828]	; c107df8 <rtc_gettime+0x458>
 c107ab8:	e5933000 	ldr	r3, [r3]
 c107abc:	e1a03223 	lsr	r3, r3, #4
 c107ac0:	e20330ff 	and	r3, r3, #255	; 0xff
 c107ac4:	e1a01003 	mov	r1, r3
 c107ac8:	e1a01101 	lsl	r1, r1, #2
 c107acc:	e0813003 	add	r3, r1, r3
 c107ad0:	e1a03083 	lsl	r3, r3, #1
 c107ad4:	e20330ff 	and	r3, r3, #255	; 0xff
 c107ad8:	e0823003 	add	r3, r2, r3
 c107adc:	e20320ff 	and	r2, r3, #255	; 0xff
 c107ae0:	e51b3010 	ldr	r3, [fp, #-16]
 c107ae4:	e5c32004 	strb	r2, [r3, #4]
    rtc_time->hour = BCD2bin(BCDHOUR);
 c107ae8:	e59f330c 	ldr	r3, [pc, #780]	; c107dfc <rtc_gettime+0x45c>
 c107aec:	e5933000 	ldr	r3, [r3]
 c107af0:	e20330ff 	and	r3, r3, #255	; 0xff
 c107af4:	e203300f 	and	r3, r3, #15
 c107af8:	e20320ff 	and	r2, r3, #255	; 0xff
 c107afc:	e59f32f8 	ldr	r3, [pc, #760]	; c107dfc <rtc_gettime+0x45c>
 c107b00:	e5933000 	ldr	r3, [r3]
 c107b04:	e1a03223 	lsr	r3, r3, #4
 c107b08:	e20330ff 	and	r3, r3, #255	; 0xff
 c107b0c:	e1a01003 	mov	r1, r3
 c107b10:	e1a01101 	lsl	r1, r1, #2
 c107b14:	e0813003 	add	r3, r1, r3
 c107b18:	e1a03083 	lsl	r3, r3, #1
 c107b1c:	e20330ff 	and	r3, r3, #255	; 0xff
 c107b20:	e0823003 	add	r3, r2, r3
 c107b24:	e20320ff 	and	r2, r3, #255	; 0xff
 c107b28:	e51b3010 	ldr	r3, [fp, #-16]
 c107b2c:	e5c32002 	strb	r2, [r3, #2]
    rtc_time->min  = BCD2bin(BCDMIN);
 c107b30:	e59f32c8 	ldr	r3, [pc, #712]	; c107e00 <rtc_gettime+0x460>
 c107b34:	e5933000 	ldr	r3, [r3]
 c107b38:	e20330ff 	and	r3, r3, #255	; 0xff
 c107b3c:	e203300f 	and	r3, r3, #15
 c107b40:	e20320ff 	and	r2, r3, #255	; 0xff
 c107b44:	e59f32b4 	ldr	r3, [pc, #692]	; c107e00 <rtc_gettime+0x460>
 c107b48:	e5933000 	ldr	r3, [r3]
 c107b4c:	e1a03223 	lsr	r3, r3, #4
 c107b50:	e20330ff 	and	r3, r3, #255	; 0xff
 c107b54:	e1a01003 	mov	r1, r3
 c107b58:	e1a01101 	lsl	r1, r1, #2
 c107b5c:	e0813003 	add	r3, r1, r3
 c107b60:	e1a03083 	lsl	r3, r3, #1
 c107b64:	e20330ff 	and	r3, r3, #255	; 0xff
 c107b68:	e0823003 	add	r3, r2, r3
 c107b6c:	e20320ff 	and	r2, r3, #255	; 0xff
 c107b70:	e51b3010 	ldr	r3, [fp, #-16]
 c107b74:	e5c32001 	strb	r2, [r3, #1]
    rtc_time->sec  = BCD2bin(BCDSEC);
 c107b78:	e59f3284 	ldr	r3, [pc, #644]	; c107e04 <rtc_gettime+0x464>
 c107b7c:	e5933000 	ldr	r3, [r3]
 c107b80:	e20330ff 	and	r3, r3, #255	; 0xff
 c107b84:	e203300f 	and	r3, r3, #15
 c107b88:	e20320ff 	and	r2, r3, #255	; 0xff
 c107b8c:	e59f3270 	ldr	r3, [pc, #624]	; c107e04 <rtc_gettime+0x464>
 c107b90:	e5933000 	ldr	r3, [r3]
 c107b94:	e1a03223 	lsr	r3, r3, #4
 c107b98:	e20330ff 	and	r3, r3, #255	; 0xff
 c107b9c:	e1a01003 	mov	r1, r3
 c107ba0:	e1a01101 	lsl	r1, r1, #2
 c107ba4:	e0813003 	add	r3, r1, r3
 c107ba8:	e1a03083 	lsl	r3, r3, #1
 c107bac:	e20330ff 	and	r3, r3, #255	; 0xff
 c107bb0:	e0823003 	add	r3, r2, r3
 c107bb4:	e20320ff 	and	r2, r3, #255	; 0xff
 c107bb8:	e51b3010 	ldr	r3, [fp, #-16]
 c107bbc:	e5c32000 	strb	r2, [r3]
    if( ! rtc_time->sec ){
 c107bc0:	e51b3010 	ldr	r3, [fp, #-16]
 c107bc4:	e5d33000 	ldrb	r3, [r3]
 c107bc8:	e3530000 	cmp	r3, #0
 c107bcc:	1a00007d 	bne	c107dc8 <rtc_gettime+0x428>
    	rtc_time->year = BCD2bin(BCDYEAR);
 c107bd0:	e59f3214 	ldr	r3, [pc, #532]	; c107dec <rtc_gettime+0x44c>
 c107bd4:	e5933000 	ldr	r3, [r3]
 c107bd8:	e20330ff 	and	r3, r3, #255	; 0xff
 c107bdc:	e203300f 	and	r3, r3, #15
 c107be0:	e20320ff 	and	r2, r3, #255	; 0xff
 c107be4:	e59f3200 	ldr	r3, [pc, #512]	; c107dec <rtc_gettime+0x44c>
 c107be8:	e5933000 	ldr	r3, [r3]
 c107bec:	e1a03223 	lsr	r3, r3, #4
 c107bf0:	e20330ff 	and	r3, r3, #255	; 0xff
 c107bf4:	e1a01003 	mov	r1, r3
 c107bf8:	e1a01101 	lsl	r1, r1, #2
 c107bfc:	e0813003 	add	r3, r1, r3
 c107c00:	e1a03083 	lsl	r3, r3, #1
 c107c04:	e20330ff 	and	r3, r3, #255	; 0xff
 c107c08:	e0823003 	add	r3, r2, r3
 c107c0c:	e20320ff 	and	r2, r3, #255	; 0xff
 c107c10:	e51b3010 	ldr	r3, [fp, #-16]
 c107c14:	e5c32006 	strb	r2, [r3, #6]
		rtc_time->mon  = BCD2bin(BCDMON);
 c107c18:	e59f31d0 	ldr	r3, [pc, #464]	; c107df0 <rtc_gettime+0x450>
 c107c1c:	e5933000 	ldr	r3, [r3]
 c107c20:	e20330ff 	and	r3, r3, #255	; 0xff
 c107c24:	e203300f 	and	r3, r3, #15
 c107c28:	e20320ff 	and	r2, r3, #255	; 0xff
 c107c2c:	e59f31bc 	ldr	r3, [pc, #444]	; c107df0 <rtc_gettime+0x450>
 c107c30:	e5933000 	ldr	r3, [r3]
 c107c34:	e1a03223 	lsr	r3, r3, #4
 c107c38:	e20330ff 	and	r3, r3, #255	; 0xff
 c107c3c:	e1a01003 	mov	r1, r3
 c107c40:	e1a01101 	lsl	r1, r1, #2
 c107c44:	e0813003 	add	r3, r1, r3
 c107c48:	e1a03083 	lsl	r3, r3, #1
 c107c4c:	e20330ff 	and	r3, r3, #255	; 0xff
 c107c50:	e0823003 	add	r3, r2, r3
 c107c54:	e20320ff 	and	r2, r3, #255	; 0xff
 c107c58:	e51b3010 	ldr	r3, [fp, #-16]
 c107c5c:	e5c32005 	strb	r2, [r3, #5]
		rtc_time->mday = BCD2bin(BCDDAY);
 c107c60:	e59f318c 	ldr	r3, [pc, #396]	; c107df4 <rtc_gettime+0x454>
 c107c64:	e5933000 	ldr	r3, [r3]
 c107c68:	e20330ff 	and	r3, r3, #255	; 0xff
 c107c6c:	e203300f 	and	r3, r3, #15
 c107c70:	e20320ff 	and	r2, r3, #255	; 0xff
 c107c74:	e59f3178 	ldr	r3, [pc, #376]	; c107df4 <rtc_gettime+0x454>
 c107c78:	e5933000 	ldr	r3, [r3]
 c107c7c:	e1a03223 	lsr	r3, r3, #4
 c107c80:	e20330ff 	and	r3, r3, #255	; 0xff
 c107c84:	e1a01003 	mov	r1, r3
 c107c88:	e1a01101 	lsl	r1, r1, #2
 c107c8c:	e0813003 	add	r3, r1, r3
 c107c90:	e1a03083 	lsl	r3, r3, #1
 c107c94:	e20330ff 	and	r3, r3, #255	; 0xff
 c107c98:	e0823003 	add	r3, r2, r3
 c107c9c:	e20320ff 	and	r2, r3, #255	; 0xff
 c107ca0:	e51b3010 	ldr	r3, [fp, #-16]
 c107ca4:	e5c32003 	strb	r2, [r3, #3]
		rtc_time->wday = BCD2bin(BCDDATE);
 c107ca8:	e59f3148 	ldr	r3, [pc, #328]	; c107df8 <rtc_gettime+0x458>
 c107cac:	e5933000 	ldr	r3, [r3]
 c107cb0:	e20330ff 	and	r3, r3, #255	; 0xff
 c107cb4:	e203300f 	and	r3, r3, #15
 c107cb8:	e20320ff 	and	r2, r3, #255	; 0xff
 c107cbc:	e59f3134 	ldr	r3, [pc, #308]	; c107df8 <rtc_gettime+0x458>
 c107cc0:	e5933000 	ldr	r3, [r3]
 c107cc4:	e1a03223 	lsr	r3, r3, #4
 c107cc8:	e20330ff 	and	r3, r3, #255	; 0xff
 c107ccc:	e1a01003 	mov	r1, r3
 c107cd0:	e1a01101 	lsl	r1, r1, #2
 c107cd4:	e0813003 	add	r3, r1, r3
 c107cd8:	e1a03083 	lsl	r3, r3, #1
 c107cdc:	e20330ff 	and	r3, r3, #255	; 0xff
 c107ce0:	e0823003 	add	r3, r2, r3
 c107ce4:	e20320ff 	and	r2, r3, #255	; 0xff
 c107ce8:	e51b3010 	ldr	r3, [fp, #-16]
 c107cec:	e5c32004 	strb	r2, [r3, #4]
		rtc_time->hour = BCD2bin(BCDHOUR);
 c107cf0:	e59f3104 	ldr	r3, [pc, #260]	; c107dfc <rtc_gettime+0x45c>
 c107cf4:	e5933000 	ldr	r3, [r3]
 c107cf8:	e20330ff 	and	r3, r3, #255	; 0xff
 c107cfc:	e203300f 	and	r3, r3, #15
 c107d00:	e20320ff 	and	r2, r3, #255	; 0xff
 c107d04:	e59f30f0 	ldr	r3, [pc, #240]	; c107dfc <rtc_gettime+0x45c>
 c107d08:	e5933000 	ldr	r3, [r3]
 c107d0c:	e1a03223 	lsr	r3, r3, #4
 c107d10:	e20330ff 	and	r3, r3, #255	; 0xff
 c107d14:	e1a01003 	mov	r1, r3
 c107d18:	e1a01101 	lsl	r1, r1, #2
 c107d1c:	e0813003 	add	r3, r1, r3
 c107d20:	e1a03083 	lsl	r3, r3, #1
 c107d24:	e20330ff 	and	r3, r3, #255	; 0xff
 c107d28:	e0823003 	add	r3, r2, r3
 c107d2c:	e20320ff 	and	r2, r3, #255	; 0xff
 c107d30:	e51b3010 	ldr	r3, [fp, #-16]
 c107d34:	e5c32002 	strb	r2, [r3, #2]
		rtc_time->min  = BCD2bin(BCDMIN);
 c107d38:	e59f30c0 	ldr	r3, [pc, #192]	; c107e00 <rtc_gettime+0x460>
 c107d3c:	e5933000 	ldr	r3, [r3]
 c107d40:	e20330ff 	and	r3, r3, #255	; 0xff
 c107d44:	e203300f 	and	r3, r3, #15
 c107d48:	e20320ff 	and	r2, r3, #255	; 0xff
 c107d4c:	e59f30ac 	ldr	r3, [pc, #172]	; c107e00 <rtc_gettime+0x460>
 c107d50:	e5933000 	ldr	r3, [r3]
 c107d54:	e1a03223 	lsr	r3, r3, #4
 c107d58:	e20330ff 	and	r3, r3, #255	; 0xff
 c107d5c:	e1a01003 	mov	r1, r3
 c107d60:	e1a01101 	lsl	r1, r1, #2
 c107d64:	e0813003 	add	r3, r1, r3
 c107d68:	e1a03083 	lsl	r3, r3, #1
 c107d6c:	e20330ff 	and	r3, r3, #255	; 0xff
 c107d70:	e0823003 	add	r3, r2, r3
 c107d74:	e20320ff 	and	r2, r3, #255	; 0xff
 c107d78:	e51b3010 	ldr	r3, [fp, #-16]
 c107d7c:	e5c32001 	strb	r2, [r3, #1]
		rtc_time->sec  = BCD2bin(BCDSEC);
 c107d80:	e59f307c 	ldr	r3, [pc, #124]	; c107e04 <rtc_gettime+0x464>
 c107d84:	e5933000 	ldr	r3, [r3]
 c107d88:	e20330ff 	and	r3, r3, #255	; 0xff
 c107d8c:	e203300f 	and	r3, r3, #15
 c107d90:	e20320ff 	and	r2, r3, #255	; 0xff
 c107d94:	e59f3068 	ldr	r3, [pc, #104]	; c107e04 <rtc_gettime+0x464>
 c107d98:	e5933000 	ldr	r3, [r3]
 c107d9c:	e1a03223 	lsr	r3, r3, #4
 c107da0:	e20330ff 	and	r3, r3, #255	; 0xff
 c107da4:	e1a01003 	mov	r1, r3
 c107da8:	e1a01101 	lsl	r1, r1, #2
 c107dac:	e0813003 	add	r3, r1, r3
 c107db0:	e1a03083 	lsl	r3, r3, #1
 c107db4:	e20330ff 	and	r3, r3, #255	; 0xff
 c107db8:	e0823003 	add	r3, r2, r3
 c107dbc:	e20320ff 	and	r2, r3, #255	; 0xff
 c107dc0:	e51b3010 	ldr	r3, [fp, #-16]
 c107dc4:	e5c32000 	strb	r2, [r3]
    };

    RTCCON &= ~(1<<0);
 c107dc8:	e59f3018 	ldr	r3, [pc, #24]	; c107de8 <rtc_gettime+0x448>
 c107dcc:	e59f2014 	ldr	r2, [pc, #20]	; c107de8 <rtc_gettime+0x448>
 c107dd0:	e5922000 	ldr	r2, [r2]
 c107dd4:	e3c22001 	bic	r2, r2, #1
 c107dd8:	e5832000 	str	r2, [r3]
}
 c107ddc:	e24bd00c 	sub	sp, fp, #12
 c107de0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c107de4:	e12fff1e 	bx	lr
 c107de8:	01d70040 	.word	0x01d70040
 c107dec:	01d70088 	.word	0x01d70088
 c107df0:	01d70084 	.word	0x01d70084
 c107df4:	01d7007c 	.word	0x01d7007c
 c107df8:	01d70080 	.word	0x01d70080
 c107dfc:	01d70078 	.word	0x01d70078
 c107e00:	01d70074 	.word	0x01d70074
 c107e04:	01d70070 	.word	0x01d70070

0c107e08 <rtc_open>:


void rtc_open( void (*isr)(void), uint8 tick_count )
{
 c107e08:	e1a0c00d 	mov	ip, sp
 c107e0c:	e92dd800 	push	{fp, ip, lr, pc}
 c107e10:	e24cb004 	sub	fp, ip, #4
 c107e14:	e24dd008 	sub	sp, sp, #8
 c107e18:	e50b0010 	str	r0, [fp, #-16]
 c107e1c:	e1a03001 	mov	r3, r1
 c107e20:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    pISR_TICK =(uint32)isr;
 c107e24:	e59f3048 	ldr	r3, [pc, #72]	; c107e74 <rtc_open+0x6c>
 c107e28:	e51b2010 	ldr	r2, [fp, #-16]
 c107e2c:	e5832000 	str	r2, [r3]
    I_ISPC    = BIT_TICK;
 c107e30:	e59f3040 	ldr	r3, [pc, #64]	; c107e78 <rtc_open+0x70>
 c107e34:	e3a02601 	mov	r2, #1048576	; 0x100000
 c107e38:	e5832000 	str	r2, [r3]
    INTMSK   &= ~(BIT_GLOBAL|BIT_TICK);
 c107e3c:	e59f3038 	ldr	r3, [pc, #56]	; c107e7c <rtc_open+0x74>
 c107e40:	e59f2034 	ldr	r2, [pc, #52]	; c107e7c <rtc_open+0x74>
 c107e44:	e5922000 	ldr	r2, [r2]
 c107e48:	e3c22641 	bic	r2, r2, #68157440	; 0x4100000
 c107e4c:	e5832000 	str	r2, [r3]
    TICNT     = 0X80|tick_count;
 c107e50:	e59f2028 	ldr	r2, [pc, #40]	; c107e80 <rtc_open+0x78>
 c107e54:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c107e58:	e1e03c83 	mvn	r3, r3, lsl #25
 c107e5c:	e1e03ca3 	mvn	r3, r3, lsr #25
 c107e60:	e20330ff 	and	r3, r3, #255	; 0xff
 c107e64:	e5823000 	str	r3, [r2]
}
 c107e68:	e24bd00c 	sub	sp, fp, #12
 c107e6c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c107e70:	e12fff1e 	bx	lr
 c107e74:	0c7fff70 	.word	0x0c7fff70
 c107e78:	01e00024 	.word	0x01e00024
 c107e7c:	01e0000c 	.word	0x01e0000c
 c107e80:	01d7008c 	.word	0x01d7008c

0c107e84 <rtc_close>:

void rtc_close( void )
{
 c107e84:	e1a0c00d 	mov	ip, sp
 c107e88:	e92dd800 	push	{fp, ip, lr, pc}
 c107e8c:	e24cb004 	sub	fp, ip, #4
    TICNT     = 0X0;
 c107e90:	e59f3030 	ldr	r3, [pc, #48]	; c107ec8 <rtc_close+0x44>
 c107e94:	e3a02000 	mov	r2, #0
 c107e98:	e5832000 	str	r2, [r3]
    INTMSK   |= BIT_TICK;
 c107e9c:	e59f3028 	ldr	r3, [pc, #40]	; c107ecc <rtc_close+0x48>
 c107ea0:	e59f2024 	ldr	r2, [pc, #36]	; c107ecc <rtc_close+0x48>
 c107ea4:	e5922000 	ldr	r2, [r2]
 c107ea8:	e3822601 	orr	r2, r2, #1048576	; 0x100000
 c107eac:	e5832000 	str	r2, [r3]
    pISR_TICK = isr_TICK_dummy;
 c107eb0:	e59f3018 	ldr	r3, [pc, #24]	; c107ed0 <rtc_close+0x4c>
 c107eb4:	e59f2018 	ldr	r2, [pc, #24]	; c107ed4 <rtc_close+0x50>
 c107eb8:	e5832000 	str	r2, [r3]
}
 c107ebc:	e24bd00c 	sub	sp, fp, #12
 c107ec0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c107ec4:	e12fff1e 	bx	lr
 c107ec8:	01d7008c 	.word	0x01d7008c
 c107ecc:	01e0000c 	.word	0x01e0000c
 c107ed0:	0c7fff70 	.word	0x0c7fff70
 c107ed4:	0c108970 	.word	0x0c108970

0c107ed8 <segs_init>:
static const uint8 hex2segs[16] = {0x12, 0x9f, 0x31, 0x15, 0x9c, 0x54, 0x50, 0x1f, 0x10, 0x1c, 0x18, 0xd0, 0xf1, 0x91, 0x70, 0x78};

static uint8 state;
        
void segs_init( void )
{
 c107ed8:	e1a0c00d 	mov	ip, sp
 c107edc:	e92dd800 	push	{fp, ip, lr, pc}
 c107ee0:	e24cb004 	sub	fp, ip, #4
    segs_off();
 c107ee4:	eb000002 	bl	c107ef4 <segs_off>
}                                  
 c107ee8:	e24bd00c 	sub	sp, fp, #12
 c107eec:	e89d6800 	ldm	sp, {fp, sp, lr}
 c107ef0:	e12fff1e 	bx	lr

0c107ef4 <segs_off>:
                          
void segs_off( void )
{
 c107ef4:	e1a0c00d 	mov	ip, sp
 c107ef8:	e92dd800 	push	{fp, ip, lr, pc}
 c107efc:	e24cb004 	sub	fp, ip, #4
    state = SEGS_OFF;
 c107f00:	e59f3020 	ldr	r3, [pc, #32]	; c107f28 <segs_off+0x34>
 c107f04:	e3e02000 	mvn	r2, #0
 c107f08:	e5c32000 	strb	r2, [r3]
    SEGS = state;
 c107f0c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c107f10:	e59f2010 	ldr	r2, [pc, #16]	; c107f28 <segs_off+0x34>
 c107f14:	e5d22000 	ldrb	r2, [r2]
 c107f18:	e5c32000 	strb	r2, [r3]
}
 c107f1c:	e24bd00c 	sub	sp, fp, #12
 c107f20:	e89d6800 	ldm	sp, {fp, sp, lr}
 c107f24:	e12fff1e 	bx	lr
 c107f28:	0c10efa2 	.word	0x0c10efa2

0c107f2c <segs_putchar>:

void segs_putchar( uint8 n )
{
 c107f2c:	e1a0c00d 	mov	ip, sp
 c107f30:	e92dd800 	push	{fp, ip, lr, pc}
 c107f34:	e24cb004 	sub	fp, ip, #4
 c107f38:	e24dd008 	sub	sp, sp, #8
 c107f3c:	e1a03000 	mov	r3, r0
 c107f40:	e54b300d 	strb	r3, [fp, #-13]
    state = n & 0x0f;
 c107f44:	e55b300d 	ldrb	r3, [fp, #-13]
 c107f48:	e203300f 	and	r3, r3, #15
 c107f4c:	e20320ff 	and	r2, r3, #255	; 0xff
 c107f50:	e59f3024 	ldr	r3, [pc, #36]	; c107f7c <segs_putchar+0x50>
 c107f54:	e5c32000 	strb	r2, [r3]
    SEGS = hex2segs[state];
 c107f58:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c107f5c:	e59f2018 	ldr	r2, [pc, #24]	; c107f7c <segs_putchar+0x50>
 c107f60:	e5d22000 	ldrb	r2, [r2]
 c107f64:	e59f1014 	ldr	r1, [pc, #20]	; c107f80 <segs_putchar+0x54>
 c107f68:	e7d12002 	ldrb	r2, [r1, r2]
 c107f6c:	e5c32000 	strb	r2, [r3]
};
 c107f70:	e24bd00c 	sub	sp, fp, #12
 c107f74:	e89d6800 	ldm	sp, {fp, sp, lr}
 c107f78:	e12fff1e 	bx	lr
 c107f7c:	0c10efa2 	.word	0x0c10efa2
 c107f80:	0c10cefc 	.word	0x0c10cefc

0c107f84 <segs_status>:

uint8 segs_status( void )
{
 c107f84:	e1a0c00d 	mov	ip, sp
 c107f88:	e92dd800 	push	{fp, ip, lr, pc}
 c107f8c:	e24cb004 	sub	fp, ip, #4

    return state;
 c107f90:	e59f3010 	ldr	r3, [pc, #16]	; c107fa8 <segs_status+0x24>
 c107f94:	e5d33000 	ldrb	r3, [r3]
};
 c107f98:	e1a00003 	mov	r0, r3
 c107f9c:	e24bd00c 	sub	sp, fp, #12
 c107fa0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c107fa4:	e12fff1e 	bx	lr
 c107fa8:	0c10efa2 	.word	0x0c10efa2

0c107fac <sys_init>:
void isr_TS_dummy( void ) __attribute__ ((interrupt ("IRQ")));
void isr_KEYPAD_dummy( void ) __attribute__ ((interrupt ("IRQ")));
void isr_USB_dummy( void )       __attribute__ ((interrupt ("IRQ")));

void sys_init( void )
{
 c107fac:	e1a0c00d 	mov	ip, sp
 c107fb0:	e92dd800 	push	{fp, ip, lr, pc}
 c107fb4:	e24cb004 	sub	fp, ip, #4
 c107fb8:	e24dd008 	sub	sp, sp, #8
    uint8 mode;

    WTCON  = 0;             // deshabilita el watchdog    
 c107fbc:	e59f30f0 	ldr	r3, [pc, #240]	; c1080b4 <sys_init+0x108>
 c107fc0:	e3a02000 	mov	r2, #0
 c107fc4:	e5832000 	str	r2, [r3]
    INTMSK = ~0;            // enmascara todas las interrupciones
 c107fc8:	e59f30e8 	ldr	r3, [pc, #232]	; c1080b8 <sys_init+0x10c>
 c107fcc:	e3e02000 	mvn	r2, #0
 c107fd0:	e5832000 	str	r2, [r3]
    
    GET_OPMODE( &mode );    // lee el modo de ejecución del procesador
 c107fd4:	e10f0000 	mrs	r0, CPSR
 c107fd8:	e200001f 	and	r0, r0, #31
 c107fdc:	e54b000d 	strb	r0, [fp, #-13]
    if( mode != SVCMODE )
 c107fe0:	e55b300d 	ldrb	r3, [fp, #-13]
 c107fe4:	e3530013 	cmp	r3, #19
 c107fe8:	0a000000 	beq	c107ff0 <sys_init+0x44>
        sys_recovery();     // si no es SVC (por una reejecución de la aplicación tras una excepción sin reset HW previo) recupera el modo SVC y restaura las pilas del sistema
 c107fec:	eb0002b6 	bl	c108acc <sys_recovery>

    // Configuracion del gestor de reloj
    LOCKTIME = 0xfff;         // estabilizacion del PLL = 512 us
 c107ff0:	e59f30c4 	ldr	r3, [pc, #196]	; c1080bc <sys_init+0x110>
 c107ff4:	e59f20c4 	ldr	r2, [pc, #196]	; c1080c0 <sys_init+0x114>
 c107ff8:	e5832000 	str	r2, [r3]
    PLLCON  = 0X38021;         // MCLK = 64MHz
 c107ffc:	e3a03776 	mov	r3, #30932992	; 0x1d80000
 c108000:	e59f20bc 	ldr	r2, [pc, #188]	; c1080c4 <sys_init+0x118>
 c108004:	e5832000 	str	r2, [r3]
    CLKCON   = 0x7ff8;         // modo NORMAL y reloj distribuido a todos los controladores
 c108008:	e59f30b8 	ldr	r3, [pc, #184]	; c1080c8 <sys_init+0x11c>
 c10800c:	e59f20b8 	ldr	r2, [pc, #184]	; c1080cc <sys_init+0x120>
 c108010:	e5832000 	str	r2, [r3]

    // Configuracion del arbitro de bus   
    SBUSCON = 0x8000001b;       // prioridad fija por defecto LCD > ZDMA > BDMA > IRQ
 c108014:	e3a03771 	mov	r3, #29622272	; 0x1c40000
 c108018:	e3a0216e 	mov	r2, #-2147483621	; 0x8000001b
 c10801c:	e5832000 	str	r2, [r3]
    
    // Configuracion de cache   
    SYSCFG = 0x0;           // deshabilitada
 c108020:	e3a03507 	mov	r3, #29360128	; 0x1c00000
 c108024:	e3a02000 	mov	r2, #0
 c108028:	e5832000 	str	r2, [r3]

    // Configuacion del controlador de interrupciones    
    I_PMST = 0x1f1b;           // prioridades fijas por defecto
 c10802c:	e59f309c 	ldr	r3, [pc, #156]	; c1080d0 <sys_init+0x124>
 c108030:	e59f209c 	ldr	r2, [pc, #156]	; c1080d4 <sys_init+0x128>
 c108034:	e5832000 	str	r2, [r3]
    I_PSLV = 0x1b1b1b1b;
 c108038:	e59f3098 	ldr	r3, [pc, #152]	; c1080d8 <sys_init+0x12c>
 c10803c:	e59f2098 	ldr	r2, [pc, #152]	; c1080dc <sys_init+0x130>
 c108040:	e5832000 	str	r2, [r3]
    INTMOD = 0x0;           // todas las interrupciones en modo IRQ
 c108044:	e59f3094 	ldr	r3, [pc, #148]	; c1080e0 <sys_init+0x134>
 c108048:	e3a02000 	mov	r2, #0
 c10804c:	e5832000 	str	r2, [r3]
    install_dummy_isr();    // instala rutinas de tratamiento por defecto para todas las interrupciones
 c108050:	eb000087 	bl	c108274 <install_dummy_isr>
    EXTINTPND = 0xf;        // borra las interrupciones externas pendientes por linea EINT7..4
 c108054:	e59f3088 	ldr	r3, [pc, #136]	; c1080e4 <sys_init+0x138>
 c108058:	e3a0200f 	mov	r2, #15
 c10805c:	e5832000 	str	r2, [r3]
    I_ISPC = 0x01e00024;           // borra todas las interrupciones pendientes
 c108060:	e59f3080 	ldr	r3, [pc, #128]	; c1080e8 <sys_init+0x13c>
 c108064:	e59f207c 	ldr	r2, [pc, #124]	; c1080e8 <sys_init+0x13c>
 c108068:	e5832000 	str	r2, [r3]
    INTCON = 0x1;           // IRQ vectorizadas, linea IRQ activada, linea FIQ desactivada
 c10806c:	e3a0361e 	mov	r3, #31457280	; 0x1e00000
 c108070:	e3a02001 	mov	r2, #1
 c108074:	e5832000 	str	r2, [r3]
    SET_IRQFLAG( 0 );       // Habilita IRQ en el procesador
 c108078:	e10f0000 	mrs	r0, CPSR
 c10807c:	e3c00080 	bic	r0, r0, #128	; 0x80
 c108080:	e3800000 	orr	r0, r0, #0
 c108084:	e121f000 	msr	CPSR_c, r0
    SET_FIQFLAG( 1 );       // Deshabilita FIQ en el procesador
 c108088:	e10f0000 	mrs	r0, CPSR
 c10808c:	e3c00040 	bic	r0, r0, #64	; 0x40
 c108090:	e3800040 	orr	r0, r0, #64	; 0x40
 c108094:	e121f000 	msr	CPSR_c, r0

    // Configuracion de puertos
    port_init();
 c108098:	eb000013 	bl	c1080ec <port_init>
    
    // Configuracion de dispositivos
    segs_init();
 c10809c:	ebffff8d 	bl	c107ed8 <segs_init>
    uart0_init();
 c1080a0:	eb000876 	bl	c10a280 <uart0_init>

    show_sys_info();
 c1080a4:	eb000273 	bl	c108a78 <show_sys_info>
}
 c1080a8:	e24bd00c 	sub	sp, fp, #12
 c1080ac:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1080b0:	e12fff1e 	bx	lr
 c1080b4:	01d30000 	.word	0x01d30000
 c1080b8:	01e0000c 	.word	0x01e0000c
 c1080bc:	01d8000c 	.word	0x01d8000c
 c1080c0:	00000fff 	.word	0x00000fff
 c1080c4:	00038021 	.word	0x00038021
 c1080c8:	01d80004 	.word	0x01d80004
 c1080cc:	00007ff8 	.word	0x00007ff8
 c1080d0:	01e00014 	.word	0x01e00014
 c1080d4:	00001f1b 	.word	0x00001f1b
 c1080d8:	01e00010 	.word	0x01e00010
 c1080dc:	1b1b1b1b 	.word	0x1b1b1b1b
 c1080e0:	01e00008 	.word	0x01e00008
 c1080e4:	01d20054 	.word	0x01d20054
 c1080e8:	01e00024 	.word	0x01e00024

0c1080ec <port_init>:

static inline void port_init( void )
{
 c1080ec:	e1a0c00d 	mov	ip, sp
 c1080f0:	e92dd800 	push	{fp, ip, lr, pc}
 c1080f4:	e24cb004 	sub	fp, ip, #4
	 PDATA = ~0;
 c1080f8:	e59f3100 	ldr	r3, [pc, #256]	; c108200 <port_init+0x114>
 c1080fc:	e3e02000 	mvn	r2, #0
 c108100:	e5832000 	str	r2, [r3]
	    PCONA = 0xfe;
 c108104:	e59f30f8 	ldr	r3, [pc, #248]	; c108204 <port_init+0x118>
 c108108:	e3a020fe 	mov	r2, #254	; 0xfe
 c10810c:	e5832000 	str	r2, [r3]

	    PDATB = ~0;
 c108110:	e59f30f0 	ldr	r3, [pc, #240]	; c108208 <port_init+0x11c>
 c108114:	e3e02000 	mvn	r2, #0
 c108118:	e5832000 	str	r2, [r3]
	    PCONB = 0x14f;
 c10811c:	e59f30e8 	ldr	r3, [pc, #232]	; c10820c <port_init+0x120>
 c108120:	e59f20e8 	ldr	r2, [pc, #232]	; c108210 <port_init+0x124>
 c108124:	e5832000 	str	r2, [r3]

	    PDATC = ~0;
 c108128:	e59f30e4 	ldr	r3, [pc, #228]	; c108214 <port_init+0x128>
 c10812c:	e3e02000 	mvn	r2, #0
 c108130:	e5832000 	str	r2, [r3]
	    PCONC = 0x5ff555ff;
 c108134:	e59f30dc 	ldr	r3, [pc, #220]	; c108218 <port_init+0x12c>
 c108138:	e59f20dc 	ldr	r2, [pc, #220]	; c10821c <port_init+0x130>
 c10813c:	e5832000 	str	r2, [r3]
	    PUPC  = 0x94fb;
 c108140:	e59f30d8 	ldr	r3, [pc, #216]	; c108220 <port_init+0x134>
 c108144:	e59f20d8 	ldr	r2, [pc, #216]	; c108224 <port_init+0x138>
 c108148:	e5832000 	str	r2, [r3]

	    PDATD = ~0;
 c10814c:	e59f30d4 	ldr	r3, [pc, #212]	; c108228 <port_init+0x13c>
 c108150:	e3e02000 	mvn	r2, #0
 c108154:	e5832000 	str	r2, [r3]
	    PCOND = 0xaaaa;
 c108158:	e59f30cc 	ldr	r3, [pc, #204]	; c10822c <port_init+0x140>
 c10815c:	e59f20cc 	ldr	r2, [pc, #204]	; c108230 <port_init+0x144>
 c108160:	e5832000 	str	r2, [r3]
	    PUPD  = 0xff;
 c108164:	e59f30c8 	ldr	r3, [pc, #200]	; c108234 <port_init+0x148>
 c108168:	e3a020ff 	mov	r2, #255	; 0xff
 c10816c:	e5832000 	str	r2, [r3]

	    PDATE = ~0;
 c108170:	e59f30c0 	ldr	r3, [pc, #192]	; c108238 <port_init+0x14c>
 c108174:	e3e02000 	mvn	r2, #0
 c108178:	e5832000 	str	r2, [r3]
	    PCONE = 0x255a9;
 c10817c:	e59f30b8 	ldr	r3, [pc, #184]	; c10823c <port_init+0x150>
 c108180:	e59f20b8 	ldr	r2, [pc, #184]	; c108240 <port_init+0x154>
 c108184:	e5832000 	str	r2, [r3]
	    PUPE  = 0xfb;
 c108188:	e59f30b4 	ldr	r3, [pc, #180]	; c108244 <port_init+0x158>
 c10818c:	e3a020fb 	mov	r2, #251	; 0xfb
 c108190:	e5832000 	str	r2, [r3]

	    PDATF = ~0;
 c108194:	e59f30ac 	ldr	r3, [pc, #172]	; c108248 <port_init+0x15c>
 c108198:	e3e02000 	mvn	r2, #0
 c10819c:	e5832000 	str	r2, [r3]
	    PCONF = 0x251a;
 c1081a0:	e59f30a4 	ldr	r3, [pc, #164]	; c10824c <port_init+0x160>
 c1081a4:	e59f20a4 	ldr	r2, [pc, #164]	; c108250 <port_init+0x164>
 c1081a8:	e5832000 	str	r2, [r3]
	    PUPF  = 0x74;
 c1081ac:	e59f30a0 	ldr	r3, [pc, #160]	; c108254 <port_init+0x168>
 c1081b0:	e3a02074 	mov	r2, #116	; 0x74
 c1081b4:	e5832000 	str	r2, [r3]

	    PDATG = ~0;
 c1081b8:	e59f3098 	ldr	r3, [pc, #152]	; c108258 <port_init+0x16c>
 c1081bc:	e3e02000 	mvn	r2, #0
 c1081c0:	e5832000 	str	r2, [r3]
	    PCONG = 0xf5ff;
 c1081c4:	e59f3090 	ldr	r3, [pc, #144]	; c10825c <port_init+0x170>
 c1081c8:	e59f2090 	ldr	r2, [pc, #144]	; c108260 <port_init+0x174>
 c1081cc:	e5832000 	str	r2, [r3]
	    PUPG  = 0x30;
 c1081d0:	e59f308c 	ldr	r3, [pc, #140]	; c108264 <port_init+0x178>
 c1081d4:	e3a02030 	mov	r2, #48	; 0x30
 c1081d8:	e5832000 	str	r2, [r3]

	    SPUCR = 0x7;
 c1081dc:	e59f3084 	ldr	r3, [pc, #132]	; c108268 <port_init+0x17c>
 c1081e0:	e3a02007 	mov	r2, #7
 c1081e4:	e5832000 	str	r2, [r3]

	    EXTINT = 0x22000220;
 c1081e8:	e59f307c 	ldr	r3, [pc, #124]	; c10826c <port_init+0x180>
 c1081ec:	e59f207c 	ldr	r2, [pc, #124]	; c108270 <port_init+0x184>
 c1081f0:	e5832000 	str	r2, [r3]
}
 c1081f4:	e24bd00c 	sub	sp, fp, #12
 c1081f8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1081fc:	e12fff1e 	bx	lr
 c108200:	01d20004 	.word	0x01d20004
 c108204:	01d20000 	.word	0x01d20000
 c108208:	01d2000c 	.word	0x01d2000c
 c10820c:	01d20008 	.word	0x01d20008
 c108210:	0000014f 	.word	0x0000014f
 c108214:	01d20014 	.word	0x01d20014
 c108218:	01d20010 	.word	0x01d20010
 c10821c:	5ff555ff 	.word	0x5ff555ff
 c108220:	01d20018 	.word	0x01d20018
 c108224:	000094fb 	.word	0x000094fb
 c108228:	01d20020 	.word	0x01d20020
 c10822c:	01d2001c 	.word	0x01d2001c
 c108230:	0000aaaa 	.word	0x0000aaaa
 c108234:	01d20024 	.word	0x01d20024
 c108238:	01d2002c 	.word	0x01d2002c
 c10823c:	01d20028 	.word	0x01d20028
 c108240:	000255a9 	.word	0x000255a9
 c108244:	01d20030 	.word	0x01d20030
 c108248:	01d20038 	.word	0x01d20038
 c10824c:	01d20034 	.word	0x01d20034
 c108250:	0000251a 	.word	0x0000251a
 c108254:	01d2003c 	.word	0x01d2003c
 c108258:	01d20044 	.word	0x01d20044
 c10825c:	01d20040 	.word	0x01d20040
 c108260:	0000f5ff 	.word	0x0000f5ff
 c108264:	01d20048 	.word	0x01d20048
 c108268:	01d2004c 	.word	0x01d2004c
 c10826c:	01d20050 	.word	0x01d20050
 c108270:	22000220 	.word	0x22000220

0c108274 <install_dummy_isr>:

static inline void install_dummy_isr( void )
{ 
 c108274:	e1a0c00d 	mov	ip, sp
 c108278:	e92dd800 	push	{fp, ip, lr, pc}
 c10827c:	e24cb004 	sub	fp, ip, #4
	pISR_SWI = (uint32) isr_SWI_dummy;
 c108280:	e59f3178 	ldr	r3, [pc, #376]	; c108400 <install_dummy_isr+0x18c>
 c108284:	e59f2178 	ldr	r2, [pc, #376]	; c108404 <install_dummy_isr+0x190>
 c108288:	e5832000 	str	r2, [r3]
	pISR_PABORT = (uint32) isr_PABORT_dummy;
 c10828c:	e59f3174 	ldr	r3, [pc, #372]	; c108408 <install_dummy_isr+0x194>
 c108290:	e59f2174 	ldr	r2, [pc, #372]	; c10840c <install_dummy_isr+0x198>
 c108294:	e5832000 	str	r2, [r3]
	pISR_DABORT = (uint32) isr_DABORT_dummy;
 c108298:	e59f3170 	ldr	r3, [pc, #368]	; c108410 <install_dummy_isr+0x19c>
 c10829c:	e59f2170 	ldr	r2, [pc, #368]	; c108414 <install_dummy_isr+0x1a0>
 c1082a0:	e5832000 	str	r2, [r3]
	pISR_IRQ = (uint32) isr_IRQ_dummy;
 c1082a4:	e59f316c 	ldr	r3, [pc, #364]	; c108418 <install_dummy_isr+0x1a4>
 c1082a8:	e59f216c 	ldr	r2, [pc, #364]	; c10841c <install_dummy_isr+0x1a8>
 c1082ac:	e5832000 	str	r2, [r3]
	pISR_FIQ = (uint32) isr_FIQ_dummy;
 c1082b0:	e59f3168 	ldr	r3, [pc, #360]	; c108420 <install_dummy_isr+0x1ac>
 c1082b4:	e59f2168 	ldr	r2, [pc, #360]	; c108424 <install_dummy_isr+0x1b0>
 c1082b8:	e5832000 	str	r2, [r3]
	pISR_ADC = (uint32) isr_ADC_dummy;
 c1082bc:	e59f3164 	ldr	r3, [pc, #356]	; c108428 <install_dummy_isr+0x1b4>
 c1082c0:	e59f2164 	ldr	r2, [pc, #356]	; c10842c <install_dummy_isr+0x1b8>
 c1082c4:	e5832000 	str	r2, [r3]
	pISR_RTC = (uint32) isr_RTC_dummy;
 c1082c8:	e59f3160 	ldr	r3, [pc, #352]	; c108430 <install_dummy_isr+0x1bc>
 c1082cc:	e59f2160 	ldr	r2, [pc, #352]	; c108434 <install_dummy_isr+0x1c0>
 c1082d0:	e5832000 	str	r2, [r3]
	pISR_UTXD1 = (uint32) isr_UTXD1_dummy;
 c1082d4:	e59f315c 	ldr	r3, [pc, #348]	; c108438 <install_dummy_isr+0x1c4>
 c1082d8:	e59f215c 	ldr	r2, [pc, #348]	; c10843c <install_dummy_isr+0x1c8>
 c1082dc:	e5832000 	str	r2, [r3]
	pISR_UTXD0 = (uint32) isr_UTXD0_dummy;
 c1082e0:	e59f3158 	ldr	r3, [pc, #344]	; c108440 <install_dummy_isr+0x1cc>
 c1082e4:	e59f2158 	ldr	r2, [pc, #344]	; c108444 <install_dummy_isr+0x1d0>
 c1082e8:	e5832000 	str	r2, [r3]
	pISR_SIO = (uint32) isr_SIO_dummy;
 c1082ec:	e59f3154 	ldr	r3, [pc, #340]	; c108448 <install_dummy_isr+0x1d4>
 c1082f0:	e59f2154 	ldr	r2, [pc, #340]	; c10844c <install_dummy_isr+0x1d8>
 c1082f4:	e5832000 	str	r2, [r3]
	pISR_IIC = (uint32) isr_IIC_dummy;
 c1082f8:	e59f3150 	ldr	r3, [pc, #336]	; c108450 <install_dummy_isr+0x1dc>
 c1082fc:	e59f2150 	ldr	r2, [pc, #336]	; c108454 <install_dummy_isr+0x1e0>
 c108300:	e5832000 	str	r2, [r3]
	pISR_URXD1 = (uint32) isr_URXD1_dummy;
 c108304:	e59f314c 	ldr	r3, [pc, #332]	; c108458 <install_dummy_isr+0x1e4>
 c108308:	e59f214c 	ldr	r2, [pc, #332]	; c10845c <install_dummy_isr+0x1e8>
 c10830c:	e5832000 	str	r2, [r3]
	pISR_URXD0 = (uint32) isr_URXD0_dummy;
 c108310:	e59f3148 	ldr	r3, [pc, #328]	; c108460 <install_dummy_isr+0x1ec>
 c108314:	e59f2148 	ldr	r2, [pc, #328]	; c108464 <install_dummy_isr+0x1f0>
 c108318:	e5832000 	str	r2, [r3]
	pISR_TIMER5 = (uint32) isr_TIMER5_dummy;
 c10831c:	e59f3144 	ldr	r3, [pc, #324]	; c108468 <install_dummy_isr+0x1f4>
 c108320:	e59f2144 	ldr	r2, [pc, #324]	; c10846c <install_dummy_isr+0x1f8>
 c108324:	e5832000 	str	r2, [r3]
	pISR_TIMER4 = (uint32) isr_TIMER4_dummy;
 c108328:	e59f3140 	ldr	r3, [pc, #320]	; c108470 <install_dummy_isr+0x1fc>
 c10832c:	e59f2140 	ldr	r2, [pc, #320]	; c108474 <install_dummy_isr+0x200>
 c108330:	e5832000 	str	r2, [r3]
	pISR_TIMER3 = (uint32) isr_TIMER3_dummy;
 c108334:	e59f313c 	ldr	r3, [pc, #316]	; c108478 <install_dummy_isr+0x204>
 c108338:	e59f213c 	ldr	r2, [pc, #316]	; c10847c <install_dummy_isr+0x208>
 c10833c:	e5832000 	str	r2, [r3]
	pISR_TIMER2 = (uint32) isr_TIMER2_dummy;
 c108340:	e59f3138 	ldr	r3, [pc, #312]	; c108480 <install_dummy_isr+0x20c>
 c108344:	e59f2138 	ldr	r2, [pc, #312]	; c108484 <install_dummy_isr+0x210>
 c108348:	e5832000 	str	r2, [r3]
	pISR_TIMER1 = (uint32) isr_TIMER1_dummy;
 c10834c:	e59f3134 	ldr	r3, [pc, #308]	; c108488 <install_dummy_isr+0x214>
 c108350:	e59f2134 	ldr	r2, [pc, #308]	; c10848c <install_dummy_isr+0x218>
 c108354:	e5832000 	str	r2, [r3]
	pISR_TIMER0 = (uint32) isr_TIMER0_dummy;
 c108358:	e59f3130 	ldr	r3, [pc, #304]	; c108490 <install_dummy_isr+0x21c>
 c10835c:	e59f2130 	ldr	r2, [pc, #304]	; c108494 <install_dummy_isr+0x220>
 c108360:	e5832000 	str	r2, [r3]
	pISR_UERR01 = (uint32) isr_UERR01_dummy;
 c108364:	e59f312c 	ldr	r3, [pc, #300]	; c108498 <install_dummy_isr+0x224>
 c108368:	e59f212c 	ldr	r2, [pc, #300]	; c10849c <install_dummy_isr+0x228>
 c10836c:	e5832000 	str	r2, [r3]
	pISR_WDT = (uint32) isr_WDT_dummy;
 c108370:	e59f3128 	ldr	r3, [pc, #296]	; c1084a0 <install_dummy_isr+0x22c>
 c108374:	e59f2128 	ldr	r2, [pc, #296]	; c1084a4 <install_dummy_isr+0x230>
 c108378:	e5832000 	str	r2, [r3]
	pISR_BDMA1 = (uint32) isr_BDMA1_dummy;
 c10837c:	e59f3124 	ldr	r3, [pc, #292]	; c1084a8 <install_dummy_isr+0x234>
 c108380:	e59f2124 	ldr	r2, [pc, #292]	; c1084ac <install_dummy_isr+0x238>
 c108384:	e5832000 	str	r2, [r3]
	pISR_BDMA0 = (uint32) isr_BDMA0_dummy;
 c108388:	e59f3120 	ldr	r3, [pc, #288]	; c1084b0 <install_dummy_isr+0x23c>
 c10838c:	e59f2120 	ldr	r2, [pc, #288]	; c1084b4 <install_dummy_isr+0x240>
 c108390:	e5832000 	str	r2, [r3]
	pISR_ZDMA1 = (uint32) isr_ZDMA1_dummy;
 c108394:	e59f311c 	ldr	r3, [pc, #284]	; c1084b8 <install_dummy_isr+0x244>
 c108398:	e59f211c 	ldr	r2, [pc, #284]	; c1084bc <install_dummy_isr+0x248>
 c10839c:	e5832000 	str	r2, [r3]
	pISR_ZDMA0 = (uint32) isr_ZDMA0_dummy;
 c1083a0:	e59f3118 	ldr	r3, [pc, #280]	; c1084c0 <install_dummy_isr+0x24c>
 c1083a4:	e59f2118 	ldr	r2, [pc, #280]	; c1084c4 <install_dummy_isr+0x250>
 c1083a8:	e5832000 	str	r2, [r3]
    pISR_TICK = (uint32) isr_TICK_dummy;
 c1083ac:	e59f3114 	ldr	r3, [pc, #276]	; c1084c8 <install_dummy_isr+0x254>
 c1083b0:	e59f2114 	ldr	r2, [pc, #276]	; c1084cc <install_dummy_isr+0x258>
 c1083b4:	e5832000 	str	r2, [r3]
    pISR_PB = (uint32) isr_PB_dummy;
 c1083b8:	e59f3110 	ldr	r3, [pc, #272]	; c1084d0 <install_dummy_isr+0x25c>
 c1083bc:	e59f2110 	ldr	r2, [pc, #272]	; c1084d4 <install_dummy_isr+0x260>
 c1083c0:	e5832000 	str	r2, [r3]
    pISR_ETHERNET = (uint32) isr_ETHERNET_dummy;
 c1083c4:	e59f310c 	ldr	r3, [pc, #268]	; c1084d8 <install_dummy_isr+0x264>
 c1083c8:	e59f210c 	ldr	r2, [pc, #268]	; c1084dc <install_dummy_isr+0x268>
 c1083cc:	e5832000 	str	r2, [r3]
    pISR_TS = (uint32) isr_TS_dummy;
 c1083d0:	e59f3108 	ldr	r3, [pc, #264]	; c1084e0 <install_dummy_isr+0x26c>
 c1083d4:	e59f2108 	ldr	r2, [pc, #264]	; c1084e4 <install_dummy_isr+0x270>
 c1083d8:	e5832000 	str	r2, [r3]
    pISR_KEYPAD = (uint32) isr_KEYPAD_dummy;
 c1083dc:	e59f3104 	ldr	r3, [pc, #260]	; c1084e8 <install_dummy_isr+0x274>
 c1083e0:	e59f2104 	ldr	r2, [pc, #260]	; c1084ec <install_dummy_isr+0x278>
 c1083e4:	e5832000 	str	r2, [r3]
    pISR_USB = (uint32) isr_USB_dummy;
 c1083e8:	e59f3100 	ldr	r3, [pc, #256]	; c1084f0 <install_dummy_isr+0x27c>
 c1083ec:	e59f2100 	ldr	r2, [pc, #256]	; c1084f4 <install_dummy_isr+0x280>
 c1083f0:	e5832000 	str	r2, [r3]
}        
 c1083f4:	e24bd00c 	sub	sp, fp, #12
 c1083f8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1083fc:	e12fff1e 	bx	lr
 c108400:	0c7fff08 	.word	0x0c7fff08
 c108404:	0c1084f8 	.word	0x0c1084f8
 c108408:	0c7fff0c 	.word	0x0c7fff0c
 c10840c:	0c1085a8 	.word	0x0c1085a8
 c108410:	0c7fff10 	.word	0x0c7fff10
 c108414:	0c1085d4 	.word	0x0c1085d4
 c108418:	0c7fff18 	.word	0x0c7fff18
 c10841c:	0c108550 	.word	0x0c108550
 c108420:	0c7fff1c 	.word	0x0c7fff1c
 c108424:	0c10857c 	.word	0x0c10857c
 c108428:	0c7fff20 	.word	0x0c7fff20
 c10842c:	0c108600 	.word	0x0c108600
 c108430:	0c7fff24 	.word	0x0c7fff24
 c108434:	0c10862c 	.word	0x0c10862c
 c108438:	0c7fff28 	.word	0x0c7fff28
 c10843c:	0c108658 	.word	0x0c108658
 c108440:	0c7fff2c 	.word	0x0c7fff2c
 c108444:	0c108684 	.word	0x0c108684
 c108448:	0c7fff30 	.word	0x0c7fff30
 c10844c:	0c1086b0 	.word	0x0c1086b0
 c108450:	0c7fff34 	.word	0x0c7fff34
 c108454:	0c1086dc 	.word	0x0c1086dc
 c108458:	0c7fff38 	.word	0x0c7fff38
 c10845c:	0c108708 	.word	0x0c108708
 c108460:	0c7fff3c 	.word	0x0c7fff3c
 c108464:	0c108734 	.word	0x0c108734
 c108468:	0c7fff40 	.word	0x0c7fff40
 c10846c:	0c108760 	.word	0x0c108760
 c108470:	0c7fff44 	.word	0x0c7fff44
 c108474:	0c10878c 	.word	0x0c10878c
 c108478:	0c7fff48 	.word	0x0c7fff48
 c10847c:	0c1087b8 	.word	0x0c1087b8
 c108480:	0c7fff4c 	.word	0x0c7fff4c
 c108484:	0c1087e4 	.word	0x0c1087e4
 c108488:	0c7fff50 	.word	0x0c7fff50
 c10848c:	0c108810 	.word	0x0c108810
 c108490:	0c7fff54 	.word	0x0c7fff54
 c108494:	0c10883c 	.word	0x0c10883c
 c108498:	0c7fff58 	.word	0x0c7fff58
 c10849c:	0c108868 	.word	0x0c108868
 c1084a0:	0c7fff5c 	.word	0x0c7fff5c
 c1084a4:	0c108894 	.word	0x0c108894
 c1084a8:	0c7fff60 	.word	0x0c7fff60
 c1084ac:	0c1088c0 	.word	0x0c1088c0
 c1084b0:	0c7fff64 	.word	0x0c7fff64
 c1084b4:	0c1088ec 	.word	0x0c1088ec
 c1084b8:	0c7fff68 	.word	0x0c7fff68
 c1084bc:	0c108918 	.word	0x0c108918
 c1084c0:	0c7fff6c 	.word	0x0c7fff6c
 c1084c4:	0c108944 	.word	0x0c108944
 c1084c8:	0c7fff70 	.word	0x0c7fff70
 c1084cc:	0c108970 	.word	0x0c108970
 c1084d0:	0c7fff74 	.word	0x0c7fff74
 c1084d4:	0c10899c 	.word	0x0c10899c
 c1084d8:	0c7fff78 	.word	0x0c7fff78
 c1084dc:	0c1089c8 	.word	0x0c1089c8
 c1084e0:	0c7fff7c 	.word	0x0c7fff7c
 c1084e4:	0c1089f4 	.word	0x0c1089f4
 c1084e8:	0c7fff80 	.word	0x0c7fff80
 c1084ec:	0c108a20 	.word	0x0c108a20
 c1084f0:	0c7fff84 	.word	0x0c7fff84
 c1084f4:	0c108a4c 	.word	0x0c108a4c

0c1084f8 <isr_SWI_dummy>:

void isr_SWI_dummy( void )
{
 c1084f8:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1084fc:	e1a0c00d 	mov	ip, sp
 c108500:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c108504:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_SWI_dummy" );
 c108508:	e59f0010 	ldr	r0, [pc, #16]	; c108520 <isr_SWI_dummy+0x28>
 c10850c:	eb00079a 	bl	c10a37c <uart0_puts>
	SEGS = 0x75;
 c108510:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c108514:	e3a02075 	mov	r2, #117	; 0x75
 c108518:	e5c32000 	strb	r2, [r3]
	while(1);
 c10851c:	eafffffe 	b	c10851c <isr_SWI_dummy+0x24>
 c108520:	0c10cf0c 	.word	0x0c10cf0c

0c108524 <isr_UNDEF_dummy>:
}

void isr_UNDEF_dummy( void )
{
 c108524:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c108528:	e1a0c00d 	mov	ip, sp
 c10852c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c108530:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_UNDEF_dummy" );
 c108534:	e59f0010 	ldr	r0, [pc, #16]	; c10854c <isr_UNDEF_dummy+0x28>
 c108538:	eb00078f 	bl	c10a37c <uart0_puts>
	SEGS = 0x75;
 c10853c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c108540:	e3a02075 	mov	r2, #117	; 0x75
 c108544:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c108548:	eafffffe 	b	c108548 <isr_UNDEF_dummy+0x24>
 c10854c:	0c10cf38 	.word	0x0c10cf38

0c108550 <isr_IRQ_dummy>:
}

void isr_IRQ_dummy( void )
{
 c108550:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c108554:	e1a0c00d 	mov	ip, sp
 c108558:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10855c:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_IRQ_dummy" );
 c108560:	e59f0010 	ldr	r0, [pc, #16]	; c108578 <isr_IRQ_dummy+0x28>
 c108564:	eb000784 	bl	c10a37c <uart0_puts>
		SEGS = 0x75;
 c108568:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10856c:	e3a02075 	mov	r2, #117	; 0x75
 c108570:	e5c32000 	strb	r2, [r3]
		while( 1 );
 c108574:	eafffffe 	b	c108574 <isr_IRQ_dummy+0x24>
 c108578:	0c10cf68 	.word	0x0c10cf68

0c10857c <isr_FIQ_dummy>:
}

void isr_FIQ_dummy( void )
{
 c10857c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c108580:	e1a0c00d 	mov	ip, sp
 c108584:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c108588:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_FIQ_dummy" );
 c10858c:	e59f0010 	ldr	r0, [pc, #16]	; c1085a4 <isr_FIQ_dummy+0x28>
 c108590:	eb000779 	bl	c10a37c <uart0_puts>
		SEGS = 0x75;
 c108594:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c108598:	e3a02075 	mov	r2, #117	; 0x75
 c10859c:	e5c32000 	strb	r2, [r3]
		while( 1 );
 c1085a0:	eafffffe 	b	c1085a0 <isr_FIQ_dummy+0x24>
 c1085a4:	0c10cf94 	.word	0x0c10cf94

0c1085a8 <isr_PABORT_dummy>:
}

void isr_PABORT_dummy( void )
{
 c1085a8:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1085ac:	e1a0c00d 	mov	ip, sp
 c1085b0:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1085b4:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_PABORT_dummy" );
 c1085b8:	e59f0010 	ldr	r0, [pc, #16]	; c1085d0 <isr_PABORT_dummy+0x28>
 c1085bc:	eb00076e 	bl	c10a37c <uart0_puts>
		SEGS = 0x75;
 c1085c0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1085c4:	e3a02075 	mov	r2, #117	; 0x75
 c1085c8:	e5c32000 	strb	r2, [r3]
		while( 1 );
 c1085cc:	eafffffe 	b	c1085cc <isr_PABORT_dummy+0x24>
 c1085d0:	0c10cfc0 	.word	0x0c10cfc0

0c1085d4 <isr_DABORT_dummy>:
}

void isr_DABORT_dummy( void )
{
 c1085d4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1085d8:	e1a0c00d 	mov	ip, sp
 c1085dc:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1085e0:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_DABORT_dummy" );
 c1085e4:	e59f0010 	ldr	r0, [pc, #16]	; c1085fc <isr_DABORT_dummy+0x28>
 c1085e8:	eb000763 	bl	c10a37c <uart0_puts>
		SEGS = 0x75;
 c1085ec:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1085f0:	e3a02075 	mov	r2, #117	; 0x75
 c1085f4:	e5c32000 	strb	r2, [r3]
		while( 1 );
 c1085f8:	eafffffe 	b	c1085f8 <isr_DABORT_dummy+0x24>
 c1085fc:	0c10cff0 	.word	0x0c10cff0

0c108600 <isr_ADC_dummy>:
}

void isr_ADC_dummy( void )
{
 c108600:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c108604:	e1a0c00d 	mov	ip, sp
 c108608:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10860c:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: 1 ejecutando isr_UNDEF_dummy" );
 c108610:	e59f0010 	ldr	r0, [pc, #16]	; c108628 <isr_ADC_dummy+0x28>
 c108614:	eb000758 	bl	c10a37c <uart0_puts>
		SEGS = 0x75;
 c108618:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10861c:	e3a02075 	mov	r2, #117	; 0x75
 c108620:	e5c32000 	strb	r2, [r3]
		while( 1 );
 c108624:	eafffffe 	b	c108624 <isr_ADC_dummy+0x24>
 c108628:	0c10d020 	.word	0x0c10d020

0c10862c <isr_RTC_dummy>:
}

void isr_RTC_dummy( void )
{
 c10862c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c108630:	e1a0c00d 	mov	ip, sp
 c108634:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c108638:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL:  2 ejecutando isr_UNDEF_dummy" );
 c10863c:	e59f0010 	ldr	r0, [pc, #16]	; c108654 <isr_RTC_dummy+0x28>
 c108640:	eb00074d 	bl	c10a37c <uart0_puts>
		SEGS = 0x75;
 c108644:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c108648:	e3a02075 	mov	r2, #117	; 0x75
 c10864c:	e5c32000 	strb	r2, [r3]
		while( 1 );
 c108650:	eafffffe 	b	c108650 <isr_RTC_dummy+0x24>
 c108654:	0c10d050 	.word	0x0c10d050

0c108658 <isr_UTXD1_dummy>:
}

void isr_UTXD1_dummy( void )
{
 c108658:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10865c:	e1a0c00d 	mov	ip, sp
 c108660:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c108664:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: 3 ejecutando isr_UNDEF_dummy" );
 c108668:	e59f0010 	ldr	r0, [pc, #16]	; c108680 <isr_UTXD1_dummy+0x28>
 c10866c:	eb000742 	bl	c10a37c <uart0_puts>
		SEGS = 0x75;
 c108670:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c108674:	e3a02075 	mov	r2, #117	; 0x75
 c108678:	e5c32000 	strb	r2, [r3]
		while( 1 );
 c10867c:	eafffffe 	b	c10867c <isr_UTXD1_dummy+0x24>
 c108680:	0c10d084 	.word	0x0c10d084

0c108684 <isr_UTXD0_dummy>:
}

void isr_UTXD0_dummy( void )
{
 c108684:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c108688:	e1a0c00d 	mov	ip, sp
 c10868c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c108690:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: 4 ejecutando isr_UNDEF_dummy" );
 c108694:	e59f0010 	ldr	r0, [pc, #16]	; c1086ac <isr_UTXD0_dummy+0x28>
 c108698:	eb000737 	bl	c10a37c <uart0_puts>
		SEGS = 0x75;
 c10869c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1086a0:	e3a02075 	mov	r2, #117	; 0x75
 c1086a4:	e5c32000 	strb	r2, [r3]
		while( 1 );
 c1086a8:	eafffffe 	b	c1086a8 <isr_UTXD0_dummy+0x24>
 c1086ac:	0c10d0b4 	.word	0x0c10d0b4

0c1086b0 <isr_SIO_dummy>:
}

void isr_SIO_dummy( void )
{
 c1086b0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1086b4:	e1a0c00d 	mov	ip, sp
 c1086b8:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1086bc:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: 5  ejecutando isr_UNDEF_dummy" );
 c1086c0:	e59f0010 	ldr	r0, [pc, #16]	; c1086d8 <isr_SIO_dummy+0x28>
 c1086c4:	eb00072c 	bl	c10a37c <uart0_puts>
		SEGS = 0x75;
 c1086c8:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1086cc:	e3a02075 	mov	r2, #117	; 0x75
 c1086d0:	e5c32000 	strb	r2, [r3]
		while( 1 );
 c1086d4:	eafffffe 	b	c1086d4 <isr_SIO_dummy+0x24>
 c1086d8:	0c10d0e4 	.word	0x0c10d0e4

0c1086dc <isr_IIC_dummy>:
}

void isr_IIC_dummy( void )
{
 c1086dc:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1086e0:	e1a0c00d 	mov	ip, sp
 c1086e4:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1086e8:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: 6 ejecutando isr_UNDEF_dummy" );
 c1086ec:	e59f0010 	ldr	r0, [pc, #16]	; c108704 <isr_IIC_dummy+0x28>
 c1086f0:	eb000721 	bl	c10a37c <uart0_puts>
		SEGS = 0x75;
 c1086f4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1086f8:	e3a02075 	mov	r2, #117	; 0x75
 c1086fc:	e5c32000 	strb	r2, [r3]
		while( 1 );
 c108700:	eafffffe 	b	c108700 <isr_IIC_dummy+0x24>
 c108704:	0c10d118 	.word	0x0c10d118

0c108708 <isr_URXD1_dummy>:
}

void isr_URXD1_dummy( void )
{
 c108708:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10870c:	e1a0c00d 	mov	ip, sp
 c108710:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c108714:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: 7 ejecutando isr_UNDEF_dummy" );
 c108718:	e59f0010 	ldr	r0, [pc, #16]	; c108730 <isr_URXD1_dummy+0x28>
 c10871c:	eb000716 	bl	c10a37c <uart0_puts>
		SEGS = 0x75;
 c108720:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c108724:	e3a02075 	mov	r2, #117	; 0x75
 c108728:	e5c32000 	strb	r2, [r3]
		while( 1 );
 c10872c:	eafffffe 	b	c10872c <isr_URXD1_dummy+0x24>
 c108730:	0c10d148 	.word	0x0c10d148

0c108734 <isr_URXD0_dummy>:
}

void isr_URXD0_dummy( void )
{
 c108734:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c108738:	e1a0c00d 	mov	ip, sp
 c10873c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c108740:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: 8 ejecutando isr_UNDEF_dummy" );
 c108744:	e59f0010 	ldr	r0, [pc, #16]	; c10875c <isr_URXD0_dummy+0x28>
 c108748:	eb00070b 	bl	c10a37c <uart0_puts>
		SEGS = 0x75;
 c10874c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c108750:	e3a02075 	mov	r2, #117	; 0x75
 c108754:	e5c32000 	strb	r2, [r3]
		while( 1 );
 c108758:	eafffffe 	b	c108758 <isr_URXD0_dummy+0x24>
 c10875c:	0c10d178 	.word	0x0c10d178

0c108760 <isr_TIMER5_dummy>:
}

void isr_TIMER5_dummy( void )
{
 c108760:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c108764:	e1a0c00d 	mov	ip, sp
 c108768:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10876c:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: 9 ejecutando isr_UNDEF_dummy" );
 c108770:	e59f0010 	ldr	r0, [pc, #16]	; c108788 <isr_TIMER5_dummy+0x28>
 c108774:	eb000700 	bl	c10a37c <uart0_puts>
		SEGS = 0x75;
 c108778:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10877c:	e3a02075 	mov	r2, #117	; 0x75
 c108780:	e5c32000 	strb	r2, [r3]
		while( 1 );
 c108784:	eafffffe 	b	c108784 <isr_TIMER5_dummy+0x24>
 c108788:	0c10d1a8 	.word	0x0c10d1a8

0c10878c <isr_TIMER4_dummy>:
}

void isr_TIMER4_dummy( void )
{
 c10878c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c108790:	e1a0c00d 	mov	ip, sp
 c108794:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c108798:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: 10 ejecutando isr_UNDEF_dummy" );
 c10879c:	e59f0010 	ldr	r0, [pc, #16]	; c1087b4 <isr_TIMER4_dummy+0x28>
 c1087a0:	eb0006f5 	bl	c10a37c <uart0_puts>
		SEGS = 0x75;
 c1087a4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1087a8:	e3a02075 	mov	r2, #117	; 0x75
 c1087ac:	e5c32000 	strb	r2, [r3]
		while( 1 );
 c1087b0:	eafffffe 	b	c1087b0 <isr_TIMER4_dummy+0x24>
 c1087b4:	0c10d1d8 	.word	0x0c10d1d8

0c1087b8 <isr_TIMER3_dummy>:
}

void isr_TIMER3_dummy( void )
{
 c1087b8:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1087bc:	e1a0c00d 	mov	ip, sp
 c1087c0:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1087c4:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL:11 ejecutando isr_UNDEF_dummy" );
 c1087c8:	e59f0010 	ldr	r0, [pc, #16]	; c1087e0 <isr_TIMER3_dummy+0x28>
 c1087cc:	eb0006ea 	bl	c10a37c <uart0_puts>
		SEGS = 0x75;
 c1087d0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1087d4:	e3a02075 	mov	r2, #117	; 0x75
 c1087d8:	e5c32000 	strb	r2, [r3]
		while( 1 );
 c1087dc:	eafffffe 	b	c1087dc <isr_TIMER3_dummy+0x24>
 c1087e0:	0c10d20c 	.word	0x0c10d20c

0c1087e4 <isr_TIMER2_dummy>:
}

void isr_TIMER2_dummy( void )
{
 c1087e4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1087e8:	e1a0c00d 	mov	ip, sp
 c1087ec:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1087f0:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL:12 ejecutando isr_UNDEF_dummy" );
 c1087f4:	e59f0010 	ldr	r0, [pc, #16]	; c10880c <isr_TIMER2_dummy+0x28>
 c1087f8:	eb0006df 	bl	c10a37c <uart0_puts>
		SEGS = 0x75;
 c1087fc:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c108800:	e3a02075 	mov	r2, #117	; 0x75
 c108804:	e5c32000 	strb	r2, [r3]
		while( 1 );
 c108808:	eafffffe 	b	c108808 <isr_TIMER2_dummy+0x24>
 c10880c:	0c10d23c 	.word	0x0c10d23c

0c108810 <isr_TIMER1_dummy>:
}

void isr_TIMER1_dummy( void )
{
 c108810:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c108814:	e1a0c00d 	mov	ip, sp
 c108818:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10881c:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL:13 ejecutando isr_UNDEF_dummy" );
 c108820:	e59f0010 	ldr	r0, [pc, #16]	; c108838 <isr_TIMER1_dummy+0x28>
 c108824:	eb0006d4 	bl	c10a37c <uart0_puts>
		SEGS = 0x75;
 c108828:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10882c:	e3a02075 	mov	r2, #117	; 0x75
 c108830:	e5c32000 	strb	r2, [r3]
		while( 1 );
 c108834:	eafffffe 	b	c108834 <isr_TIMER1_dummy+0x24>
 c108838:	0c10d26c 	.word	0x0c10d26c

0c10883c <isr_TIMER0_dummy>:
}

void isr_TIMER0_dummy( void )
{
 c10883c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c108840:	e1a0c00d 	mov	ip, sp
 c108844:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c108848:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: 14 ejecutando isr_UNDEF_dummy" );
 c10884c:	e59f0010 	ldr	r0, [pc, #16]	; c108864 <isr_TIMER0_dummy+0x28>
 c108850:	eb0006c9 	bl	c10a37c <uart0_puts>
		SEGS = 0x75;
 c108854:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c108858:	e3a02075 	mov	r2, #117	; 0x75
 c10885c:	e5c32000 	strb	r2, [r3]
		while( 1 );
 c108860:	eafffffe 	b	c108860 <isr_TIMER0_dummy+0x24>
 c108864:	0c10d29c 	.word	0x0c10d29c

0c108868 <isr_UERR01_dummy>:
}

void isr_UERR01_dummy( void )
{
 c108868:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10886c:	e1a0c00d 	mov	ip, sp
 c108870:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c108874:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: 15 ejecutando isr_UNDEF_dummy" );
 c108878:	e59f0010 	ldr	r0, [pc, #16]	; c108890 <isr_UERR01_dummy+0x28>
 c10887c:	eb0006be 	bl	c10a37c <uart0_puts>
		SEGS = 0x75;
 c108880:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c108884:	e3a02075 	mov	r2, #117	; 0x75
 c108888:	e5c32000 	strb	r2, [r3]
		while( 1 );
 c10888c:	eafffffe 	b	c10888c <isr_UERR01_dummy+0x24>
 c108890:	0c10d2d0 	.word	0x0c10d2d0

0c108894 <isr_WDT_dummy>:
}

void isr_WDT_dummy( void )
{
 c108894:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c108898:	e1a0c00d 	mov	ip, sp
 c10889c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1088a0:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: 16 ejecutando isr_UNDEF_dummy" );
 c1088a4:	e59f0010 	ldr	r0, [pc, #16]	; c1088bc <isr_WDT_dummy+0x28>
 c1088a8:	eb0006b3 	bl	c10a37c <uart0_puts>
		SEGS = 0x75;
 c1088ac:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1088b0:	e3a02075 	mov	r2, #117	; 0x75
 c1088b4:	e5c32000 	strb	r2, [r3]
		while( 1 );
 c1088b8:	eafffffe 	b	c1088b8 <isr_WDT_dummy+0x24>
 c1088bc:	0c10d304 	.word	0x0c10d304

0c1088c0 <isr_BDMA1_dummy>:
}

void isr_BDMA1_dummy( void )
{
 c1088c0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1088c4:	e1a0c00d 	mov	ip, sp
 c1088c8:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1088cc:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL:17  ejecutando isr_UNDEF_dummy" );
 c1088d0:	e59f0010 	ldr	r0, [pc, #16]	; c1088e8 <isr_BDMA1_dummy+0x28>
 c1088d4:	eb0006a8 	bl	c10a37c <uart0_puts>
		SEGS = 0x75;
 c1088d8:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1088dc:	e3a02075 	mov	r2, #117	; 0x75
 c1088e0:	e5c32000 	strb	r2, [r3]
		while( 1 );
 c1088e4:	eafffffe 	b	c1088e4 <isr_BDMA1_dummy+0x24>
 c1088e8:	0c10d338 	.word	0x0c10d338

0c1088ec <isr_BDMA0_dummy>:
}

void isr_BDMA0_dummy( void )
{
 c1088ec:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1088f0:	e1a0c00d 	mov	ip, sp
 c1088f4:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1088f8:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: 18 ejecutando isr_UNDEF_dummy" );
 c1088fc:	e59f0010 	ldr	r0, [pc, #16]	; c108914 <isr_BDMA0_dummy+0x28>
 c108900:	eb00069d 	bl	c10a37c <uart0_puts>
		SEGS = 0x75;
 c108904:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c108908:	e3a02075 	mov	r2, #117	; 0x75
 c10890c:	e5c32000 	strb	r2, [r3]
		while( 1 );
 c108910:	eafffffe 	b	c108910 <isr_BDMA0_dummy+0x24>
 c108914:	0c10d36c 	.word	0x0c10d36c

0c108918 <isr_ZDMA1_dummy>:
}

void isr_ZDMA1_dummy( void )
{
 c108918:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10891c:	e1a0c00d 	mov	ip, sp
 c108920:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c108924:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: 19ejecutando isr_UNDEF_dummy" );
 c108928:	e59f0010 	ldr	r0, [pc, #16]	; c108940 <isr_ZDMA1_dummy+0x28>
 c10892c:	eb000692 	bl	c10a37c <uart0_puts>
		SEGS = 0x75;
 c108930:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c108934:	e3a02075 	mov	r2, #117	; 0x75
 c108938:	e5c32000 	strb	r2, [r3]
		while( 1 );
 c10893c:	eafffffe 	b	c10893c <isr_ZDMA1_dummy+0x24>
 c108940:	0c10d3a0 	.word	0x0c10d3a0

0c108944 <isr_ZDMA0_dummy>:
}

void isr_ZDMA0_dummy( void )
{
 c108944:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c108948:	e1a0c00d 	mov	ip, sp
 c10894c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c108950:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL:20 ejecutando isr_UNDEF_dummy" );
 c108954:	e59f0010 	ldr	r0, [pc, #16]	; c10896c <isr_ZDMA0_dummy+0x28>
 c108958:	eb000687 	bl	c10a37c <uart0_puts>
		SEGS = 0x75;
 c10895c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c108960:	e3a02075 	mov	r2, #117	; 0x75
 c108964:	e5c32000 	strb	r2, [r3]
		while( 1 );
 c108968:	eafffffe 	b	c108968 <isr_ZDMA0_dummy+0x24>
 c10896c:	0c10d3d0 	.word	0x0c10d3d0

0c108970 <isr_TICK_dummy>:
}

void isr_TICK_dummy( void )
{
 c108970:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c108974:	e1a0c00d 	mov	ip, sp
 c108978:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10897c:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: 21ejecutando isr_TICK_dummy" );
 c108980:	e59f0010 	ldr	r0, [pc, #16]	; c108998 <isr_TICK_dummy+0x28>
 c108984:	eb00067c 	bl	c10a37c <uart0_puts>
    SEGS = 0x75;
 c108988:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10898c:	e3a02075 	mov	r2, #117	; 0x75
 c108990:	e5c32000 	strb	r2, [r3]
    while( 1 );
 c108994:	eafffffe 	b	c108994 <isr_TICK_dummy+0x24>
 c108998:	0c10d400 	.word	0x0c10d400

0c10899c <isr_PB_dummy>:
}

void isr_PB_dummy( void )
{
 c10899c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1089a0:	e1a0c00d 	mov	ip, sp
 c1089a4:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1089a8:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL:22 ejecutando isr_UNDEF_dummy" );
 c1089ac:	e59f0010 	ldr	r0, [pc, #16]	; c1089c4 <isr_PB_dummy+0x28>
 c1089b0:	eb000671 	bl	c10a37c <uart0_puts>
		SEGS = 0x75;
 c1089b4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1089b8:	e3a02075 	mov	r2, #117	; 0x75
 c1089bc:	e5c32000 	strb	r2, [r3]
		while( 1 );
 c1089c0:	eafffffe 	b	c1089c0 <isr_PB_dummy+0x24>
 c1089c4:	0c10d430 	.word	0x0c10d430

0c1089c8 <isr_ETHERNET_dummy>:
}

void isr_ETHERNET_dummy( void )
{
 c1089c8:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1089cc:	e1a0c00d 	mov	ip, sp
 c1089d0:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1089d4:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: 23ejecutando isr_UNDEF_dummy" );
 c1089d8:	e59f0010 	ldr	r0, [pc, #16]	; c1089f0 <isr_ETHERNET_dummy+0x28>
 c1089dc:	eb000666 	bl	c10a37c <uart0_puts>
	SEGS = 0x75;
 c1089e0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1089e4:	e3a02075 	mov	r2, #117	; 0x75
 c1089e8:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c1089ec:	eafffffe 	b	c1089ec <isr_ETHERNET_dummy+0x24>
 c1089f0:	0c10d460 	.word	0x0c10d460

0c1089f4 <isr_TS_dummy>:
}

void isr_TS_dummy( void )
{
 c1089f4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1089f8:	e1a0c00d 	mov	ip, sp
 c1089fc:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c108a00:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: 24ejecutando isr_UNDEF_dummy" );
 c108a04:	e59f0010 	ldr	r0, [pc, #16]	; c108a1c <isr_TS_dummy+0x28>
 c108a08:	eb00065b 	bl	c10a37c <uart0_puts>
	SEGS = 0x75;
 c108a0c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c108a10:	e3a02075 	mov	r2, #117	; 0x75
 c108a14:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c108a18:	eafffffe 	b	c108a18 <isr_TS_dummy+0x24>
 c108a1c:	0c10d490 	.word	0x0c10d490

0c108a20 <isr_KEYPAD_dummy>:
}

void isr_KEYPAD_dummy( void )
{
 c108a20:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c108a24:	e1a0c00d 	mov	ip, sp
 c108a28:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c108a2c:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: 25ejecutando isr_UNDEF_dummy" );
 c108a30:	e59f0010 	ldr	r0, [pc, #16]	; c108a48 <isr_KEYPAD_dummy+0x28>
 c108a34:	eb000650 	bl	c10a37c <uart0_puts>
		SEGS = 0x75;
 c108a38:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c108a3c:	e3a02075 	mov	r2, #117	; 0x75
 c108a40:	e5c32000 	strb	r2, [r3]
		while( 1 );
 c108a44:	eafffffe 	b	c108a44 <isr_KEYPAD_dummy+0x24>
 c108a48:	0c10d4c0 	.word	0x0c10d4c0

0c108a4c <isr_USB_dummy>:
}

void isr_USB_dummy( void )
{
 c108a4c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c108a50:	e1a0c00d 	mov	ip, sp
 c108a54:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c108a58:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n*** ERROR FATAL: 26ejecutando isr_UNDEF_dummy" );
 c108a5c:	e59f0010 	ldr	r0, [pc, #16]	; c108a74 <isr_USB_dummy+0x28>
 c108a60:	eb000645 	bl	c10a37c <uart0_puts>
	SEGS = 0x75;
 c108a64:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c108a68:	e3a02075 	mov	r2, #117	; 0x75
 c108a6c:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c108a70:	eafffffe 	b	c108a70 <isr_USB_dummy+0x24>
 c108a74:	0c10d4f0 	.word	0x0c10d4f0

0c108a78 <show_sys_info>:
}

static inline void show_sys_info( void )
{
 c108a78:	e1a0c00d 	mov	ip, sp
 c108a7c:	e92dd800 	push	{fp, ip, lr, pc}
 c108a80:	e24cb004 	sub	fp, ip, #4
    uart0_puts( "\n\n INFORMACION SISTEMA" );
 c108a84:	e59f000c 	ldr	r0, [pc, #12]	; c108a98 <show_sys_info+0x20>
 c108a88:	eb00063b 	bl	c10a37c <uart0_puts>
}
 c108a8c:	e24bd00c 	sub	sp, fp, #12
 c108a90:	e89d6800 	ldm	sp, {fp, sp, lr}
 c108a94:	e12fff1e 	bx	lr
 c108a98:	0c10d520 	.word	0x0c10d520

0c108a9c <sleep>:

inline void sleep( void )
{
 c108a9c:	e1a0c00d 	mov	ip, sp
 c108aa0:	e92dd800 	push	{fp, ip, lr, pc}
 c108aa4:	e24cb004 	sub	fp, ip, #4
    CLKCON |= (1 << 2);    // Pone a la CPU en estado IDLE
 c108aa8:	e59f3018 	ldr	r3, [pc, #24]	; c108ac8 <sleep+0x2c>
 c108aac:	e59f2014 	ldr	r2, [pc, #20]	; c108ac8 <sleep+0x2c>
 c108ab0:	e5922000 	ldr	r2, [r2]
 c108ab4:	e3822004 	orr	r2, r2, #4
 c108ab8:	e5832000 	str	r2, [r3]
}
 c108abc:	e24bd00c 	sub	sp, fp, #12
 c108ac0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c108ac4:	e12fff1e 	bx	lr
 c108ac8:	01d80004 	.word	0x01d80004

0c108acc <sys_recovery>:

static void sys_recovery( void ) // NO TOCAR
{
 c108acc:	e1a0c00d 	mov	ip, sp
 c108ad0:	e92dd800 	push	{fp, ip, lr, pc}
 c108ad4:	e24cb004 	sub	fp, ip, #4
 c108ad8:	e24dd018 	sub	sp, sp, #24
    uint8 mode;
    uint32 sp, fp;
    uint32 *addrSrc, *addrDst;
    uint32 diffStacks;
    
    asm volatile ( "str sp, %0" : "=m" (sp) : : );    // lee el puntero a la cima de la pila de excepción (SP) 
 c108adc:	e50bd01c 	str	sp, [fp, #-28]	; 0xffffffe4
    asm volatile ( "str fp, %0" : "=m" (fp) : : );    // lee el puntero al marco de activación (FP) de sys_recovery() en la pila de excepción
 c108ae0:	e50bb020 	str	fp, [fp, #-32]	; 0xffffffe0
    
    GET_OPMODE( &mode );    // lee el modo de ejecución del procesador
 c108ae4:	e10f0000 	mrs	r0, CPSR
 c108ae8:	e200001f 	and	r0, r0, #31
 c108aec:	e54b0015 	strb	r0, [fp, #-21]	; 0xffffffeb
    switch( mode )
 c108af0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c108af4:	e2433011 	sub	r3, r3, #17
 c108af8:	e353000a 	cmp	r3, #10
 c108afc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 c108b00:	ea00001e 	b	c108b80 <sys_recovery+0xb4>
 c108b04:	0c108b44 	.word	0x0c108b44
 c108b08:	0c108b30 	.word	0x0c108b30
 c108b0c:	0c108b80 	.word	0x0c108b80
 c108b10:	0c108b80 	.word	0x0c108b80
 c108b14:	0c108b80 	.word	0x0c108b80
 c108b18:	0c108b80 	.word	0x0c108b80
 c108b1c:	0c108b58 	.word	0x0c108b58
 c108b20:	0c108b80 	.word	0x0c108b80
 c108b24:	0c108b80 	.word	0x0c108b80
 c108b28:	0c108b80 	.word	0x0c108b80
 c108b2c:	0c108b6c 	.word	0x0c108b6c
    {
        case IRQMODE:
            diffStacks = IRQSTACK - SVCSTACK;     // calcula la distancia entre la bases de la pila IRQ y la SVC
 c108b30:	e3a03c03 	mov	r3, #768	; 0x300
 c108b34:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            addrSrc = (uint32 *)IRQSTACK;         // base de la pila IRQ
 c108b38:	e59f3198 	ldr	r3, [pc, #408]	; c108cd8 <sys_recovery+0x20c>
 c108b3c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
            break;
 c108b40:	ea00000f 	b	c108b84 <sys_recovery+0xb8>
        case FIQMODE:
            diffStacks = FIQSTACK - SVCSTACK;     // calcula la distancia entre la bases de la pila FIQ y la SVC
 c108b44:	e3a03b01 	mov	r3, #1024	; 0x400
 c108b48:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            addrSrc = (uint32 *)FIQSTACK;         // base de la pila FIQ
 c108b4c:	e59f3188 	ldr	r3, [pc, #392]	; c108cdc <sys_recovery+0x210>
 c108b50:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
            break;
 c108b54:	ea00000a 	b	c108b84 <sys_recovery+0xb8>
        case ABTMODE:
            diffStacks = ABTSTACK - SVCSTACK;     // calcula la distancia entre la bases de la pila ABT y la SVC
 c108b58:	e3a03c02 	mov	r3, #512	; 0x200
 c108b5c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            addrSrc = (uint32 *)ABTSTACK;         // base de la pila ABT
 c108b60:	e59f3178 	ldr	r3, [pc, #376]	; c108ce0 <sys_recovery+0x214>
 c108b64:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
            break;
 c108b68:	ea000005 	b	c108b84 <sys_recovery+0xb8>
        case UNDMODE:
            diffStacks = UNDSTACK - SVCSTACK;     // calcula la distancia entre la bases de la pila UND y la SVC
 c108b6c:	e3a03c01 	mov	r3, #256	; 0x100
 c108b70:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            addrSrc = (uint32 *)UNDSTACK;         // base de la pila UND
 c108b74:	e59f3168 	ldr	r3, [pc, #360]	; c108ce4 <sys_recovery+0x218>
 c108b78:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
            break;         
 c108b7c:	ea000000 	b	c108b84 <sys_recovery+0xb8>
        case USRMODE:
            // Habría que hacer algo análogo a lo anterior y además para volver a modo SVC dado que no es válido SET_OPMODE( SVCMODE ), es necesario esto:
            // pISR_SWI = (uint32) isr_SWI;
            // SWI( 0 );  
        default:
            while( 1 );                           // aquí no debería llegarse
 c108b80:	eafffffe 	b	c108b80 <sys_recovery+0xb4>
            break;
    }    
        
    asm volatile ( "ldr sp, %0" : "=m" (addrSrc) : : );    // restaura el SP de excepción a su base para desechar su contenido y evitar su desbordamiento     
 c108b84:	e51bd024 	ldr	sp, [fp, #-36]	; 0xffffffdc
        
    for( addrDst = (uint32 *)SVCSTACK; addrSrc > (uint32 *)sp; )    // copia el contenido completo de la pila excepción en la pila SVC
 c108b88:	e59f3158 	ldr	r3, [pc, #344]	; c108ce8 <sys_recovery+0x21c>
 c108b8c:	e50b3010 	str	r3, [fp, #-16]
 c108b90:	ea000009 	b	c108bbc <sys_recovery+0xf0>
        *(--addrDst) = *(--addrSrc);
 c108b94:	e51b3010 	ldr	r3, [fp, #-16]
 c108b98:	e2433004 	sub	r3, r3, #4
 c108b9c:	e50b3010 	str	r3, [fp, #-16]
 c108ba0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c108ba4:	e2433004 	sub	r3, r3, #4
 c108ba8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
 c108bac:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c108bb0:	e5932000 	ldr	r2, [r3]
 c108bb4:	e51b3010 	ldr	r3, [fp, #-16]
 c108bb8:	e5832000 	str	r2, [r3]
            break;
    }    
        
    asm volatile ( "ldr sp, %0" : "=m" (addrSrc) : : );    // restaura el SP de excepción a su base para desechar su contenido y evitar su desbordamiento     
        
    for( addrDst = (uint32 *)SVCSTACK; addrSrc > (uint32 *)sp; )    // copia el contenido completo de la pila excepción en la pila SVC
 c108bbc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c108bc0:	e1a02003 	mov	r2, r3
 c108bc4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c108bc8:	e1520003 	cmp	r2, r3
 c108bcc:	3afffff0 	bcc	c108b94 <sys_recovery+0xc8>
        *(--addrDst) = *(--addrSrc);

    addrDst = (uint32 *)(fp-diffStacks);   // carga el puntero al marco de activación de sys_recovery() en la pila SVC
 c108bd0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c108bd4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c108bd8:	e0633002 	rsb	r3, r3, r2
 c108bdc:	e50b3010 	str	r3, [fp, #-16]
    addrDst--;                             // salta el PC apilado
 c108be0:	e51b3010 	ldr	r3, [fp, #-16]
 c108be4:	e2433004 	sub	r3, r3, #4
 c108be8:	e50b3010 	str	r3, [fp, #-16]
    addrDst--;                             // salta el LR apilado
 c108bec:	e51b3010 	ldr	r3, [fp, #-16]
 c108bf0:	e2433004 	sub	r3, r3, #4
 c108bf4:	e50b3010 	str	r3, [fp, #-16]
    *addrDst -= diffStacks;                // actualiza SP apilado para que apunte a la pila SVC
 c108bf8:	e51b3010 	ldr	r3, [fp, #-16]
 c108bfc:	e5932000 	ldr	r2, [r3]
 c108c00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c108c04:	e0632002 	rsb	r2, r3, r2
 c108c08:	e51b3010 	ldr	r3, [fp, #-16]
 c108c0c:	e5832000 	str	r2, [r3]
    addrDst--;                             // salta el SP apilado
 c108c10:	e51b3010 	ldr	r3, [fp, #-16]
 c108c14:	e2433004 	sub	r3, r3, #4
 c108c18:	e50b3010 	str	r3, [fp, #-16]
    *addrDst -= diffStacks;                // actualiza el FP apilado para que apunte a la pila SVC
 c108c1c:	e51b3010 	ldr	r3, [fp, #-16]
 c108c20:	e5932000 	ldr	r2, [r3]
 c108c24:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c108c28:	e0632002 	rsb	r2, r3, r2
 c108c2c:	e51b3010 	ldr	r3, [fp, #-16]
 c108c30:	e5832000 	str	r2, [r3]
    
    addrDst = (uint32 *)(*addrDst);        // carga el puntero al marco de activación de sys_init()
 c108c34:	e51b3010 	ldr	r3, [fp, #-16]
 c108c38:	e5933000 	ldr	r3, [r3]
 c108c3c:	e50b3010 	str	r3, [fp, #-16]
    addrDst--;                             // salta el PC apilado
 c108c40:	e51b3010 	ldr	r3, [fp, #-16]
 c108c44:	e2433004 	sub	r3, r3, #4
 c108c48:	e50b3010 	str	r3, [fp, #-16]
    addrDst--;                             // salta el LR apilado
 c108c4c:	e51b3010 	ldr	r3, [fp, #-16]
 c108c50:	e2433004 	sub	r3, r3, #4
 c108c54:	e50b3010 	str	r3, [fp, #-16]
    *addrDst -= diffStacks;                // actualiza SP apilado para que apunte a la pila SVC
 c108c58:	e51b3010 	ldr	r3, [fp, #-16]
 c108c5c:	e5932000 	ldr	r2, [r3]
 c108c60:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c108c64:	e0632002 	rsb	r2, r3, r2
 c108c68:	e51b3010 	ldr	r3, [fp, #-16]
 c108c6c:	e5832000 	str	r2, [r3]
    addrDst--;                             // salta el SP apilado
 c108c70:	e51b3010 	ldr	r3, [fp, #-16]
 c108c74:	e2433004 	sub	r3, r3, #4
 c108c78:	e50b3010 	str	r3, [fp, #-16]
    *addrDst -= diffStacks;                // actualiza el FP apilado para que apunte a la pila SVC
 c108c7c:	e51b3010 	ldr	r3, [fp, #-16]
 c108c80:	e5932000 	ldr	r2, [r3]
 c108c84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c108c88:	e0632002 	rsb	r2, r3, r2
 c108c8c:	e51b3010 	ldr	r3, [fp, #-16]
 c108c90:	e5832000 	str	r2, [r3]
   
    SET_OPMODE( SVCMODE );                           // cambia a modo SVC
 c108c94:	e10f0000 	mrs	r0, CPSR
 c108c98:	e3c0001f 	bic	r0, r0, #31
 c108c9c:	e3800013 	orr	r0, r0, #19
 c108ca0:	e121f000 	msr	CPSR_c, r0

    sp -= diffStacks;
 c108ca4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c108ca8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c108cac:	e0633002 	rsb	r3, r3, r2
 c108cb0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    asm volatile ( "ldr sp, %0" : : "m" (sp) : );    // actualiza SP_svc para que apunte a la cima de la pila SVC
 c108cb4:	e51bd01c 	ldr	sp, [fp, #-28]	; 0xffffffe4
    
    fp -= diffStacks;                 
 c108cb8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c108cbc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c108cc0:	e0633002 	rsb	r3, r3, r2
 c108cc4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    asm volatile ( "ldr fp, %0" : : "m" (fp) : );    // actualiza FP para que apunte al marco de la pila SVC, debe ser siempre la última sentencia
 c108cc8:	e51bb020 	ldr	fp, [fp, #-32]	; 0xffffffe0
}
 c108ccc:	e24bd00c 	sub	sp, fp, #12
 c108cd0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c108cd4:	e12fff1e 	bx	lr
 c108cd8:	0c7ff400 	.word	0x0c7ff400
 c108cdc:	0c7ff500 	.word	0x0c7ff500
 c108ce0:	0c7ff300 	.word	0x0c7ff300
 c108ce4:	0c7ff200 	.word	0x0c7ff200
 c108ce8:	0c7ff100 	.word	0x0c7ff100

0c108cec <timers_init4>:
static uint32 loop_s = 0;

static void sw_delay_init( void );
static void sw_delay_init4( void );
void timers_init4( void )
{
 c108cec:	e1a0c00d 	mov	ip, sp
 c108cf0:	e92dd800 	push	{fp, ip, lr, pc}
 c108cf4:	e24cb004 	sub	fp, ip, #4
    TCFG0 = 0;
 c108cf8:	e59f30bc 	ldr	r3, [pc, #188]	; c108dbc <timers_init4+0xd0>
 c108cfc:	e3a02000 	mov	r2, #0
 c108d00:	e5832000 	str	r2, [r3]
    TCFG1 = 0;
 c108d04:	e59f30b4 	ldr	r3, [pc, #180]	; c108dc0 <timers_init4+0xd4>
 c108d08:	e3a02000 	mov	r2, #0
 c108d0c:	e5832000 	str	r2, [r3]

    TCNTB0 = 0x0;
 c108d10:	e59f30ac 	ldr	r3, [pc, #172]	; c108dc4 <timers_init4+0xd8>
 c108d14:	e3a02000 	mov	r2, #0
 c108d18:	e5832000 	str	r2, [r3]
    TCMPB0 = 0x0;
 c108d1c:	e59f30a4 	ldr	r3, [pc, #164]	; c108dc8 <timers_init4+0xdc>
 c108d20:	e3a02000 	mov	r2, #0
 c108d24:	e5832000 	str	r2, [r3]
    TCNTB1 = 0x0;
 c108d28:	e59f309c 	ldr	r3, [pc, #156]	; c108dcc <timers_init4+0xe0>
 c108d2c:	e3a02000 	mov	r2, #0
 c108d30:	e5832000 	str	r2, [r3]
    TCMPB1 = 0x0;
 c108d34:	e59f3094 	ldr	r3, [pc, #148]	; c108dd0 <timers_init4+0xe4>
 c108d38:	e3a02000 	mov	r2, #0
 c108d3c:	e5832000 	str	r2, [r3]
    TCNTB2 = 0x0;
 c108d40:	e59f308c 	ldr	r3, [pc, #140]	; c108dd4 <timers_init4+0xe8>
 c108d44:	e3a02000 	mov	r2, #0
 c108d48:	e5832000 	str	r2, [r3]
    TCMPB2 = 0x0;
 c108d4c:	e59f3084 	ldr	r3, [pc, #132]	; c108dd8 <timers_init4+0xec>
 c108d50:	e3a02000 	mov	r2, #0
 c108d54:	e5832000 	str	r2, [r3]
    TCNTB3 = 0x0;
 c108d58:	e59f307c 	ldr	r3, [pc, #124]	; c108ddc <timers_init4+0xf0>
 c108d5c:	e3a02000 	mov	r2, #0
 c108d60:	e5832000 	str	r2, [r3]
    TCMPB3 = 0x0;
 c108d64:	e59f3074 	ldr	r3, [pc, #116]	; c108de0 <timers_init4+0xf4>
 c108d68:	e3a02000 	mov	r2, #0
 c108d6c:	e5832000 	str	r2, [r3]
    TCNTB4 = 0x0;
 c108d70:	e59f306c 	ldr	r3, [pc, #108]	; c108de4 <timers_init4+0xf8>
 c108d74:	e3a02000 	mov	r2, #0
 c108d78:	e5832000 	str	r2, [r3]
    TCMPB4 = 0x0;
 c108d7c:	e59f3064 	ldr	r3, [pc, #100]	; c108de8 <timers_init4+0xfc>
 c108d80:	e3a02000 	mov	r2, #0
 c108d84:	e5832000 	str	r2, [r3]
    TCNTB5 = 0x0;
 c108d88:	e59f305c 	ldr	r3, [pc, #92]	; c108dec <timers_init4+0x100>
 c108d8c:	e3a02000 	mov	r2, #0
 c108d90:	e5832000 	str	r2, [r3]

    TCON = (1<25)|(1<<21)|(1<<17)|(1<<13)|(1<<9)|(1<<1);
 c108d94:	e59f3054 	ldr	r3, [pc, #84]	; c108df0 <timers_init4+0x104>
 c108d98:	e59f2054 	ldr	r2, [pc, #84]	; c108df4 <timers_init4+0x108>
 c108d9c:	e5832000 	str	r2, [r3]
TCON = ((0<25)|(0<<21)|(0<<17)|(0<<13)|(0<<9)|(0<<1));
 c108da0:	e59f3048 	ldr	r3, [pc, #72]	; c108df0 <timers_init4+0x104>
 c108da4:	e3a02001 	mov	r2, #1
 c108da8:	e5832000 	str	r2, [r3]

    sw_delay_init4();
 c108dac:	eb000054 	bl	c108f04 <sw_delay_init4>
}
 c108db0:	e24bd00c 	sub	sp, fp, #12
 c108db4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c108db8:	e12fff1e 	bx	lr
 c108dbc:	01d50000 	.word	0x01d50000
 c108dc0:	01d50004 	.word	0x01d50004
 c108dc4:	01d5000c 	.word	0x01d5000c
 c108dc8:	01d50010 	.word	0x01d50010
 c108dcc:	01d50018 	.word	0x01d50018
 c108dd0:	01d5001c 	.word	0x01d5001c
 c108dd4:	01d50024 	.word	0x01d50024
 c108dd8:	01d50028 	.word	0x01d50028
 c108ddc:	01d50030 	.word	0x01d50030
 c108de0:	01d50034 	.word	0x01d50034
 c108de4:	01d5003c 	.word	0x01d5003c
 c108de8:	01d50040 	.word	0x01d50040
 c108dec:	01d50048 	.word	0x01d50048
 c108df0:	01d50008 	.word	0x01d50008
 c108df4:	00222203 	.word	0x00222203

0c108df8 <timers_init>:
void timers_init( void )
{
 c108df8:	e1a0c00d 	mov	ip, sp
 c108dfc:	e92dd800 	push	{fp, ip, lr, pc}
 c108e00:	e24cb004 	sub	fp, ip, #4
    TCFG0 = 0;
 c108e04:	e59f30bc 	ldr	r3, [pc, #188]	; c108ec8 <timers_init+0xd0>
 c108e08:	e3a02000 	mov	r2, #0
 c108e0c:	e5832000 	str	r2, [r3]
    TCFG1 = 0;
 c108e10:	e59f30b4 	ldr	r3, [pc, #180]	; c108ecc <timers_init+0xd4>
 c108e14:	e3a02000 	mov	r2, #0
 c108e18:	e5832000 	str	r2, [r3]

    TCNTB0 = 0x0;
 c108e1c:	e59f30ac 	ldr	r3, [pc, #172]	; c108ed0 <timers_init+0xd8>
 c108e20:	e3a02000 	mov	r2, #0
 c108e24:	e5832000 	str	r2, [r3]
    TCMPB0 = 0x0;
 c108e28:	e59f30a4 	ldr	r3, [pc, #164]	; c108ed4 <timers_init+0xdc>
 c108e2c:	e3a02000 	mov	r2, #0
 c108e30:	e5832000 	str	r2, [r3]
    TCNTB1 = 0x0;
 c108e34:	e59f309c 	ldr	r3, [pc, #156]	; c108ed8 <timers_init+0xe0>
 c108e38:	e3a02000 	mov	r2, #0
 c108e3c:	e5832000 	str	r2, [r3]
    TCMPB1 = 0x0;
 c108e40:	e59f3094 	ldr	r3, [pc, #148]	; c108edc <timers_init+0xe4>
 c108e44:	e3a02000 	mov	r2, #0
 c108e48:	e5832000 	str	r2, [r3]
    TCNTB2 = 0x0;
 c108e4c:	e59f308c 	ldr	r3, [pc, #140]	; c108ee0 <timers_init+0xe8>
 c108e50:	e3a02000 	mov	r2, #0
 c108e54:	e5832000 	str	r2, [r3]
    TCMPB2 = 0x0;
 c108e58:	e59f3084 	ldr	r3, [pc, #132]	; c108ee4 <timers_init+0xec>
 c108e5c:	e3a02000 	mov	r2, #0
 c108e60:	e5832000 	str	r2, [r3]
    TCNTB3 = 0x0;
 c108e64:	e59f307c 	ldr	r3, [pc, #124]	; c108ee8 <timers_init+0xf0>
 c108e68:	e3a02000 	mov	r2, #0
 c108e6c:	e5832000 	str	r2, [r3]
    TCMPB3 = 0x0;
 c108e70:	e59f3074 	ldr	r3, [pc, #116]	; c108eec <timers_init+0xf4>
 c108e74:	e3a02000 	mov	r2, #0
 c108e78:	e5832000 	str	r2, [r3]
    TCNTB4 = 0x0;
 c108e7c:	e59f306c 	ldr	r3, [pc, #108]	; c108ef0 <timers_init+0xf8>
 c108e80:	e3a02000 	mov	r2, #0
 c108e84:	e5832000 	str	r2, [r3]
    TCMPB4 = 0x0;
 c108e88:	e59f3064 	ldr	r3, [pc, #100]	; c108ef4 <timers_init+0xfc>
 c108e8c:	e3a02000 	mov	r2, #0
 c108e90:	e5832000 	str	r2, [r3]
    TCNTB5 = 0x0;
 c108e94:	e59f305c 	ldr	r3, [pc, #92]	; c108ef8 <timers_init+0x100>
 c108e98:	e3a02000 	mov	r2, #0
 c108e9c:	e5832000 	str	r2, [r3]

    TCON = (1<25)|(1<<21)|(1<<17)|(1<<13)|(1<<9)|(1<<1);
 c108ea0:	e59f3054 	ldr	r3, [pc, #84]	; c108efc <timers_init+0x104>
 c108ea4:	e59f2054 	ldr	r2, [pc, #84]	; c108f00 <timers_init+0x108>
 c108ea8:	e5832000 	str	r2, [r3]
TCON = ((0<25)|(0<<21)|(0<<17)|(0<<13)|(0<<9)|(0<<1));
 c108eac:	e59f3048 	ldr	r3, [pc, #72]	; c108efc <timers_init+0x104>
 c108eb0:	e3a02001 	mov	r2, #1
 c108eb4:	e5832000 	str	r2, [r3]

    sw_delay_init();
 c108eb8:	eb00003e 	bl	c108fb8 <sw_delay_init>
}
 c108ebc:	e24bd00c 	sub	sp, fp, #12
 c108ec0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c108ec4:	e12fff1e 	bx	lr
 c108ec8:	01d50000 	.word	0x01d50000
 c108ecc:	01d50004 	.word	0x01d50004
 c108ed0:	01d5000c 	.word	0x01d5000c
 c108ed4:	01d50010 	.word	0x01d50010
 c108ed8:	01d50018 	.word	0x01d50018
 c108edc:	01d5001c 	.word	0x01d5001c
 c108ee0:	01d50024 	.word	0x01d50024
 c108ee4:	01d50028 	.word	0x01d50028
 c108ee8:	01d50030 	.word	0x01d50030
 c108eec:	01d50034 	.word	0x01d50034
 c108ef0:	01d5003c 	.word	0x01d5003c
 c108ef4:	01d50040 	.word	0x01d50040
 c108ef8:	01d50048 	.word	0x01d50048
 c108efc:	01d50008 	.word	0x01d50008
 c108f00:	00222203 	.word	0x00222203

0c108f04 <sw_delay_init4>:
static void sw_delay_init4( void )
{
 c108f04:	e1a0c00d 	mov	ip, sp
 c108f08:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c108f0c:	e24cb004 	sub	fp, ip, #4
 c108f10:	e24dd00c 	sub	sp, sp, #12
    uint32 i;

    timer4_start();
 c108f14:	eb000271 	bl	c1098e0 <timer4_start>
    for( i=1000000; i; i--);
 c108f18:	e59f3088 	ldr	r3, [pc, #136]	; c108fa8 <sw_delay_init4+0xa4>
 c108f1c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c108f20:	ea000002 	b	c108f30 <sw_delay_init4+0x2c>
 c108f24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c108f28:	e2433001 	sub	r3, r3, #1
 c108f2c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c108f30:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c108f34:	e3530000 	cmp	r3, #0
 c108f38:	1afffff9 	bne	c108f24 <sw_delay_init4+0x20>
    loop_s = ((uint64)1000000*10000)/timer4_stop();
 c108f3c:	eb000293 	bl	c109990 <timer4_stop>
 c108f40:	e1a03000 	mov	r3, r0
 c108f44:	e1a02003 	mov	r2, r3
 c108f48:	e1a03002 	mov	r3, r2
 c108f4c:	e3a04000 	mov	r4, #0
 c108f50:	e3a00315 	mov	r0, #1409286144	; 0x54000000
 c108f54:	e2800abe 	add	r0, r0, #778240	; 0xbe000
 c108f58:	e2800b01 	add	r0, r0, #1024	; 0x400
 c108f5c:	e3a01002 	mov	r1, #2
 c108f60:	e1a02003 	mov	r2, r3
 c108f64:	e1a03004 	mov	r3, r4
 c108f68:	eb000b3d 	bl	c10bc64 <__aeabi_uldivmod>
 c108f6c:	e1a03000 	mov	r3, r0
 c108f70:	e1a04001 	mov	r4, r1
 c108f74:	e1a02003 	mov	r2, r3
 c108f78:	e59f302c 	ldr	r3, [pc, #44]	; c108fac <sw_delay_init4+0xa8>
 c108f7c:	e5832000 	str	r2, [r3]
    loop_ms = loop_s / 1000;
 c108f80:	e59f3024 	ldr	r3, [pc, #36]	; c108fac <sw_delay_init4+0xa8>
 c108f84:	e5932000 	ldr	r2, [r3]
 c108f88:	e59f3020 	ldr	r3, [pc, #32]	; c108fb0 <sw_delay_init4+0xac>
 c108f8c:	e0831392 	umull	r1, r3, r2, r3
 c108f90:	e1a02323 	lsr	r2, r3, #6
 c108f94:	e59f3018 	ldr	r3, [pc, #24]	; c108fb4 <sw_delay_init4+0xb0>
 c108f98:	e5832000 	str	r2, [r3]
};
 c108f9c:	e24bd010 	sub	sp, fp, #16
 c108fa0:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c108fa4:	e12fff1e 	bx	lr
 c108fa8:	000f4240 	.word	0x000f4240
 c108fac:	0c10efa8 	.word	0x0c10efa8
 c108fb0:	10624dd3 	.word	0x10624dd3
 c108fb4:	0c10efa4 	.word	0x0c10efa4

0c108fb8 <sw_delay_init>:
static void sw_delay_init( void )
{
 c108fb8:	e1a0c00d 	mov	ip, sp
 c108fbc:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c108fc0:	e24cb004 	sub	fp, ip, #4
 c108fc4:	e24dd00c 	sub	sp, sp, #12
    uint32 i;

    timer3_start();
 c108fc8:	eb0000c8 	bl	c1092f0 <timer3_start>
    for( i=1000000; i; i--);
 c108fcc:	e59f3088 	ldr	r3, [pc, #136]	; c10905c <sw_delay_init+0xa4>
 c108fd0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c108fd4:	ea000002 	b	c108fe4 <sw_delay_init+0x2c>
 c108fd8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c108fdc:	e2433001 	sub	r3, r3, #1
 c108fe0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c108fe4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c108fe8:	e3530000 	cmp	r3, #0
 c108fec:	1afffff9 	bne	c108fd8 <sw_delay_init+0x20>
    loop_s = ((uint64)1000000*10000)/timer3_stop();
 c108ff0:	eb0000ea 	bl	c1093a0 <timer3_stop>
 c108ff4:	e1a03000 	mov	r3, r0
 c108ff8:	e1a02003 	mov	r2, r3
 c108ffc:	e1a03002 	mov	r3, r2
 c109000:	e3a04000 	mov	r4, #0
 c109004:	e3a00315 	mov	r0, #1409286144	; 0x54000000
 c109008:	e2800abe 	add	r0, r0, #778240	; 0xbe000
 c10900c:	e2800b01 	add	r0, r0, #1024	; 0x400
 c109010:	e3a01002 	mov	r1, #2
 c109014:	e1a02003 	mov	r2, r3
 c109018:	e1a03004 	mov	r3, r4
 c10901c:	eb000b10 	bl	c10bc64 <__aeabi_uldivmod>
 c109020:	e1a03000 	mov	r3, r0
 c109024:	e1a04001 	mov	r4, r1
 c109028:	e1a02003 	mov	r2, r3
 c10902c:	e59f302c 	ldr	r3, [pc, #44]	; c109060 <sw_delay_init+0xa8>
 c109030:	e5832000 	str	r2, [r3]
    loop_ms = loop_s / 1000;
 c109034:	e59f3024 	ldr	r3, [pc, #36]	; c109060 <sw_delay_init+0xa8>
 c109038:	e5932000 	ldr	r2, [r3]
 c10903c:	e59f3020 	ldr	r3, [pc, #32]	; c109064 <sw_delay_init+0xac>
 c109040:	e0831392 	umull	r1, r3, r2, r3
 c109044:	e1a02323 	lsr	r2, r3, #6
 c109048:	e59f3018 	ldr	r3, [pc, #24]	; c109068 <sw_delay_init+0xb0>
 c10904c:	e5832000 	str	r2, [r3]
};
 c109050:	e24bd010 	sub	sp, fp, #16
 c109054:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c109058:	e12fff1e 	bx	lr
 c10905c:	000f4240 	.word	0x000f4240
 c109060:	0c10efa8 	.word	0x0c10efa8
 c109064:	10624dd3 	.word	0x10624dd3
 c109068:	0c10efa4 	.word	0x0c10efa4

0c10906c <timer3_delay_ms>:

void timer3_delay_ms( uint16 n )
{
 c10906c:	e1a0c00d 	mov	ip, sp
 c109070:	e92dd800 	push	{fp, ip, lr, pc}
 c109074:	e24cb004 	sub	fp, ip, #4
 c109078:	e24dd008 	sub	sp, sp, #8
 c10907c:	e1a03000 	mov	r3, r0
 c109080:	e14b30be 	strh	r3, [fp, #-14]
    for( ; n; n-- )
 c109084:	ea000027 	b	c109128 <timer3_delay_ms+0xbc>
    {
    TCFG0 = (TCFG0 & ~(0xff << 8)) | (199 << 8);
 c109088:	e59f30b0 	ldr	r3, [pc, #176]	; c109140 <timer3_delay_ms+0xd4>
 c10908c:	e59f20ac 	ldr	r2, [pc, #172]	; c109140 <timer3_delay_ms+0xd4>
 c109090:	e5922000 	ldr	r2, [r2]
 c109094:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c109098:	e3822cc7 	orr	r2, r2, #50944	; 0xc700
 c10909c:	e5832000 	str	r2, [r3]
TCFG1 = (TCFG1 & ~(0xf << 12)) | (4 << 12);
 c1090a0:	e59f309c 	ldr	r3, [pc, #156]	; c109144 <timer3_delay_ms+0xd8>
 c1090a4:	e59f2098 	ldr	r2, [pc, #152]	; c109144 <timer3_delay_ms+0xd8>
 c1090a8:	e5922000 	ldr	r2, [r2]
 c1090ac:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c1090b0:	e3822901 	orr	r2, r2, #16384	; 0x4000
 c1090b4:	e5832000 	str	r2, [r3]

TCNTB3 = 10;
 c1090b8:	e59f3088 	ldr	r3, [pc, #136]	; c109148 <timer3_delay_ms+0xdc>
 c1090bc:	e3a0200a 	mov	r2, #10
 c1090c0:	e5832000 	str	r2, [r3]
TCON = (TCON & ~(0xf << 16)) | (1 << 17);
 c1090c4:	e59f3080 	ldr	r3, [pc, #128]	; c10914c <timer3_delay_ms+0xe0>
 c1090c8:	e59f207c 	ldr	r2, [pc, #124]	; c10914c <timer3_delay_ms+0xe0>
 c1090cc:	e5922000 	ldr	r2, [r2]
 c1090d0:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c1090d4:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c1090d8:	e5832000 	str	r2, [r3]
TCON = (TCON & ~(0xf << 16)) | (1 << 16);
 c1090dc:	e59f3068 	ldr	r3, [pc, #104]	; c10914c <timer3_delay_ms+0xe0>
 c1090e0:	e59f2064 	ldr	r2, [pc, #100]	; c10914c <timer3_delay_ms+0xe0>
 c1090e4:	e5922000 	ldr	r2, [r2]
 c1090e8:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c1090ec:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c1090f0:	e5832000 	str	r2, [r3]
while( !TCNTO3 );
 c1090f4:	e1a00000 	nop			; (mov r0, r0)
 c1090f8:	e59f3050 	ldr	r3, [pc, #80]	; c109150 <timer3_delay_ms+0xe4>
 c1090fc:	e5933000 	ldr	r3, [r3]
 c109100:	e3530000 	cmp	r3, #0
 c109104:	0afffffb 	beq	c1090f8 <timer3_delay_ms+0x8c>
while(TCNTO3);
 c109108:	e1a00000 	nop			; (mov r0, r0)
 c10910c:	e59f303c 	ldr	r3, [pc, #60]	; c109150 <timer3_delay_ms+0xe4>
 c109110:	e5933000 	ldr	r3, [r3]
 c109114:	e3530000 	cmp	r3, #0
 c109118:	1afffffb 	bne	c10910c <timer3_delay_ms+0xa0>
    loop_ms = loop_s / 1000;
};

void timer3_delay_ms( uint16 n )
{
    for( ; n; n-- )
 c10911c:	e15b30be 	ldrh	r3, [fp, #-14]
 c109120:	e2433001 	sub	r3, r3, #1
 c109124:	e14b30be 	strh	r3, [fp, #-14]
 c109128:	e15b30be 	ldrh	r3, [fp, #-14]
 c10912c:	e3530000 	cmp	r3, #0
 c109130:	1affffd4 	bne	c109088 <timer3_delay_ms+0x1c>
TCON = (TCON & ~(0xf << 16)) | (1 << 17);
TCON = (TCON & ~(0xf << 16)) | (1 << 16);
while( !TCNTO3 );
while(TCNTO3);
    }
}
 c109134:	e24bd00c 	sub	sp, fp, #12
 c109138:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10913c:	e12fff1e 	bx	lr
 c109140:	01d50000 	.word	0x01d50000
 c109144:	01d50004 	.word	0x01d50004
 c109148:	01d50030 	.word	0x01d50030
 c10914c:	01d50008 	.word	0x01d50008
 c109150:	01d50038 	.word	0x01d50038

0c109154 <sw_delay_ms>:

void sw_delay_ms( uint16 n )
{
 c109154:	e1a0c00d 	mov	ip, sp
 c109158:	e92dd800 	push	{fp, ip, lr, pc}
 c10915c:	e24cb004 	sub	fp, ip, #4
 c109160:	e24dd010 	sub	sp, sp, #16
 c109164:	e1a03000 	mov	r3, r0
 c109168:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    uint32 i;

    for( i=loop_ms*n; i; i-- );
 c10916c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c109170:	e59f2030 	ldr	r2, [pc, #48]	; c1091a8 <sw_delay_ms+0x54>
 c109174:	e5922000 	ldr	r2, [r2]
 c109178:	e0030392 	mul	r3, r2, r3
 c10917c:	e50b3010 	str	r3, [fp, #-16]
 c109180:	ea000002 	b	c109190 <sw_delay_ms+0x3c>
 c109184:	e51b3010 	ldr	r3, [fp, #-16]
 c109188:	e2433001 	sub	r3, r3, #1
 c10918c:	e50b3010 	str	r3, [fp, #-16]
 c109190:	e51b3010 	ldr	r3, [fp, #-16]
 c109194:	e3530000 	cmp	r3, #0
 c109198:	1afffff9 	bne	c109184 <sw_delay_ms+0x30>
}
 c10919c:	e24bd00c 	sub	sp, fp, #12
 c1091a0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1091a4:	e12fff1e 	bx	lr
 c1091a8:	0c10efa4 	.word	0x0c10efa4

0c1091ac <timer3_delay_s>:

void timer3_delay_s( uint16 n )
{
 c1091ac:	e1a0c00d 	mov	ip, sp
 c1091b0:	e92dd800 	push	{fp, ip, lr, pc}
 c1091b4:	e24cb004 	sub	fp, ip, #4
 c1091b8:	e24dd008 	sub	sp, sp, #8
 c1091bc:	e1a03000 	mov	r3, r0
 c1091c0:	e14b30be 	strh	r3, [fp, #-14]
for( ; n; n-- )
 c1091c4:	ea000027 	b	c109268 <timer3_delay_s+0xbc>
{
TCFG0 = (TCFG0 & ~(0xff << 8)) | (199 << 8);
 c1091c8:	e59f30b0 	ldr	r3, [pc, #176]	; c109280 <timer3_delay_s+0xd4>
 c1091cc:	e59f20ac 	ldr	r2, [pc, #172]	; c109280 <timer3_delay_s+0xd4>
 c1091d0:	e5922000 	ldr	r2, [r2]
 c1091d4:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c1091d8:	e3822cc7 	orr	r2, r2, #50944	; 0xc700
 c1091dc:	e5832000 	str	r2, [r3]
TCFG1 = (TCFG1 & ~(0xf << 12)) | (4 << 12);
 c1091e0:	e59f309c 	ldr	r3, [pc, #156]	; c109284 <timer3_delay_s+0xd8>
 c1091e4:	e59f2098 	ldr	r2, [pc, #152]	; c109284 <timer3_delay_s+0xd8>
 c1091e8:	e5922000 	ldr	r2, [r2]
 c1091ec:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c1091f0:	e3822901 	orr	r2, r2, #16384	; 0x4000
 c1091f4:	e5832000 	str	r2, [r3]

TCNTB3 = 10000;
 c1091f8:	e59f3088 	ldr	r3, [pc, #136]	; c109288 <timer3_delay_s+0xdc>
 c1091fc:	e59f2088 	ldr	r2, [pc, #136]	; c10928c <timer3_delay_s+0xe0>
 c109200:	e5832000 	str	r2, [r3]
TCON = (TCON & ~(0xf << 16)) | (1 << 17);
 c109204:	e59f3084 	ldr	r3, [pc, #132]	; c109290 <timer3_delay_s+0xe4>
 c109208:	e59f2080 	ldr	r2, [pc, #128]	; c109290 <timer3_delay_s+0xe4>
 c10920c:	e5922000 	ldr	r2, [r2]
 c109210:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c109214:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c109218:	e5832000 	str	r2, [r3]
TCON = (TCON & ~(0xf << 16)) | (1 << 16);
 c10921c:	e59f306c 	ldr	r3, [pc, #108]	; c109290 <timer3_delay_s+0xe4>
 c109220:	e59f2068 	ldr	r2, [pc, #104]	; c109290 <timer3_delay_s+0xe4>
 c109224:	e5922000 	ldr	r2, [r2]
 c109228:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c10922c:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c109230:	e5832000 	str	r2, [r3]
while( !TCNTO3 );
 c109234:	e1a00000 	nop			; (mov r0, r0)
 c109238:	e59f3054 	ldr	r3, [pc, #84]	; c109294 <timer3_delay_s+0xe8>
 c10923c:	e5933000 	ldr	r3, [r3]
 c109240:	e3530000 	cmp	r3, #0
 c109244:	0afffffb 	beq	c109238 <timer3_delay_s+0x8c>
while(TCNTO3);
 c109248:	e1a00000 	nop			; (mov r0, r0)
 c10924c:	e59f3040 	ldr	r3, [pc, #64]	; c109294 <timer3_delay_s+0xe8>
 c109250:	e5933000 	ldr	r3, [r3]
 c109254:	e3530000 	cmp	r3, #0
 c109258:	1afffffb 	bne	c10924c <timer3_delay_s+0xa0>
    for( i=loop_ms*n; i; i-- );
}

void timer3_delay_s( uint16 n )
{
for( ; n; n-- )
 c10925c:	e15b30be 	ldrh	r3, [fp, #-14]
 c109260:	e2433001 	sub	r3, r3, #1
 c109264:	e14b30be 	strh	r3, [fp, #-14]
 c109268:	e15b30be 	ldrh	r3, [fp, #-14]
 c10926c:	e3530000 	cmp	r3, #0
 c109270:	1affffd4 	bne	c1091c8 <timer3_delay_s+0x1c>
TCON = (TCON & ~(0xf << 16)) | (1 << 16);
while( !TCNTO3 );
while(TCNTO3);
}

}
 c109274:	e24bd00c 	sub	sp, fp, #12
 c109278:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10927c:	e12fff1e 	bx	lr
 c109280:	01d50000 	.word	0x01d50000
 c109284:	01d50004 	.word	0x01d50004
 c109288:	01d50030 	.word	0x01d50030
 c10928c:	00002710 	.word	0x00002710
 c109290:	01d50008 	.word	0x01d50008
 c109294:	01d50038 	.word	0x01d50038

0c109298 <sw_delay_s>:

void sw_delay_s( uint16 n )
{
 c109298:	e1a0c00d 	mov	ip, sp
 c10929c:	e92dd800 	push	{fp, ip, lr, pc}
 c1092a0:	e24cb004 	sub	fp, ip, #4
 c1092a4:	e24dd010 	sub	sp, sp, #16
 c1092a8:	e1a03000 	mov	r3, r0
 c1092ac:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    uint32 i;

    for( i=loop_s*n; i; i-- );
 c1092b0:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1092b4:	e59f2030 	ldr	r2, [pc, #48]	; c1092ec <sw_delay_s+0x54>
 c1092b8:	e5922000 	ldr	r2, [r2]
 c1092bc:	e0030392 	mul	r3, r2, r3
 c1092c0:	e50b3010 	str	r3, [fp, #-16]
 c1092c4:	ea000002 	b	c1092d4 <sw_delay_s+0x3c>
 c1092c8:	e51b3010 	ldr	r3, [fp, #-16]
 c1092cc:	e2433001 	sub	r3, r3, #1
 c1092d0:	e50b3010 	str	r3, [fp, #-16]
 c1092d4:	e51b3010 	ldr	r3, [fp, #-16]
 c1092d8:	e3530000 	cmp	r3, #0
 c1092dc:	1afffff9 	bne	c1092c8 <sw_delay_s+0x30>
}
 c1092e0:	e24bd00c 	sub	sp, fp, #12
 c1092e4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1092e8:	e12fff1e 	bx	lr
 c1092ec:	0c10efa8 	.word	0x0c10efa8

0c1092f0 <timer3_start>:

void timer3_start( void )
{
 c1092f0:	e1a0c00d 	mov	ip, sp
 c1092f4:	e92dd800 	push	{fp, ip, lr, pc}
 c1092f8:	e24cb004 	sub	fp, ip, #4
    TCFG0 = (TCFG0 & ~(0xff << 8)) | (199 << 8);    
 c1092fc:	e59f3084 	ldr	r3, [pc, #132]	; c109388 <timer3_start+0x98>
 c109300:	e59f2080 	ldr	r2, [pc, #128]	; c109388 <timer3_start+0x98>
 c109304:	e5922000 	ldr	r2, [r2]
 c109308:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c10930c:	e3822cc7 	orr	r2, r2, #50944	; 0xc700
 c109310:	e5832000 	str	r2, [r3]
    TCFG1 = (TCFG1 & ~(0xf << 12)) | (4 << 12);
 c109314:	e59f3070 	ldr	r3, [pc, #112]	; c10938c <timer3_start+0x9c>
 c109318:	e59f206c 	ldr	r2, [pc, #108]	; c10938c <timer3_start+0x9c>
 c10931c:	e5922000 	ldr	r2, [r2]
 c109320:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c109324:	e3822901 	orr	r2, r2, #16384	; 0x4000
 c109328:	e5832000 	str	r2, [r3]

    TCNTB3 = 0xffff;
 c10932c:	e59f305c 	ldr	r3, [pc, #92]	; c109390 <timer3_start+0xa0>
 c109330:	e59f205c 	ldr	r2, [pc, #92]	; c109394 <timer3_start+0xa4>
 c109334:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 16)) | (1 << 17);
 c109338:	e59f3058 	ldr	r3, [pc, #88]	; c109398 <timer3_start+0xa8>
 c10933c:	e59f2054 	ldr	r2, [pc, #84]	; c109398 <timer3_start+0xa8>
 c109340:	e5922000 	ldr	r2, [r2]
 c109344:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c109348:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c10934c:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 16)) | (1 << 16);
 c109350:	e59f3040 	ldr	r3, [pc, #64]	; c109398 <timer3_start+0xa8>
 c109354:	e59f203c 	ldr	r2, [pc, #60]	; c109398 <timer3_start+0xa8>
 c109358:	e5922000 	ldr	r2, [r2]
 c10935c:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c109360:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c109364:	e5832000 	str	r2, [r3]
    while( !TCNTO3 );
 c109368:	e1a00000 	nop			; (mov r0, r0)
 c10936c:	e59f3028 	ldr	r3, [pc, #40]	; c10939c <timer3_start+0xac>
 c109370:	e5933000 	ldr	r3, [r3]
 c109374:	e3530000 	cmp	r3, #0
 c109378:	0afffffb 	beq	c10936c <timer3_start+0x7c>
}
 c10937c:	e24bd00c 	sub	sp, fp, #12
 c109380:	e89d6800 	ldm	sp, {fp, sp, lr}
 c109384:	e12fff1e 	bx	lr
 c109388:	01d50000 	.word	0x01d50000
 c10938c:	01d50004 	.word	0x01d50004
 c109390:	01d50030 	.word	0x01d50030
 c109394:	0000ffff 	.word	0x0000ffff
 c109398:	01d50008 	.word	0x01d50008
 c10939c:	01d50038 	.word	0x01d50038

0c1093a0 <timer3_stop>:

uint16 timer3_stop( void )
{
 c1093a0:	e1a0c00d 	mov	ip, sp
 c1093a4:	e92dd800 	push	{fp, ip, lr, pc}
 c1093a8:	e24cb004 	sub	fp, ip, #4
    TCON &= ~(1 << 16);
 c1093ac:	e59f3038 	ldr	r3, [pc, #56]	; c1093ec <timer3_stop+0x4c>
 c1093b0:	e59f2034 	ldr	r2, [pc, #52]	; c1093ec <timer3_stop+0x4c>
 c1093b4:	e5922000 	ldr	r2, [r2]
 c1093b8:	e3c22801 	bic	r2, r2, #65536	; 0x10000
 c1093bc:	e5832000 	str	r2, [r3]
    return 0xffff - TCNTO3;
 c1093c0:	e59f3028 	ldr	r3, [pc, #40]	; c1093f0 <timer3_stop+0x50>
 c1093c4:	e5933000 	ldr	r3, [r3]
 c1093c8:	e1a03803 	lsl	r3, r3, #16
 c1093cc:	e1a03823 	lsr	r3, r3, #16
 c1093d0:	e1e03003 	mvn	r3, r3
 c1093d4:	e1a03803 	lsl	r3, r3, #16
 c1093d8:	e1a03823 	lsr	r3, r3, #16
}
 c1093dc:	e1a00003 	mov	r0, r3
 c1093e0:	e24bd00c 	sub	sp, fp, #12
 c1093e4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1093e8:	e12fff1e 	bx	lr
 c1093ec:	01d50008 	.word	0x01d50008
 c1093f0:	01d50038 	.word	0x01d50038

0c1093f4 <timer3_start_timeout>:

void timer3_start_timeout( uint16 n )
{
 c1093f4:	e1a0c00d 	mov	ip, sp
 c1093f8:	e92dd800 	push	{fp, ip, lr, pc}
 c1093fc:	e24cb004 	sub	fp, ip, #4
 c109400:	e24dd008 	sub	sp, sp, #8
 c109404:	e1a03000 	mov	r3, r0
 c109408:	e14b30be 	strh	r3, [fp, #-14]
    TCFG0 = (TCFG0 & ~(0xff << 8)) | (199 << 8);          
 c10940c:	e59f3084 	ldr	r3, [pc, #132]	; c109498 <timer3_start_timeout+0xa4>
 c109410:	e59f2080 	ldr	r2, [pc, #128]	; c109498 <timer3_start_timeout+0xa4>
 c109414:	e5922000 	ldr	r2, [r2]
 c109418:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c10941c:	e3822cc7 	orr	r2, r2, #50944	; 0xc700
 c109420:	e5832000 	str	r2, [r3]
    TCFG1 = (TCFG1 & ~(0xf << 12)) | (4 << 12);
 c109424:	e59f3070 	ldr	r3, [pc, #112]	; c10949c <timer3_start_timeout+0xa8>
 c109428:	e59f206c 	ldr	r2, [pc, #108]	; c10949c <timer3_start_timeout+0xa8>
 c10942c:	e5922000 	ldr	r2, [r2]
 c109430:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c109434:	e3822901 	orr	r2, r2, #16384	; 0x4000
 c109438:	e5832000 	str	r2, [r3]

    TCNTB3 = n;
 c10943c:	e59f305c 	ldr	r3, [pc, #92]	; c1094a0 <timer3_start_timeout+0xac>
 c109440:	e15b20be 	ldrh	r2, [fp, #-14]
 c109444:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 16)) | (1 << 17);
 c109448:	e59f3054 	ldr	r3, [pc, #84]	; c1094a4 <timer3_start_timeout+0xb0>
 c10944c:	e59f2050 	ldr	r2, [pc, #80]	; c1094a4 <timer3_start_timeout+0xb0>
 c109450:	e5922000 	ldr	r2, [r2]
 c109454:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c109458:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c10945c:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 16)) | (1 << 16);
 c109460:	e59f303c 	ldr	r3, [pc, #60]	; c1094a4 <timer3_start_timeout+0xb0>
 c109464:	e59f2038 	ldr	r2, [pc, #56]	; c1094a4 <timer3_start_timeout+0xb0>
 c109468:	e5922000 	ldr	r2, [r2]
 c10946c:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c109470:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c109474:	e5832000 	str	r2, [r3]
    while( !TCNTO3 );
 c109478:	e1a00000 	nop			; (mov r0, r0)
 c10947c:	e59f3024 	ldr	r3, [pc, #36]	; c1094a8 <timer3_start_timeout+0xb4>
 c109480:	e5933000 	ldr	r3, [r3]
 c109484:	e3530000 	cmp	r3, #0
 c109488:	0afffffb 	beq	c10947c <timer3_start_timeout+0x88>
}
 c10948c:	e24bd00c 	sub	sp, fp, #12
 c109490:	e89d6800 	ldm	sp, {fp, sp, lr}
 c109494:	e12fff1e 	bx	lr
 c109498:	01d50000 	.word	0x01d50000
 c10949c:	01d50004 	.word	0x01d50004
 c1094a0:	01d50030 	.word	0x01d50030
 c1094a4:	01d50008 	.word	0x01d50008
 c1094a8:	01d50038 	.word	0x01d50038

0c1094ac <timer3_timeout>:

uint16 timer3_timeout( )
{
 c1094ac:	e1a0c00d 	mov	ip, sp
 c1094b0:	e92dd800 	push	{fp, ip, lr, pc}
 c1094b4:	e24cb004 	sub	fp, ip, #4
    return !TCNTO3;
 c1094b8:	e59f3024 	ldr	r3, [pc, #36]	; c1094e4 <timer3_timeout+0x38>
 c1094bc:	e5933000 	ldr	r3, [r3]
 c1094c0:	e3530000 	cmp	r3, #0
 c1094c4:	13a03000 	movne	r3, #0
 c1094c8:	03a03001 	moveq	r3, #1
 c1094cc:	e1a03803 	lsl	r3, r3, #16
 c1094d0:	e1a03823 	lsr	r3, r3, #16
}    
 c1094d4:	e1a00003 	mov	r0, r3
 c1094d8:	e24bd00c 	sub	sp, fp, #12
 c1094dc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1094e0:	e12fff1e 	bx	lr
 c1094e4:	01d50038 	.word	0x01d50038

0c1094e8 <timer0_open_tick>:

void timer0_open_tick( void (*isr)(void), uint16 tps )
{
 c1094e8:	e1a0c00d 	mov	ip, sp
 c1094ec:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c1094f0:	e24cb004 	sub	fp, ip, #4
 c1094f4:	e24dd00c 	sub	sp, sp, #12
 c1094f8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c1094fc:	e1a03001 	mov	r3, r1
 c109500:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
	pISR_TIMER0 =(uint32) isr;
 c109504:	e59f31fc 	ldr	r3, [pc, #508]	; c109708 <timer0_open_tick+0x220>
 c109508:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c10950c:	e5832000 	str	r2, [r3]
	I_ISPC      = I_ISPC |(BIT_TIMER0);
 c109510:	e59f31f4 	ldr	r3, [pc, #500]	; c10970c <timer0_open_tick+0x224>
 c109514:	e59f21f0 	ldr	r2, [pc, #496]	; c10970c <timer0_open_tick+0x224>
 c109518:	e5922000 	ldr	r2, [r2]
 c10951c:	e3822a02 	orr	r2, r2, #8192	; 0x2000
 c109520:	e5832000 	str	r2, [r3]
	INTMSK     &= ~((BIT_TIMER0)|(BIT_GLOBAL));
 c109524:	e59f21e4 	ldr	r2, [pc, #484]	; c109710 <timer0_open_tick+0x228>
 c109528:	e59f31e0 	ldr	r3, [pc, #480]	; c109710 <timer0_open_tick+0x228>
 c10952c:	e5933000 	ldr	r3, [r3]
 c109530:	e3c33301 	bic	r3, r3, #67108864	; 0x4000000
 c109534:	e3c33a02 	bic	r3, r3, #8192	; 0x2000
 c109538:	e5823000 	str	r3, [r2]

    if( tps > 0 && tps <= 10 ) {
 c10953c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c109540:	e3530000 	cmp	r3, #0
 c109544:	0a000018 	beq	c1095ac <timer0_open_tick+0xc4>
 c109548:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c10954c:	e353000a 	cmp	r3, #10
 c109550:	8a000015 	bhi	c1095ac <timer0_open_tick+0xc4>
    	TCFG0  = (TCFG0 & ~(0xff)) | (49);
 c109554:	e59f31b8 	ldr	r3, [pc, #440]	; c109714 <timer0_open_tick+0x22c>
 c109558:	e59f21b4 	ldr	r2, [pc, #436]	; c109714 <timer0_open_tick+0x22c>
 c10955c:	e5922000 	ldr	r2, [r2]
 c109560:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c109564:	e3822031 	orr	r2, r2, #49	; 0x31
 c109568:	e5832000 	str	r2, [r3]
    	TCFG1 = (TCFG1 & ~(0xf)) | (4);
 c10956c:	e59f31a4 	ldr	r3, [pc, #420]	; c109718 <timer0_open_tick+0x230>
 c109570:	e59f21a0 	ldr	r2, [pc, #416]	; c109718 <timer0_open_tick+0x230>
 c109574:	e5922000 	ldr	r2, [r2]
 c109578:	e3c2200f 	bic	r2, r2, #15
 c10957c:	e3822004 	orr	r2, r2, #4
 c109580:	e5832000 	str	r2, [r3]
        TCNTB0 = (40000U / tps);
 c109584:	e59f4190 	ldr	r4, [pc, #400]	; c10971c <timer0_open_tick+0x234>
 c109588:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c10958c:	e59f018c 	ldr	r0, [pc, #396]	; c109720 <timer0_open_tick+0x238>
 c109590:	e1a01003 	mov	r1, r3
 c109594:	eb000684 	bl	c10afac <__aeabi_uidiv>
 c109598:	e1a03000 	mov	r3, r0
 c10959c:	e1a03803 	lsl	r3, r3, #16
 c1095a0:	e1a03823 	lsr	r3, r3, #16
 c1095a4:	e5843000 	str	r3, [r4]
 c1095a8:	ea000047 	b	c1096cc <timer0_open_tick+0x1e4>
    } else if( tps > 10 && tps <= 100 ) {
 c1095ac:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c1095b0:	e353000a 	cmp	r3, #10
 c1095b4:	9a000016 	bls	c109614 <timer0_open_tick+0x12c>
 c1095b8:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c1095bc:	e3530064 	cmp	r3, #100	; 0x64
 c1095c0:	8a000013 	bhi	c109614 <timer0_open_tick+0x12c>
    	TCFG0  = (TCFG0 & ~(0xff)) | (9);
 c1095c4:	e59f3148 	ldr	r3, [pc, #328]	; c109714 <timer0_open_tick+0x22c>
 c1095c8:	e59f2144 	ldr	r2, [pc, #324]	; c109714 <timer0_open_tick+0x22c>
 c1095cc:	e5922000 	ldr	r2, [r2]
 c1095d0:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c1095d4:	e3822009 	orr	r2, r2, #9
 c1095d8:	e5832000 	str	r2, [r3]
    	TCFG1  = (TCFG1 & ~(0xf)) | (3);
 c1095dc:	e59f3134 	ldr	r3, [pc, #308]	; c109718 <timer0_open_tick+0x230>
 c1095e0:	e59f2130 	ldr	r2, [pc, #304]	; c109718 <timer0_open_tick+0x230>
 c1095e4:	e5922000 	ldr	r2, [r2]
 c1095e8:	e3c2200f 	bic	r2, r2, #15
 c1095ec:	e3822003 	orr	r2, r2, #3
 c1095f0:	e5832000 	str	r2, [r3]
        TCNTB0 = (400000U / (uint32) tps);
 c1095f4:	e59f4120 	ldr	r4, [pc, #288]	; c10971c <timer0_open_tick+0x234>
 c1095f8:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c1095fc:	e59f0120 	ldr	r0, [pc, #288]	; c109724 <timer0_open_tick+0x23c>
 c109600:	e1a01003 	mov	r1, r3
 c109604:	eb000668 	bl	c10afac <__aeabi_uidiv>
 c109608:	e1a03000 	mov	r3, r0
 c10960c:	e5843000 	str	r3, [r4]
 c109610:	ea00002d 	b	c1096cc <timer0_open_tick+0x1e4>
    } else if( tps > 100 && tps <= 1000 ) {
 c109614:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c109618:	e3530064 	cmp	r3, #100	; 0x64
 c10961c:	9a000016 	bls	c10967c <timer0_open_tick+0x194>
 c109620:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c109624:	e3530ffa 	cmp	r3, #1000	; 0x3e8
 c109628:	8a000013 	bhi	c10967c <timer0_open_tick+0x194>
    	TCFG0  = (TCFG0 & ~(0xff)) | (1);
 c10962c:	e59f30e0 	ldr	r3, [pc, #224]	; c109714 <timer0_open_tick+0x22c>
 c109630:	e59f20dc 	ldr	r2, [pc, #220]	; c109714 <timer0_open_tick+0x22c>
 c109634:	e5922000 	ldr	r2, [r2]
 c109638:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c10963c:	e3822001 	orr	r2, r2, #1
 c109640:	e5832000 	str	r2, [r3]
    	TCFG1  = (TCFG1 & ~(0xf)) | (2);
 c109644:	e59f30cc 	ldr	r3, [pc, #204]	; c109718 <timer0_open_tick+0x230>
 c109648:	e59f20c8 	ldr	r2, [pc, #200]	; c109718 <timer0_open_tick+0x230>
 c10964c:	e5922000 	ldr	r2, [r2]
 c109650:	e3c2200f 	bic	r2, r2, #15
 c109654:	e3822002 	orr	r2, r2, #2
 c109658:	e5832000 	str	r2, [r3]
        TCNTB0 = (4000000U / (uint32) tps);
 c10965c:	e59f40b8 	ldr	r4, [pc, #184]	; c10971c <timer0_open_tick+0x234>
 c109660:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c109664:	e59f00bc 	ldr	r0, [pc, #188]	; c109728 <timer0_open_tick+0x240>
 c109668:	e1a01003 	mov	r1, r3
 c10966c:	eb00064e 	bl	c10afac <__aeabi_uidiv>
 c109670:	e1a03000 	mov	r3, r0
 c109674:	e5843000 	str	r3, [r4]
 c109678:	ea000013 	b	c1096cc <timer0_open_tick+0x1e4>
    } else if ( tps > 1000 ) {
 c10967c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c109680:	e3530ffa 	cmp	r3, #1000	; 0x3e8
 c109684:	9a000010 	bls	c1096cc <timer0_open_tick+0x1e4>
    	TCFG0  = (TCFG0 & ~(0xff));
 c109688:	e59f3084 	ldr	r3, [pc, #132]	; c109714 <timer0_open_tick+0x22c>
 c10968c:	e59f2080 	ldr	r2, [pc, #128]	; c109714 <timer0_open_tick+0x22c>
 c109690:	e5922000 	ldr	r2, [r2]
 c109694:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c109698:	e5832000 	str	r2, [r3]
    	TCFG1  = (TCFG1 & ~(0xf));
 c10969c:	e59f3074 	ldr	r3, [pc, #116]	; c109718 <timer0_open_tick+0x230>
 c1096a0:	e59f2070 	ldr	r2, [pc, #112]	; c109718 <timer0_open_tick+0x230>
 c1096a4:	e5922000 	ldr	r2, [r2]
 c1096a8:	e3c2200f 	bic	r2, r2, #15
 c1096ac:	e5832000 	str	r2, [r3]
        TCNTB0 = (32000000U / (uint32) tps);
 c1096b0:	e59f4064 	ldr	r4, [pc, #100]	; c10971c <timer0_open_tick+0x234>
 c1096b4:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c1096b8:	e59f006c 	ldr	r0, [pc, #108]	; c10972c <timer0_open_tick+0x244>
 c1096bc:	e1a01003 	mov	r1, r3
 c1096c0:	eb000639 	bl	c10afac <__aeabi_uidiv>
 c1096c4:	e1a03000 	mov	r3, r0
 c1096c8:	e5843000 	str	r3, [r4]
    }

    TCON = (TCON & ~(0x3)) | (1<<1)|(1<<3);
 c1096cc:	e59f305c 	ldr	r3, [pc, #92]	; c109730 <timer0_open_tick+0x248>
 c1096d0:	e59f2058 	ldr	r2, [pc, #88]	; c109730 <timer0_open_tick+0x248>
 c1096d4:	e5922000 	ldr	r2, [r2]
 c1096d8:	e3c2200b 	bic	r2, r2, #11
 c1096dc:	e382200a 	orr	r2, r2, #10
 c1096e0:	e5832000 	str	r2, [r3]
	TCON = (TCON & ~(0x3)) | (1<<0)|(1<<3);
 c1096e4:	e59f3044 	ldr	r3, [pc, #68]	; c109730 <timer0_open_tick+0x248>
 c1096e8:	e59f2040 	ldr	r2, [pc, #64]	; c109730 <timer0_open_tick+0x248>
 c1096ec:	e5922000 	ldr	r2, [r2]
 c1096f0:	e3c2200b 	bic	r2, r2, #11
 c1096f4:	e3822009 	orr	r2, r2, #9
 c1096f8:	e5832000 	str	r2, [r3]
}
 c1096fc:	e24bd010 	sub	sp, fp, #16
 c109700:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c109704:	e12fff1e 	bx	lr
 c109708:	0c7fff54 	.word	0x0c7fff54
 c10970c:	01e00024 	.word	0x01e00024
 c109710:	01e0000c 	.word	0x01e0000c
 c109714:	01d50000 	.word	0x01d50000
 c109718:	01d50004 	.word	0x01d50004
 c10971c:	01d5000c 	.word	0x01d5000c
 c109720:	00009c40 	.word	0x00009c40
 c109724:	00061a80 	.word	0x00061a80
 c109728:	003d0900 	.word	0x003d0900
 c10972c:	01e84800 	.word	0x01e84800
 c109730:	01d50008 	.word	0x01d50008

0c109734 <timer0_open_ms>:

void timer0_open_ms( void (*isr)(void), uint16 ms, uint8 mode )
{
 c109734:	e1a0c00d 	mov	ip, sp
 c109738:	e92dd800 	push	{fp, ip, lr, pc}
 c10973c:	e24cb004 	sub	fp, ip, #4
 c109740:	e24dd008 	sub	sp, sp, #8
 c109744:	e50b0010 	str	r0, [fp, #-16]
 c109748:	e1a03002 	mov	r3, r2
 c10974c:	e14b11b2 	strh	r1, [fp, #-18]	; 0xffffffee
 c109750:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
    pISR_TIMER0 = isr;
 c109754:	e59f30d0 	ldr	r3, [pc, #208]	; c10982c <timer0_open_ms+0xf8>
 c109758:	e51b2010 	ldr	r2, [fp, #-16]
 c10975c:	e5832000 	str	r2, [r3]
    I_ISPC      = I_ISPC |(BIT_TIMER0);
 c109760:	e59f30c8 	ldr	r3, [pc, #200]	; c109830 <timer0_open_ms+0xfc>
 c109764:	e59f20c4 	ldr	r2, [pc, #196]	; c109830 <timer0_open_ms+0xfc>
 c109768:	e5922000 	ldr	r2, [r2]
 c10976c:	e3822a02 	orr	r2, r2, #8192	; 0x2000
 c109770:	e5832000 	str	r2, [r3]
    INTMSK     &= ~((BIT_TIMER0)|(BIT_GLOBAL));
 c109774:	e59f20b8 	ldr	r2, [pc, #184]	; c109834 <timer0_open_ms+0x100>
 c109778:	e59f30b4 	ldr	r3, [pc, #180]	; c109834 <timer0_open_ms+0x100>
 c10977c:	e5933000 	ldr	r3, [r3]
 c109780:	e3c33301 	bic	r3, r3, #67108864	; 0x4000000
 c109784:	e3c33a02 	bic	r3, r3, #8192	; 0x2000
 c109788:	e5823000 	str	r3, [r2]

    TCFG0  = (TCFG0 & ~(0xff)) | (199);
 c10978c:	e59f30a4 	ldr	r3, [pc, #164]	; c109838 <timer0_open_ms+0x104>
 c109790:	e59f20a0 	ldr	r2, [pc, #160]	; c109838 <timer0_open_ms+0x104>
 c109794:	e5922000 	ldr	r2, [r2]
 c109798:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c10979c:	e38220c7 	orr	r2, r2, #199	; 0xc7
 c1097a0:	e5832000 	str	r2, [r3]
TCFG1  = (TCFG1 & ~(0xf)) | (4);
 c1097a4:	e59f3090 	ldr	r3, [pc, #144]	; c10983c <timer0_open_ms+0x108>
 c1097a8:	e59f208c 	ldr	r2, [pc, #140]	; c10983c <timer0_open_ms+0x108>
 c1097ac:	e5922000 	ldr	r2, [r2]
 c1097b0:	e3c2200f 	bic	r2, r2, #15
 c1097b4:	e3822004 	orr	r2, r2, #4
 c1097b8:	e5832000 	str	r2, [r3]
    TCNTB0 = 10*ms;
 c1097bc:	e59f107c 	ldr	r1, [pc, #124]	; c109840 <timer0_open_ms+0x10c>
 c1097c0:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c1097c4:	e1a03002 	mov	r3, r2
 c1097c8:	e1a03103 	lsl	r3, r3, #2
 c1097cc:	e0833002 	add	r3, r3, r2
 c1097d0:	e1a03083 	lsl	r3, r3, #1
 c1097d4:	e5813000 	str	r3, [r1]

    TCON = (TCON & ~(0xf)) | (1<<1)| mode<<3;
 c1097d8:	e59f3064 	ldr	r3, [pc, #100]	; c109844 <timer0_open_ms+0x110>
 c1097dc:	e59f2060 	ldr	r2, [pc, #96]	; c109844 <timer0_open_ms+0x110>
 c1097e0:	e5922000 	ldr	r2, [r2]
 c1097e4:	e3c2100f 	bic	r1, r2, #15
 c1097e8:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
 c1097ec:	e1a02182 	lsl	r2, r2, #3
 c1097f0:	e1812002 	orr	r2, r1, r2
 c1097f4:	e3822002 	orr	r2, r2, #2
 c1097f8:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf)) | (1<<0)| mode<<3;
 c1097fc:	e59f3040 	ldr	r3, [pc, #64]	; c109844 <timer0_open_ms+0x110>
 c109800:	e59f203c 	ldr	r2, [pc, #60]	; c109844 <timer0_open_ms+0x110>
 c109804:	e5922000 	ldr	r2, [r2]
 c109808:	e3c2100f 	bic	r1, r2, #15
 c10980c:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
 c109810:	e1a02182 	lsl	r2, r2, #3
 c109814:	e1812002 	orr	r2, r1, r2
 c109818:	e3822001 	orr	r2, r2, #1
 c10981c:	e5832000 	str	r2, [r3]
}
 c109820:	e24bd00c 	sub	sp, fp, #12
 c109824:	e89d6800 	ldm	sp, {fp, sp, lr}
 c109828:	e12fff1e 	bx	lr
 c10982c:	0c7fff54 	.word	0x0c7fff54
 c109830:	01e00024 	.word	0x01e00024
 c109834:	01e0000c 	.word	0x01e0000c
 c109838:	01d50000 	.word	0x01d50000
 c10983c:	01d50004 	.word	0x01d50004
 c109840:	01d5000c 	.word	0x01d5000c
 c109844:	01d50008 	.word	0x01d50008

0c109848 <timer0_close>:

void timer0_close( void )
{
 c109848:	e1a0c00d 	mov	ip, sp
 c10984c:	e92dd800 	push	{fp, ip, lr, pc}
 c109850:	e24cb004 	sub	fp, ip, #4
    TCNTB0 = 0x0;
 c109854:	e59f306c 	ldr	r3, [pc, #108]	; c1098c8 <timer0_close+0x80>
 c109858:	e3a02000 	mov	r2, #0
 c10985c:	e5832000 	str	r2, [r3]
    TCMPB0 = 0x0;
 c109860:	e59f3064 	ldr	r3, [pc, #100]	; c1098cc <timer0_close+0x84>
 c109864:	e3a02000 	mov	r2, #0
 c109868:	e5832000 	str	r2, [r3]

    TCON = (TCON & ~(0x11)) | (1<<1);
 c10986c:	e59f305c 	ldr	r3, [pc, #92]	; c1098d0 <timer0_close+0x88>
 c109870:	e59f2058 	ldr	r2, [pc, #88]	; c1098d0 <timer0_close+0x88>
 c109874:	e5922000 	ldr	r2, [r2]
 c109878:	e3c22013 	bic	r2, r2, #19
 c10987c:	e3822002 	orr	r2, r2, #2
 c109880:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0x11)) | (1<<0);
 c109884:	e59f3044 	ldr	r3, [pc, #68]	; c1098d0 <timer0_close+0x88>
 c109888:	e59f2040 	ldr	r2, [pc, #64]	; c1098d0 <timer0_close+0x88>
 c10988c:	e5922000 	ldr	r2, [r2]
 c109890:	e3c22011 	bic	r2, r2, #17
 c109894:	e3822001 	orr	r2, r2, #1
 c109898:	e5832000 	str	r2, [r3]

    INTMSK     |= BIT_TIMER0;
 c10989c:	e59f3030 	ldr	r3, [pc, #48]	; c1098d4 <timer0_close+0x8c>
 c1098a0:	e59f202c 	ldr	r2, [pc, #44]	; c1098d4 <timer0_close+0x8c>
 c1098a4:	e5922000 	ldr	r2, [r2]
 c1098a8:	e3822a02 	orr	r2, r2, #8192	; 0x2000
 c1098ac:	e5832000 	str	r2, [r3]
    pISR_TIMER0 = isr_TIMER0_dummy;
 c1098b0:	e59f3020 	ldr	r3, [pc, #32]	; c1098d8 <timer0_close+0x90>
 c1098b4:	e59f2020 	ldr	r2, [pc, #32]	; c1098dc <timer0_close+0x94>
 c1098b8:	e5832000 	str	r2, [r3]
}
 c1098bc:	e24bd00c 	sub	sp, fp, #12
 c1098c0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1098c4:	e12fff1e 	bx	lr
 c1098c8:	01d5000c 	.word	0x01d5000c
 c1098cc:	01d50010 	.word	0x01d50010
 c1098d0:	01d50008 	.word	0x01d50008
 c1098d4:	01e0000c 	.word	0x01e0000c
 c1098d8:	0c7fff54 	.word	0x0c7fff54
 c1098dc:	0c10883c 	.word	0x0c10883c

0c1098e0 <timer4_start>:
void timer4_start( void )
{
 c1098e0:	e1a0c00d 	mov	ip, sp
 c1098e4:	e92dd800 	push	{fp, ip, lr, pc}
 c1098e8:	e24cb004 	sub	fp, ip, #4
    TCFG0 = (TCFG0 & ~(0xff << 16)) | (199 << 16);
 c1098ec:	e59f3084 	ldr	r3, [pc, #132]	; c109978 <timer4_start+0x98>
 c1098f0:	e59f2080 	ldr	r2, [pc, #128]	; c109978 <timer4_start+0x98>
 c1098f4:	e5922000 	ldr	r2, [r2]
 c1098f8:	e3c228ff 	bic	r2, r2, #16711680	; 0xff0000
 c1098fc:	e38228c7 	orr	r2, r2, #13041664	; 0xc70000
 c109900:	e5832000 	str	r2, [r3]
    TCFG1 = (TCFG1 & ~(0xf << 16)) | (4 << 16);
 c109904:	e59f3070 	ldr	r3, [pc, #112]	; c10997c <timer4_start+0x9c>
 c109908:	e59f206c 	ldr	r2, [pc, #108]	; c10997c <timer4_start+0x9c>
 c10990c:	e5922000 	ldr	r2, [r2]
 c109910:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c109914:	e3822701 	orr	r2, r2, #262144	; 0x40000
 c109918:	e5832000 	str	r2, [r3]

    TCNTB4 = 0xffff;
 c10991c:	e59f305c 	ldr	r3, [pc, #92]	; c109980 <timer4_start+0xa0>
 c109920:	e59f205c 	ldr	r2, [pc, #92]	; c109984 <timer4_start+0xa4>
 c109924:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 20)) | (1 << 21);
 c109928:	e59f3058 	ldr	r3, [pc, #88]	; c109988 <timer4_start+0xa8>
 c10992c:	e59f2054 	ldr	r2, [pc, #84]	; c109988 <timer4_start+0xa8>
 c109930:	e5922000 	ldr	r2, [r2]
 c109934:	e3c2260f 	bic	r2, r2, #15728640	; 0xf00000
 c109938:	e3822602 	orr	r2, r2, #2097152	; 0x200000
 c10993c:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 20)) | (1 << 20);
 c109940:	e59f3040 	ldr	r3, [pc, #64]	; c109988 <timer4_start+0xa8>
 c109944:	e59f203c 	ldr	r2, [pc, #60]	; c109988 <timer4_start+0xa8>
 c109948:	e5922000 	ldr	r2, [r2]
 c10994c:	e3c2260f 	bic	r2, r2, #15728640	; 0xf00000
 c109950:	e3822601 	orr	r2, r2, #1048576	; 0x100000
 c109954:	e5832000 	str	r2, [r3]
    while( !TCNTO4 );
 c109958:	e1a00000 	nop			; (mov r0, r0)
 c10995c:	e59f3028 	ldr	r3, [pc, #40]	; c10998c <timer4_start+0xac>
 c109960:	e5933000 	ldr	r3, [r3]
 c109964:	e3530000 	cmp	r3, #0
 c109968:	0afffffb 	beq	c10995c <timer4_start+0x7c>
}
 c10996c:	e24bd00c 	sub	sp, fp, #12
 c109970:	e89d6800 	ldm	sp, {fp, sp, lr}
 c109974:	e12fff1e 	bx	lr
 c109978:	01d50000 	.word	0x01d50000
 c10997c:	01d50004 	.word	0x01d50004
 c109980:	01d5003c 	.word	0x01d5003c
 c109984:	0000ffff 	.word	0x0000ffff
 c109988:	01d50008 	.word	0x01d50008
 c10998c:	01d50044 	.word	0x01d50044

0c109990 <timer4_stop>:

uint16 timer4_stop( void )
{
 c109990:	e1a0c00d 	mov	ip, sp
 c109994:	e92dd800 	push	{fp, ip, lr, pc}
 c109998:	e24cb004 	sub	fp, ip, #4
    TCON &= ~(1 << 20);
 c10999c:	e59f3038 	ldr	r3, [pc, #56]	; c1099dc <timer4_stop+0x4c>
 c1099a0:	e59f2034 	ldr	r2, [pc, #52]	; c1099dc <timer4_stop+0x4c>
 c1099a4:	e5922000 	ldr	r2, [r2]
 c1099a8:	e3c22601 	bic	r2, r2, #1048576	; 0x100000
 c1099ac:	e5832000 	str	r2, [r3]
    return 0xffff - TCNTO4;
 c1099b0:	e59f3028 	ldr	r3, [pc, #40]	; c1099e0 <timer4_stop+0x50>
 c1099b4:	e5933000 	ldr	r3, [r3]
 c1099b8:	e1a03803 	lsl	r3, r3, #16
 c1099bc:	e1a03823 	lsr	r3, r3, #16
 c1099c0:	e1e03003 	mvn	r3, r3
 c1099c4:	e1a03803 	lsl	r3, r3, #16
 c1099c8:	e1a03823 	lsr	r3, r3, #16
}
 c1099cc:	e1a00003 	mov	r0, r3
 c1099d0:	e24bd00c 	sub	sp, fp, #12
 c1099d4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1099d8:	e12fff1e 	bx	lr
 c1099dc:	01d50008 	.word	0x01d50008
 c1099e0:	01d50044 	.word	0x01d50044

0c1099e4 <timer4_start_timeout>:

void timer4_start_timeout( uint16 n )
{
 c1099e4:	e1a0c00d 	mov	ip, sp
 c1099e8:	e92dd800 	push	{fp, ip, lr, pc}
 c1099ec:	e24cb004 	sub	fp, ip, #4
 c1099f0:	e24dd008 	sub	sp, sp, #8
 c1099f4:	e1a03000 	mov	r3, r0
 c1099f8:	e14b30be 	strh	r3, [fp, #-14]
    TCFG0 = (TCFG0 & ~(0xff << 16)) | (199 << 16);
 c1099fc:	e59f3084 	ldr	r3, [pc, #132]	; c109a88 <timer4_start_timeout+0xa4>
 c109a00:	e59f2080 	ldr	r2, [pc, #128]	; c109a88 <timer4_start_timeout+0xa4>
 c109a04:	e5922000 	ldr	r2, [r2]
 c109a08:	e3c228ff 	bic	r2, r2, #16711680	; 0xff0000
 c109a0c:	e38228c7 	orr	r2, r2, #13041664	; 0xc70000
 c109a10:	e5832000 	str	r2, [r3]
    TCFG1 = (TCFG1 & ~(0xf << 16)) | (4 << 16);
 c109a14:	e59f3070 	ldr	r3, [pc, #112]	; c109a8c <timer4_start_timeout+0xa8>
 c109a18:	e59f206c 	ldr	r2, [pc, #108]	; c109a8c <timer4_start_timeout+0xa8>
 c109a1c:	e5922000 	ldr	r2, [r2]
 c109a20:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c109a24:	e3822701 	orr	r2, r2, #262144	; 0x40000
 c109a28:	e5832000 	str	r2, [r3]

    TCNTB4 = n;
 c109a2c:	e59f305c 	ldr	r3, [pc, #92]	; c109a90 <timer4_start_timeout+0xac>
 c109a30:	e15b20be 	ldrh	r2, [fp, #-14]
 c109a34:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 20)) | (1 << 21);
 c109a38:	e59f3054 	ldr	r3, [pc, #84]	; c109a94 <timer4_start_timeout+0xb0>
 c109a3c:	e59f2050 	ldr	r2, [pc, #80]	; c109a94 <timer4_start_timeout+0xb0>
 c109a40:	e5922000 	ldr	r2, [r2]
 c109a44:	e3c2260f 	bic	r2, r2, #15728640	; 0xf00000
 c109a48:	e3822602 	orr	r2, r2, #2097152	; 0x200000
 c109a4c:	e5832000 	str	r2, [r3]
    TCON = (TCON & ~(0xf << 20)) | (1 << 20);
 c109a50:	e59f303c 	ldr	r3, [pc, #60]	; c109a94 <timer4_start_timeout+0xb0>
 c109a54:	e59f2038 	ldr	r2, [pc, #56]	; c109a94 <timer4_start_timeout+0xb0>
 c109a58:	e5922000 	ldr	r2, [r2]
 c109a5c:	e3c2260f 	bic	r2, r2, #15728640	; 0xf00000
 c109a60:	e3822601 	orr	r2, r2, #1048576	; 0x100000
 c109a64:	e5832000 	str	r2, [r3]
    while( !TCNTO4 );
 c109a68:	e1a00000 	nop			; (mov r0, r0)
 c109a6c:	e59f3024 	ldr	r3, [pc, #36]	; c109a98 <timer4_start_timeout+0xb4>
 c109a70:	e5933000 	ldr	r3, [r3]
 c109a74:	e3530000 	cmp	r3, #0
 c109a78:	0afffffb 	beq	c109a6c <timer4_start_timeout+0x88>
}
 c109a7c:	e24bd00c 	sub	sp, fp, #12
 c109a80:	e89d6800 	ldm	sp, {fp, sp, lr}
 c109a84:	e12fff1e 	bx	lr
 c109a88:	01d50000 	.word	0x01d50000
 c109a8c:	01d50004 	.word	0x01d50004
 c109a90:	01d5003c 	.word	0x01d5003c
 c109a94:	01d50008 	.word	0x01d50008
 c109a98:	01d50044 	.word	0x01d50044

0c109a9c <timer4_timeout>:

uint16 timer4_timeout( )
{
 c109a9c:	e1a0c00d 	mov	ip, sp
 c109aa0:	e92dd800 	push	{fp, ip, lr, pc}
 c109aa4:	e24cb004 	sub	fp, ip, #4
    return !TCNTO4;
 c109aa8:	e59f3024 	ldr	r3, [pc, #36]	; c109ad4 <timer4_timeout+0x38>
 c109aac:	e5933000 	ldr	r3, [r3]
 c109ab0:	e3530000 	cmp	r3, #0
 c109ab4:	13a03000 	movne	r3, #0
 c109ab8:	03a03001 	moveq	r3, #1
 c109abc:	e1a03803 	lsl	r3, r3, #16
 c109ac0:	e1a03823 	lsr	r3, r3, #16
}
 c109ac4:	e1a00003 	mov	r0, r3
 c109ac8:	e24bd00c 	sub	sp, fp, #12
 c109acc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c109ad0:	e12fff1e 	bx	lr
 c109ad4:	01d50044 	.word	0x01d50044

0c109ad8 <ts_init>:
static void ts_scan( uint16 *Vx, uint16 *Vy );
static void ts_calibrate( void );
static void ts_sample2coord( uint16 Vx, uint16 Vy, uint16 *x, uint16 *y );

void ts_init( void )
{
 c109ad8:	e1a0c00d 	mov	ip, sp
 c109adc:	e92dd800 	push	{fp, ip, lr, pc}
 c109ae0:	e24cb004 	sub	fp, ip, #4
    timers_init();
 c109ae4:	ebfffcc3 	bl	c108df8 <timers_init>
    lcd_init();
 c109ae8:	ebfff022 	bl	c105b78 <lcd_init>
    adc_init();
 c109aec:	eb0003ec 	bl	c10aaa4 <adc_init>
    PDATE = (1 << 4) | (1 << 5) | (0 << 6) | (1 << 7);
 c109af0:	e59f3024 	ldr	r3, [pc, #36]	; c109b1c <ts_init+0x44>
 c109af4:	e3a020b0 	mov	r2, #176	; 0xb0
 c109af8:	e5832000 	str	r2, [r3]
    sw_delay_ms( 1 );
 c109afc:	e3a00001 	mov	r0, #1
 c109b00:	ebfffd93 	bl	c109154 <sw_delay_ms>
    ts_on();
 c109b04:	eb000005 	bl	c109b20 <ts_on>
    ts_calibrate();
 c109b08:	eb000033 	bl	c109bdc <ts_calibrate>
    ts_off();
 c109b0c:	eb00000e 	bl	c109b4c <ts_off>
}
 c109b10:	e24bd00c 	sub	sp, fp, #12
 c109b14:	e89d6800 	ldm	sp, {fp, sp, lr}
 c109b18:	e12fff1e 	bx	lr
 c109b1c:	01d2002c 	.word	0x01d2002c

0c109b20 <ts_on>:

void ts_on( void )
{
 c109b20:	e1a0c00d 	mov	ip, sp
 c109b24:	e92dd800 	push	{fp, ip, lr, pc}
 c109b28:	e24cb004 	sub	fp, ip, #4
    adc_on();
 c109b2c:	eb0003e7 	bl	c10aad0 <adc_on>
    state = ON;
 c109b30:	e59f3010 	ldr	r3, [pc, #16]	; c109b48 <ts_on+0x28>
 c109b34:	e3a02001 	mov	r2, #1
 c109b38:	e5c32000 	strb	r2, [r3]
}
 c109b3c:	e24bd00c 	sub	sp, fp, #12
 c109b40:	e89d6800 	ldm	sp, {fp, sp, lr}
 c109b44:	e12fff1e 	bx	lr
 c109b48:	0c10efb4 	.word	0x0c10efb4

0c109b4c <ts_off>:

void ts_off( void )
{
 c109b4c:	e1a0c00d 	mov	ip, sp
 c109b50:	e92dd800 	push	{fp, ip, lr, pc}
 c109b54:	e24cb004 	sub	fp, ip, #4
    adc_off();
 c109b58:	eb0003ed 	bl	c10ab14 <adc_off>
    state = OFF;
 c109b5c:	e59f3010 	ldr	r3, [pc, #16]	; c109b74 <ts_off+0x28>
 c109b60:	e3a02000 	mov	r2, #0
 c109b64:	e5c32000 	strb	r2, [r3]
}
 c109b68:	e24bd00c 	sub	sp, fp, #12
 c109b6c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c109b70:	e12fff1e 	bx	lr
 c109b74:	0c10efb4 	.word	0x0c10efb4

0c109b78 <ts_status>:

uint8 ts_status( void )
{
 c109b78:	e1a0c00d 	mov	ip, sp
 c109b7c:	e92dd800 	push	{fp, ip, lr, pc}
 c109b80:	e24cb004 	sub	fp, ip, #4
    return state;
 c109b84:	e59f3010 	ldr	r3, [pc, #16]	; c109b9c <ts_status+0x24>
 c109b88:	e5d33000 	ldrb	r3, [r3]
}
 c109b8c:	e1a00003 	mov	r0, r3
 c109b90:	e24bd00c 	sub	sp, fp, #12
 c109b94:	e89d6800 	ldm	sp, {fp, sp, lr}
 c109b98:	e12fff1e 	bx	lr
 c109b9c:	0c10efb4 	.word	0x0c10efb4

0c109ba0 <ts_pressed>:

uint8 ts_pressed( void )
{
 c109ba0:	e1a0c00d 	mov	ip, sp
 c109ba4:	e92dd800 	push	{fp, ip, lr, pc}
 c109ba8:	e24cb004 	sub	fp, ip, #4
    return (PDATG & (1 << 2)) ? 0 : 1;
 c109bac:	e59f3024 	ldr	r3, [pc, #36]	; c109bd8 <ts_pressed+0x38>
 c109bb0:	e5933000 	ldr	r3, [r3]
 c109bb4:	e2033004 	and	r3, r3, #4
 c109bb8:	e3530000 	cmp	r3, #0
 c109bbc:	13a03000 	movne	r3, #0
 c109bc0:	03a03001 	moveq	r3, #1
 c109bc4:	e20330ff 	and	r3, r3, #255	; 0xff
}
 c109bc8:	e1a00003 	mov	r0, r3
 c109bcc:	e24bd00c 	sub	sp, fp, #12
 c109bd0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c109bd4:	e12fff1e 	bx	lr
 c109bd8:	01d20044 	.word	0x01d20044

0c109bdc <ts_calibrate>:

static void ts_calibrate( void )
{
 c109bdc:	e1a0c00d 	mov	ip, sp
 c109be0:	e92dd800 	push	{fp, ip, lr, pc}
 c109be4:	e24cb004 	sub	fp, ip, #4
 c109be8:	e24dd010 	sub	sp, sp, #16
    uint16 x, y;
    
    lcd_on();
 c109bec:	ebfff042 	bl	c105cfc <lcd_on>
    do {    
        // BORRAR PANTALLA
        lcd_clear();
 c109bf0:	ebfff063 	bl	c105d84 <lcd_clear>
        //  CALIBRACION
        lcd_puts(100, 112, BLACK, "Calibrar pantalla");
 c109bf4:	e3a00064 	mov	r0, #100	; 0x64
 c109bf8:	e3a01070 	mov	r1, #112	; 0x70
 c109bfc:	e3a0200f 	mov	r2, #15
 c109c00:	e59f3198 	ldr	r3, [pc, #408]	; c109da0 <ts_calibrate+0x1c4>
 c109c04:	ebfff1e4 	bl	c10639c <lcd_puts>
        sw_delay_s(2);
 c109c08:	e3a00002 	mov	r0, #2
 c109c0c:	ebfffda1 	bl	c109298 <sw_delay_s>
        //pinta cuadrado en la esquina superior izq
        lcd_clear();
 c109c10:	ebfff05b 	bl	c105d84 <lcd_clear>
        lcd_puts(64, 128, BLACK, "Presione en la esquina superior izq");
 c109c14:	e3a00040 	mov	r0, #64	; 0x40
 c109c18:	e3a01080 	mov	r1, #128	; 0x80
 c109c1c:	e3a0200f 	mov	r2, #15
 c109c20:	e59f317c 	ldr	r3, [pc, #380]	; c109da4 <ts_calibrate+0x1c8>
 c109c24:	ebfff1dc 	bl	c10639c <lcd_puts>
        lcd_draw_box(0, 0, 5, 5, BLACK, 1);
 c109c28:	e3a0300f 	mov	r3, #15
 c109c2c:	e58d3000 	str	r3, [sp]
 c109c30:	e3a03001 	mov	r3, #1
 c109c34:	e58d3004 	str	r3, [sp, #4]
 c109c38:	e3a00000 	mov	r0, #0
 c109c3c:	e3a01000 	mov	r1, #0
 c109c40:	e3a02005 	mov	r2, #5
 c109c44:	e3a03005 	mov	r3, #5
 c109c48:	ebfff14f 	bl	c10618c <lcd_draw_box>
    
        while(!ts_pressed()); // esperamos a que se toque la pantalla
 c109c4c:	e1a00000 	nop			; (mov r0, r0)
 c109c50:	ebffffd2 	bl	c109ba0 <ts_pressed>
 c109c54:	e1a03000 	mov	r3, r0
 c109c58:	e3530000 	cmp	r3, #0
 c109c5c:	0afffffb 	beq	c109c50 <ts_calibrate+0x74>
        sw_delay_ms( TS_DOWN_DELAY );
 c109c60:	e3a0001e 	mov	r0, #30
 c109c64:	ebfffd3a 	bl	c109154 <sw_delay_ms>
        ts_scan( &Vxmin, &Vymax );
 c109c68:	e59f0138 	ldr	r0, [pc, #312]	; c109da8 <ts_calibrate+0x1cc>
 c109c6c:	e59f1138 	ldr	r1, [pc, #312]	; c109dac <ts_calibrate+0x1d0>
 c109c70:	eb0000d5 	bl	c109fcc <ts_scan>
        while( ts_pressed() ); // esperamos a que se deje de tocar
 c109c74:	e1a00000 	nop			; (mov r0, r0)
 c109c78:	ebffffc8 	bl	c109ba0 <ts_pressed>
 c109c7c:	e1a03000 	mov	r3, r0
 c109c80:	e3530000 	cmp	r3, #0
 c109c84:	1afffffb 	bne	c109c78 <ts_calibrate+0x9c>
        sw_delay_ms( TS_UP_DELAY );
 c109c88:	e3a00064 	mov	r0, #100	; 0x64
 c109c8c:	ebfffd30 	bl	c109154 <sw_delay_ms>

        //pinta cuadrado en la esquina inferior derecha
        lcd_clear();
 c109c90:	ebfff03b 	bl	c105d84 <lcd_clear>
        lcd_puts(64, 128, BLACK, "Presione en la esquina inferior dch");
 c109c94:	e3a00040 	mov	r0, #64	; 0x40
 c109c98:	e3a01080 	mov	r1, #128	; 0x80
 c109c9c:	e3a0200f 	mov	r2, #15
 c109ca0:	e59f3108 	ldr	r3, [pc, #264]	; c109db0 <ts_calibrate+0x1d4>
 c109ca4:	ebfff1bc 	bl	c10639c <lcd_puts>
        lcd_draw_box(319-5, 239-5, 319, 239, BLACK, 1);
 c109ca8:	e3a0300f 	mov	r3, #15
 c109cac:	e58d3000 	str	r3, [sp]
 c109cb0:	e3a03001 	mov	r3, #1
 c109cb4:	e58d3004 	str	r3, [sp, #4]
 c109cb8:	e59f00f4 	ldr	r0, [pc, #244]	; c109db4 <ts_calibrate+0x1d8>
 c109cbc:	e3a010ea 	mov	r1, #234	; 0xea
 c109cc0:	e59f20f0 	ldr	r2, [pc, #240]	; c109db8 <ts_calibrate+0x1dc>
 c109cc4:	e3a030ef 	mov	r3, #239	; 0xef
 c109cc8:	ebfff12f 	bl	c10618c <lcd_draw_box>
           
        while(!ts_pressed()); // esperamos a que se toque la pantalla
 c109ccc:	e1a00000 	nop			; (mov r0, r0)
 c109cd0:	ebffffb2 	bl	c109ba0 <ts_pressed>
 c109cd4:	e1a03000 	mov	r3, r0
 c109cd8:	e3530000 	cmp	r3, #0
 c109cdc:	0afffffb 	beq	c109cd0 <ts_calibrate+0xf4>
        sw_delay_ms( TS_DOWN_DELAY );
 c109ce0:	e3a0001e 	mov	r0, #30
 c109ce4:	ebfffd1a 	bl	c109154 <sw_delay_ms>
        ts_scan( &Vxmax, &Vymin );
 c109ce8:	e59f00cc 	ldr	r0, [pc, #204]	; c109dbc <ts_calibrate+0x1e0>
 c109cec:	e59f10cc 	ldr	r1, [pc, #204]	; c109dc0 <ts_calibrate+0x1e4>
 c109cf0:	eb0000b5 	bl	c109fcc <ts_scan>
        while( ts_pressed() ); // esperamos a ue se deje de tocar
 c109cf4:	e1a00000 	nop			; (mov r0, r0)
 c109cf8:	ebffffa8 	bl	c109ba0 <ts_pressed>
 c109cfc:	e1a03000 	mov	r3, r0
 c109d00:	e3530000 	cmp	r3, #0
 c109d04:	1afffffb 	bne	c109cf8 <ts_calibrate+0x11c>
        sw_delay_ms( TS_UP_DELAY );
 c109d08:	e3a00064 	mov	r0, #100	; 0x64
 c109d0c:	ebfffd10 	bl	c109154 <sw_delay_ms>
    
        //pinta el cuadrado en el centro de la pantalla
        lcd_clear();
 c109d10:	ebfff01b 	bl	c105d84 <lcd_clear>
        lcd_puts(80, 128, BLACK, "Presione en el cuadrado del centro");
 c109d14:	e3a00050 	mov	r0, #80	; 0x50
 c109d18:	e3a01080 	mov	r1, #128	; 0x80
 c109d1c:	e3a0200f 	mov	r2, #15
 c109d20:	e59f309c 	ldr	r3, [pc, #156]	; c109dc4 <ts_calibrate+0x1e8>
 c109d24:	ebfff19c 	bl	c10639c <lcd_puts>
        lcd_draw_box(158, 118, 163, 123, BLACK, 1);
 c109d28:	e3a0300f 	mov	r3, #15
 c109d2c:	e58d3000 	str	r3, [sp]
 c109d30:	e3a03001 	mov	r3, #1
 c109d34:	e58d3004 	str	r3, [sp, #4]
 c109d38:	e3a0009e 	mov	r0, #158	; 0x9e
 c109d3c:	e3a01076 	mov	r1, #118	; 0x76
 c109d40:	e3a020a3 	mov	r2, #163	; 0xa3
 c109d44:	e3a0307b 	mov	r3, #123	; 0x7b
 c109d48:	ebfff10f 	bl	c10618c <lcd_draw_box>

        ts_getpos( &x, &y );
 c109d4c:	e24b200e 	sub	r2, fp, #14
 c109d50:	e24b3010 	sub	r3, fp, #16
 c109d54:	e1a00002 	mov	r0, r2
 c109d58:	e1a01003 	mov	r1, r3
 c109d5c:	eb000019 	bl	c109dc8 <ts_getpos>

    } while( (x > LCD_WIDTH/2+PX_ERROR) || (x < LCD_WIDTH/2-PX_ERROR) || (y > LCD_HEIGHT/2+PX_ERROR) || (y < LCD_HEIGHT/2-PX_ERROR)  );
 c109d60:	e15b30be 	ldrh	r3, [fp, #-14]
 c109d64:	e35300aa 	cmp	r3, #170	; 0xaa
 c109d68:	8affffa0 	bhi	c109bf0 <ts_calibrate+0x14>
 c109d6c:	e15b30be 	ldrh	r3, [fp, #-14]
 c109d70:	e3530095 	cmp	r3, #149	; 0x95
 c109d74:	9affff9d 	bls	c109bf0 <ts_calibrate+0x14>
 c109d78:	e15b31b0 	ldrh	r3, [fp, #-16]
 c109d7c:	e3530082 	cmp	r3, #130	; 0x82
 c109d80:	8affff9a 	bhi	c109bf0 <ts_calibrate+0x14>
 c109d84:	e15b31b0 	ldrh	r3, [fp, #-16]
 c109d88:	e353006d 	cmp	r3, #109	; 0x6d
 c109d8c:	9affff97 	bls	c109bf0 <ts_calibrate+0x14>
    lcd_clear();
 c109d90:	ebffeffb 	bl	c105d84 <lcd_clear>
}
 c109d94:	e24bd00c 	sub	sp, fp, #12
 c109d98:	e89d6800 	ldm	sp, {fp, sp, lr}
 c109d9c:	e12fff1e 	bx	lr
 c109da0:	0c10d538 	.word	0x0c10d538
 c109da4:	0c10d54c 	.word	0x0c10d54c
 c109da8:	0c10efac 	.word	0x0c10efac
 c109dac:	0c10efb2 	.word	0x0c10efb2
 c109db0:	0c10d570 	.word	0x0c10d570
 c109db4:	0000013a 	.word	0x0000013a
 c109db8:	0000013f 	.word	0x0000013f
 c109dbc:	0c10efae 	.word	0x0c10efae
 c109dc0:	0c10efb0 	.word	0x0c10efb0
 c109dc4:	0c10d594 	.word	0x0c10d594

0c109dc8 <ts_getpos>:

void ts_getpos( uint16 *x, uint16 *y )
{
 c109dc8:	e1a0c00d 	mov	ip, sp
 c109dcc:	e92dd800 	push	{fp, ip, lr, pc}
 c109dd0:	e24cb004 	sub	fp, ip, #4
 c109dd4:	e24dd010 	sub	sp, sp, #16
 c109dd8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c109ddc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    uint16 Vx, Vy;
    while ( !ts_pressed() );
 c109de0:	e1a00000 	nop			; (mov r0, r0)
 c109de4:	ebffff6d 	bl	c109ba0 <ts_pressed>
 c109de8:	e1a03000 	mov	r3, r0
 c109dec:	e3530000 	cmp	r3, #0
 c109df0:	0afffffb 	beq	c109de4 <ts_getpos+0x1c>
    sw_delay_ms( TS_DOWN_DELAY );
 c109df4:	e3a0001e 	mov	r0, #30
 c109df8:	ebfffcd5 	bl	c109154 <sw_delay_ms>
    ts_scan( &Vx, &Vy );
 c109dfc:	e24b200e 	sub	r2, fp, #14
 c109e00:	e24b3010 	sub	r3, fp, #16
 c109e04:	e1a00002 	mov	r0, r2
 c109e08:	e1a01003 	mov	r1, r3
 c109e0c:	eb00006e 	bl	c109fcc <ts_scan>
    while ( ts_pressed() );
 c109e10:	e1a00000 	nop			; (mov r0, r0)
 c109e14:	ebffff61 	bl	c109ba0 <ts_pressed>
 c109e18:	e1a03000 	mov	r3, r0
 c109e1c:	e3530000 	cmp	r3, #0
 c109e20:	1afffffb 	bne	c109e14 <ts_getpos+0x4c>
    sw_delay_ms( TS_UP_DELAY );
 c109e24:	e3a00064 	mov	r0, #100	; 0x64
 c109e28:	ebfffcc9 	bl	c109154 <sw_delay_ms>
    ts_sample2coord( Vx, Vy, x, y );
 c109e2c:	e15b20be 	ldrh	r2, [fp, #-14]
 c109e30:	e15b31b0 	ldrh	r3, [fp, #-16]
 c109e34:	e1a00002 	mov	r0, r2
 c109e38:	e1a01003 	mov	r1, r3
 c109e3c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c109e40:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c109e44:	eb000081 	bl	c10a050 <ts_sample2coord>
}
 c109e48:	e24bd00c 	sub	sp, fp, #12
 c109e4c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c109e50:	e12fff1e 	bx	lr

0c109e54 <ts_getpostime>:

void ts_getpostime( uint16 *x, uint16 *y, uint16 *ms )
{
 c109e54:	e1a0c00d 	mov	ip, sp
 c109e58:	e92dd800 	push	{fp, ip, lr, pc}
 c109e5c:	e24cb004 	sub	fp, ip, #4
 c109e60:	e24dd018 	sub	sp, sp, #24
 c109e64:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c109e68:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 c109e6c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    uint16 Vx, Vy;
    while ( !ts_pressed() );
 c109e70:	e1a00000 	nop			; (mov r0, r0)
 c109e74:	ebffff49 	bl	c109ba0 <ts_pressed>
 c109e78:	e1a03000 	mov	r3, r0
 c109e7c:	e3530000 	cmp	r3, #0
 c109e80:	0afffffb 	beq	c109e74 <ts_getpostime+0x20>
    timer3_start();
 c109e84:	ebfffd19 	bl	c1092f0 <timer3_start>
    sw_delay_ms( TS_DOWN_DELAY );
 c109e88:	e3a0001e 	mov	r0, #30
 c109e8c:	ebfffcb0 	bl	c109154 <sw_delay_ms>
    ts_scan( &Vx, &Vy );
 c109e90:	e24b200e 	sub	r2, fp, #14
 c109e94:	e24b3010 	sub	r3, fp, #16
 c109e98:	e1a00002 	mov	r0, r2
 c109e9c:	e1a01003 	mov	r1, r3
 c109ea0:	eb000049 	bl	c109fcc <ts_scan>

    while ( ts_pressed() );
 c109ea4:	e1a00000 	nop			; (mov r0, r0)
 c109ea8:	ebffff3c 	bl	c109ba0 <ts_pressed>
 c109eac:	e1a03000 	mov	r3, r0
 c109eb0:	e3530000 	cmp	r3, #0
 c109eb4:	1afffffb 	bne	c109ea8 <ts_getpostime+0x54>
    *ms = timer3_stop() / 10;
 c109eb8:	ebfffd38 	bl	c1093a0 <timer3_stop>
 c109ebc:	e1a03000 	mov	r3, r0
 c109ec0:	e1a02003 	mov	r2, r3
 c109ec4:	e59f3044 	ldr	r3, [pc, #68]	; c109f10 <ts_getpostime+0xbc>
 c109ec8:	e0831392 	umull	r1, r3, r2, r3
 c109ecc:	e1a031a3 	lsr	r3, r3, #3
 c109ed0:	e1a03803 	lsl	r3, r3, #16
 c109ed4:	e1a02823 	lsr	r2, r3, #16
 c109ed8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c109edc:	e1c320b0 	strh	r2, [r3]
    sw_delay_ms( TS_UP_DELAY );
 c109ee0:	e3a00064 	mov	r0, #100	; 0x64
 c109ee4:	ebfffc9a 	bl	c109154 <sw_delay_ms>
    ts_sample2coord( Vx, Vy, x, y );
 c109ee8:	e15b20be 	ldrh	r2, [fp, #-14]
 c109eec:	e15b31b0 	ldrh	r3, [fp, #-16]
 c109ef0:	e1a00002 	mov	r0, r2
 c109ef4:	e1a01003 	mov	r1, r3
 c109ef8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c109efc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c109f00:	eb000052 	bl	c10a050 <ts_sample2coord>
}
 c109f04:	e24bd00c 	sub	sp, fp, #12
 c109f08:	e89d6800 	ldm	sp, {fp, sp, lr}
 c109f0c:	e12fff1e 	bx	lr
 c109f10:	cccccccd 	.word	0xcccccccd

0c109f14 <ts_timeout_getpos>:

uint8 ts_timeout_getpos( uint16 *x, uint16 *y, uint16 ms )
{
 c109f14:	e1a0c00d 	mov	ip, sp
 c109f18:	e92dd800 	push	{fp, ip, lr, pc}
 c109f1c:	e24cb004 	sub	fp, ip, #4
 c109f20:	e24dd018 	sub	sp, sp, #24
 c109f24:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c109f28:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 c109f2c:	e1a03002 	mov	r3, r2
 c109f30:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
    uint16 Vx, Vy;
    timer3_start();
 c109f34:	ebfffced 	bl	c1092f0 <timer3_start>
    while ( !ts_pressed() )
 c109f38:	ea000005 	b	c109f54 <ts_timeout_getpos+0x40>
    {
        if (timer3_timeout())
 c109f3c:	ebfffd5a 	bl	c1094ac <timer3_timeout>
 c109f40:	e1a03000 	mov	r3, r0
 c109f44:	e3530000 	cmp	r3, #0
 c109f48:	0a000001 	beq	c109f54 <ts_timeout_getpos+0x40>
            return TS_TIMEOUT;
 c109f4c:	e3a030fe 	mov	r3, #254	; 0xfe
 c109f50:	ea000019 	b	c109fbc <ts_timeout_getpos+0xa8>

uint8 ts_timeout_getpos( uint16 *x, uint16 *y, uint16 ms )
{
    uint16 Vx, Vy;
    timer3_start();
    while ( !ts_pressed() )
 c109f54:	ebffff11 	bl	c109ba0 <ts_pressed>
 c109f58:	e1a03000 	mov	r3, r0
 c109f5c:	e3530000 	cmp	r3, #0
 c109f60:	0afffff5 	beq	c109f3c <ts_timeout_getpos+0x28>
    {
        if (timer3_timeout())
            return TS_TIMEOUT;
    }
    sw_delay_ms( TS_DOWN_DELAY );
 c109f64:	e3a0001e 	mov	r0, #30
 c109f68:	ebfffc79 	bl	c109154 <sw_delay_ms>
    ts_scan( &Vx, &Vy );
 c109f6c:	e24b200e 	sub	r2, fp, #14
 c109f70:	e24b3010 	sub	r3, fp, #16
 c109f74:	e1a00002 	mov	r0, r2
 c109f78:	e1a01003 	mov	r1, r3
 c109f7c:	eb000012 	bl	c109fcc <ts_scan>
    while ( ts_pressed() );
 c109f80:	e1a00000 	nop			; (mov r0, r0)
 c109f84:	ebffff05 	bl	c109ba0 <ts_pressed>
 c109f88:	e1a03000 	mov	r3, r0
 c109f8c:	e3530000 	cmp	r3, #0
 c109f90:	1afffffb 	bne	c109f84 <ts_timeout_getpos+0x70>
    sw_delay_ms( TS_UP_DELAY );
 c109f94:	e3a00064 	mov	r0, #100	; 0x64
 c109f98:	ebfffc6d 	bl	c109154 <sw_delay_ms>
    ts_sample2coord( Vx, Vy, x, y );
 c109f9c:	e15b20be 	ldrh	r2, [fp, #-14]
 c109fa0:	e15b31b0 	ldrh	r3, [fp, #-16]
 c109fa4:	e1a00002 	mov	r0, r2
 c109fa8:	e1a01003 	mov	r1, r3
 c109fac:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c109fb0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c109fb4:	eb000025 	bl	c10a050 <ts_sample2coord>
    return TS_OK;
 c109fb8:	e3a03001 	mov	r3, #1
}
 c109fbc:	e1a00003 	mov	r0, r3
 c109fc0:	e24bd00c 	sub	sp, fp, #12
 c109fc4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c109fc8:	e12fff1e 	bx	lr

0c109fcc <ts_scan>:

static void ts_scan( uint16 *Vx, uint16 *Vy )
{
 c109fcc:	e1a0c00d 	mov	ip, sp
 c109fd0:	e92dd800 	push	{fp, ip, lr, pc}
 c109fd4:	e24cb004 	sub	fp, ip, #4
 c109fd8:	e24dd008 	sub	sp, sp, #8
 c109fdc:	e50b0010 	str	r0, [fp, #-16]
 c109fe0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    PDATE = (0 << 4) | (1 << 5) | (1 << 6) | (0 << 7); // X- tierra, X+ VDD, resto abiertos
 c109fe4:	e59f3060 	ldr	r3, [pc, #96]	; c10a04c <ts_scan+0x80>
 c109fe8:	e3a02060 	mov	r2, #96	; 0x60
 c109fec:	e5832000 	str	r2, [r3]
    *Vx = adc_getSample(1);
 c109ff0:	e3a00001 	mov	r0, #1
 c109ff4:	eb0002df 	bl	c10ab78 <adc_getSample>
 c109ff8:	e1a03000 	mov	r3, r0
 c109ffc:	e1a02003 	mov	r2, r3
 c10a000:	e51b3010 	ldr	r3, [fp, #-16]
 c10a004:	e1c320b0 	strh	r2, [r3]
    
    PDATE = (1 << 4) | (0 << 5) | (0 << 6) | (1 << 7); // Y- tierra, Y+ VDD, resto abiertos
 c10a008:	e59f303c 	ldr	r3, [pc, #60]	; c10a04c <ts_scan+0x80>
 c10a00c:	e3a02090 	mov	r2, #144	; 0x90
 c10a010:	e5832000 	str	r2, [r3]
    *Vy = adc_getSample(0);
 c10a014:	e3a00000 	mov	r0, #0
 c10a018:	eb0002d6 	bl	c10ab78 <adc_getSample>
 c10a01c:	e1a03000 	mov	r3, r0
 c10a020:	e1a02003 	mov	r2, r3
 c10a024:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10a028:	e1c320b0 	strh	r2, [r3]
    
    PDATE = (1 << 4) | (1 << 5) | (0 << 6) | (1 << 7); // Y- tierra, resto abiertos
 c10a02c:	e59f3018 	ldr	r3, [pc, #24]	; c10a04c <ts_scan+0x80>
 c10a030:	e3a020b0 	mov	r2, #176	; 0xb0
 c10a034:	e5832000 	str	r2, [r3]
    sw_delay_ms( 1 );
 c10a038:	e3a00001 	mov	r0, #1
 c10a03c:	ebfffc44 	bl	c109154 <sw_delay_ms>
}
 c10a040:	e24bd00c 	sub	sp, fp, #12
 c10a044:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10a048:	e12fff1e 	bx	lr
 c10a04c:	01d2002c 	.word	0x01d2002c

0c10a050 <ts_sample2coord>:

static void ts_sample2coord( uint16 Vx, uint16 Vy, uint16 *x, uint16 *y )
{
 c10a050:	e1a0c00d 	mov	ip, sp
 c10a054:	e92dd800 	push	{fp, ip, lr, pc}
 c10a058:	e24cb004 	sub	fp, ip, #4
 c10a05c:	e24dd010 	sub	sp, sp, #16
 c10a060:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
 c10a064:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c10a068:	e14b00be 	strh	r0, [fp, #-14]
 c10a06c:	e14b11b0 	strh	r1, [fp, #-16]
    if( Vx < Vxmin )
 c10a070:	e59f3150 	ldr	r3, [pc, #336]	; c10a1c8 <ts_sample2coord+0x178>
 c10a074:	e1d330b0 	ldrh	r3, [r3]
 c10a078:	e15b20be 	ldrh	r2, [fp, #-14]
 c10a07c:	e1520003 	cmp	r2, r3
 c10a080:	2a000003 	bcs	c10a094 <ts_sample2coord+0x44>
        *x = 0;
 c10a084:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10a088:	e3a02000 	mov	r2, #0
 c10a08c:	e1c320b0 	strh	r2, [r3]
 c10a090:	ea00001f 	b	c10a114 <ts_sample2coord+0xc4>
    else if( Vx > Vxmax )
 c10a094:	e59f3130 	ldr	r3, [pc, #304]	; c10a1cc <ts_sample2coord+0x17c>
 c10a098:	e1d330b0 	ldrh	r3, [r3]
 c10a09c:	e15b20be 	ldrh	r2, [fp, #-14]
 c10a0a0:	e1520003 	cmp	r2, r3
 c10a0a4:	9a000003 	bls	c10a0b8 <ts_sample2coord+0x68>
        *x = LCD_WIDTH-1;
 c10a0a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10a0ac:	e59f211c 	ldr	r2, [pc, #284]	; c10a1d0 <ts_sample2coord+0x180>
 c10a0b0:	e1c320b0 	strh	r2, [r3]
 c10a0b4:	ea000016 	b	c10a114 <ts_sample2coord+0xc4>
    else 
        *x = LCD_WIDTH*(Vx-Vxmin) / (Vxmax-Vxmin);
 c10a0b8:	e15b20be 	ldrh	r2, [fp, #-14]
 c10a0bc:	e59f3104 	ldr	r3, [pc, #260]	; c10a1c8 <ts_sample2coord+0x178>
 c10a0c0:	e1d330b0 	ldrh	r3, [r3]
 c10a0c4:	e0632002 	rsb	r2, r3, r2
 c10a0c8:	e1a03002 	mov	r3, r2
 c10a0cc:	e1a03103 	lsl	r3, r3, #2
 c10a0d0:	e0833002 	add	r3, r3, r2
 c10a0d4:	e1a03303 	lsl	r3, r3, #6
 c10a0d8:	e1a02003 	mov	r2, r3
 c10a0dc:	e59f30e8 	ldr	r3, [pc, #232]	; c10a1cc <ts_sample2coord+0x17c>
 c10a0e0:	e1d330b0 	ldrh	r3, [r3]
 c10a0e4:	e1a01003 	mov	r1, r3
 c10a0e8:	e59f30d8 	ldr	r3, [pc, #216]	; c10a1c8 <ts_sample2coord+0x178>
 c10a0ec:	e1d330b0 	ldrh	r3, [r3]
 c10a0f0:	e0633001 	rsb	r3, r3, r1
 c10a0f4:	e1a00002 	mov	r0, r2
 c10a0f8:	e1a01003 	mov	r1, r3
 c10a0fc:	eb0003ef 	bl	c10b0c0 <__aeabi_idiv>
 c10a100:	e1a03000 	mov	r3, r0
 c10a104:	e1a03803 	lsl	r3, r3, #16
 c10a108:	e1a02823 	lsr	r2, r3, #16
 c10a10c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10a110:	e1c320b0 	strh	r2, [r3]

    if( Vy < Vymin )
 c10a114:	e59f30b8 	ldr	r3, [pc, #184]	; c10a1d4 <ts_sample2coord+0x184>
 c10a118:	e1d330b0 	ldrh	r3, [r3]
 c10a11c:	e15b21b0 	ldrh	r2, [fp, #-16]
 c10a120:	e1520003 	cmp	r2, r3
 c10a124:	2a000003 	bcs	c10a138 <ts_sample2coord+0xe8>
        *y = LCD_HEIGHT-1;
 c10a128:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10a12c:	e3a020ef 	mov	r2, #239	; 0xef
 c10a130:	e1c320b0 	strh	r2, [r3]
 c10a134:	ea000020 	b	c10a1bc <ts_sample2coord+0x16c>
    else if( Vy > Vymax )
 c10a138:	e59f3098 	ldr	r3, [pc, #152]	; c10a1d8 <ts_sample2coord+0x188>
 c10a13c:	e1d330b0 	ldrh	r3, [r3]
 c10a140:	e15b21b0 	ldrh	r2, [fp, #-16]
 c10a144:	e1520003 	cmp	r2, r3
 c10a148:	9a000003 	bls	c10a15c <ts_sample2coord+0x10c>
        *y = 0;
 c10a14c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10a150:	e3a02000 	mov	r2, #0
 c10a154:	e1c320b0 	strh	r2, [r3]
 c10a158:	ea000017 	b	c10a1bc <ts_sample2coord+0x16c>
    else
        *y = LCD_HEIGHT*(Vymax - Vy) / (Vymax-Vymin);
 c10a15c:	e59f3074 	ldr	r3, [pc, #116]	; c10a1d8 <ts_sample2coord+0x188>
 c10a160:	e1d330b0 	ldrh	r3, [r3]
 c10a164:	e1a02003 	mov	r2, r3
 c10a168:	e15b31b0 	ldrh	r3, [fp, #-16]
 c10a16c:	e0632002 	rsb	r2, r3, r2
 c10a170:	e1a03002 	mov	r3, r2
 c10a174:	e1a03203 	lsl	r3, r3, #4
 c10a178:	e0623003 	rsb	r3, r2, r3
 c10a17c:	e1a03203 	lsl	r3, r3, #4
 c10a180:	e1a02003 	mov	r2, r3
 c10a184:	e59f304c 	ldr	r3, [pc, #76]	; c10a1d8 <ts_sample2coord+0x188>
 c10a188:	e1d330b0 	ldrh	r3, [r3]
 c10a18c:	e1a01003 	mov	r1, r3
 c10a190:	e59f303c 	ldr	r3, [pc, #60]	; c10a1d4 <ts_sample2coord+0x184>
 c10a194:	e1d330b0 	ldrh	r3, [r3]
 c10a198:	e0633001 	rsb	r3, r3, r1
 c10a19c:	e1a00002 	mov	r0, r2
 c10a1a0:	e1a01003 	mov	r1, r3
 c10a1a4:	eb0003c5 	bl	c10b0c0 <__aeabi_idiv>
 c10a1a8:	e1a03000 	mov	r3, r0
 c10a1ac:	e1a03803 	lsl	r3, r3, #16
 c10a1b0:	e1a02823 	lsr	r2, r3, #16
 c10a1b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10a1b8:	e1c320b0 	strh	r2, [r3]
}
 c10a1bc:	e24bd00c 	sub	sp, fp, #12
 c10a1c0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10a1c4:	e12fff1e 	bx	lr
 c10a1c8:	0c10efac 	.word	0x0c10efac
 c10a1cc:	0c10efae 	.word	0x0c10efae
 c10a1d0:	0000013f 	.word	0x0000013f
 c10a1d4:	0c10efb0 	.word	0x0c10efb0
 c10a1d8:	0c10efb2 	.word	0x0c10efb2

0c10a1dc <ts_open>:

void ts_open( void (*isr)(void) )
{
 c10a1dc:	e1a0c00d 	mov	ip, sp
 c10a1e0:	e92dd800 	push	{fp, ip, lr, pc}
 c10a1e4:	e24cb004 	sub	fp, ip, #4
 c10a1e8:	e24dd008 	sub	sp, sp, #8
 c10a1ec:	e50b0010 	str	r0, [fp, #-16]
    pISR_TS = (uint32)isr;
 c10a1f0:	e59f3038 	ldr	r3, [pc, #56]	; c10a230 <ts_open+0x54>
 c10a1f4:	e51b2010 	ldr	r2, [fp, #-16]
 c10a1f8:	e5832000 	str	r2, [r3]
    INTPND &= ~(BIT_EINT2);
 c10a1fc:	e59f3030 	ldr	r3, [pc, #48]	; c10a234 <ts_open+0x58>
 c10a200:	e59f202c 	ldr	r2, [pc, #44]	; c10a234 <ts_open+0x58>
 c10a204:	e5922000 	ldr	r2, [r2]
 c10a208:	e3c22502 	bic	r2, r2, #8388608	; 0x800000
 c10a20c:	e5832000 	str	r2, [r3]
    INTMSK &= ~(BIT_GLOBAL | BIT_EINT2);
 c10a210:	e59f3020 	ldr	r3, [pc, #32]	; c10a238 <ts_open+0x5c>
 c10a214:	e59f201c 	ldr	r2, [pc, #28]	; c10a238 <ts_open+0x5c>
 c10a218:	e5922000 	ldr	r2, [r2]
 c10a21c:	e3c22512 	bic	r2, r2, #75497472	; 0x4800000
 c10a220:	e5832000 	str	r2, [r3]
}
 c10a224:	e24bd00c 	sub	sp, fp, #12
 c10a228:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10a22c:	e12fff1e 	bx	lr
 c10a230:	0c7fff7c 	.word	0x0c7fff7c
 c10a234:	01e00004 	.word	0x01e00004
 c10a238:	01e0000c 	.word	0x01e0000c

0c10a23c <ts_close>:

void ts_close( void )
{
 c10a23c:	e1a0c00d 	mov	ip, sp
 c10a240:	e92dd800 	push	{fp, ip, lr, pc}
 c10a244:	e24cb004 	sub	fp, ip, #4
    INTMSK |= BIT_EINT2;
 c10a248:	e59f3024 	ldr	r3, [pc, #36]	; c10a274 <ts_close+0x38>
 c10a24c:	e59f2020 	ldr	r2, [pc, #32]	; c10a274 <ts_close+0x38>
 c10a250:	e5922000 	ldr	r2, [r2]
 c10a254:	e3822502 	orr	r2, r2, #8388608	; 0x800000
 c10a258:	e5832000 	str	r2, [r3]
    pISR_TS = (uint32)isr_TS_dummy;
 c10a25c:	e59f3014 	ldr	r3, [pc, #20]	; c10a278 <ts_close+0x3c>
 c10a260:	e59f2014 	ldr	r2, [pc, #20]	; c10a27c <ts_close+0x40>
 c10a264:	e5832000 	str	r2, [r3]
}
 c10a268:	e24bd00c 	sub	sp, fp, #12
 c10a26c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10a270:	e12fff1e 	bx	lr
 c10a274:	01e0000c 	.word	0x01e0000c
 c10a278:	0c7fff7c 	.word	0x0c7fff7c
 c10a27c:	0c1089f4 	.word	0x0c1089f4

0c10a280 <uart0_init>:

#include <s3c44b0x.h>
#include <uart.h>

void uart0_init( void )
{
 c10a280:	e1a0c00d 	mov	ip, sp
 c10a284:	e92dd800 	push	{fp, ip, lr, pc}
 c10a288:	e24cb004 	sub	fp, ip, #4
    UFCON0 = 0x1;
 c10a28c:	e59f3040 	ldr	r3, [pc, #64]	; c10a2d4 <uart0_init+0x54>
 c10a290:	e3a02001 	mov	r2, #1
 c10a294:	e5832000 	str	r2, [r3]
    UMCON0 = 0x0;
 c10a298:	e59f3038 	ldr	r3, [pc, #56]	; c10a2d8 <uart0_init+0x58>
 c10a29c:	e3a02000 	mov	r2, #0
 c10a2a0:	e5832000 	str	r2, [r3]
    ULCON0 = 0x3;
 c10a2a4:	e3a0361d 	mov	r3, #30408704	; 0x1d00000
 c10a2a8:	e3a02003 	mov	r2, #3
 c10a2ac:	e5832000 	str	r2, [r3]
    UBRDIV0 = 0x22;
 c10a2b0:	e59f3024 	ldr	r3, [pc, #36]	; c10a2dc <uart0_init+0x5c>
 c10a2b4:	e3a02022 	mov	r2, #34	; 0x22
 c10a2b8:	e5832000 	str	r2, [r3]
    UCON0 = 0x5;
 c10a2bc:	e59f301c 	ldr	r3, [pc, #28]	; c10a2e0 <uart0_init+0x60>
 c10a2c0:	e3a02005 	mov	r2, #5
 c10a2c4:	e5832000 	str	r2, [r3]

}
 c10a2c8:	e24bd00c 	sub	sp, fp, #12
 c10a2cc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10a2d0:	e12fff1e 	bx	lr
 c10a2d4:	01d00008 	.word	0x01d00008
 c10a2d8:	01d0000c 	.word	0x01d0000c
 c10a2dc:	01d00028 	.word	0x01d00028
 c10a2e0:	01d00004 	.word	0x01d00004

0c10a2e4 <uart0_putchar>:

void uart0_putchar( char ch )
{
 c10a2e4:	e1a0c00d 	mov	ip, sp
 c10a2e8:	e92dd800 	push	{fp, ip, lr, pc}
 c10a2ec:	e24cb004 	sub	fp, ip, #4
 c10a2f0:	e24dd008 	sub	sp, sp, #8
 c10a2f4:	e1a03000 	mov	r3, r0
 c10a2f8:	e54b300d 	strb	r3, [fp, #-13]
    while((UFSTAT0 & (1<<9)));
 c10a2fc:	e1a00000 	nop			; (mov r0, r0)
 c10a300:	e59f3024 	ldr	r3, [pc, #36]	; c10a32c <uart0_putchar+0x48>
 c10a304:	e5933000 	ldr	r3, [r3]
 c10a308:	e2033c02 	and	r3, r3, #512	; 0x200
 c10a30c:	e3530000 	cmp	r3, #0
 c10a310:	1afffffa 	bne	c10a300 <uart0_putchar+0x1c>
    UTXH0 = ch;
 c10a314:	e59f3014 	ldr	r3, [pc, #20]	; c10a330 <uart0_putchar+0x4c>
 c10a318:	e55b200d 	ldrb	r2, [fp, #-13]
 c10a31c:	e5832000 	str	r2, [r3]
}        
 c10a320:	e24bd00c 	sub	sp, fp, #12
 c10a324:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10a328:	e12fff1e 	bx	lr
 c10a32c:	01d00018 	.word	0x01d00018
 c10a330:	01d00020 	.word	0x01d00020

0c10a334 <uart0_getchar>:

char uart0_getchar( void )
{
 c10a334:	e1a0c00d 	mov	ip, sp
 c10a338:	e92dd800 	push	{fp, ip, lr, pc}
 c10a33c:	e24cb004 	sub	fp, ip, #4
    while(!(UFSTAT0 & 0xf));
 c10a340:	e1a00000 	nop			; (mov r0, r0)
 c10a344:	e59f3028 	ldr	r3, [pc, #40]	; c10a374 <uart0_getchar+0x40>
 c10a348:	e5933000 	ldr	r3, [r3]
 c10a34c:	e203300f 	and	r3, r3, #15
 c10a350:	e3530000 	cmp	r3, #0
 c10a354:	0afffffa 	beq	c10a344 <uart0_getchar+0x10>
    return URXH0;
 c10a358:	e59f3018 	ldr	r3, [pc, #24]	; c10a378 <uart0_getchar+0x44>
 c10a35c:	e5933000 	ldr	r3, [r3]
 c10a360:	e20330ff 	and	r3, r3, #255	; 0xff
}
 c10a364:	e1a00003 	mov	r0, r3
 c10a368:	e24bd00c 	sub	sp, fp, #12
 c10a36c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10a370:	e12fff1e 	bx	lr
 c10a374:	01d00018 	.word	0x01d00018
 c10a378:	01d00024 	.word	0x01d00024

0c10a37c <uart0_puts>:

void uart0_puts( char *s )
{
 c10a37c:	e1a0c00d 	mov	ip, sp
 c10a380:	e92dd800 	push	{fp, ip, lr, pc}
 c10a384:	e24cb004 	sub	fp, ip, #4
 c10a388:	e24dd008 	sub	sp, sp, #8
 c10a38c:	e50b0010 	str	r0, [fp, #-16]
    while(*s != '\0'){
 c10a390:	ea000006 	b	c10a3b0 <uart0_puts+0x34>
    	uart0_putchar(*s++);
 c10a394:	e51b3010 	ldr	r3, [fp, #-16]
 c10a398:	e5d33000 	ldrb	r3, [r3]
 c10a39c:	e51b2010 	ldr	r2, [fp, #-16]
 c10a3a0:	e2822001 	add	r2, r2, #1
 c10a3a4:	e50b2010 	str	r2, [fp, #-16]
 c10a3a8:	e1a00003 	mov	r0, r3
 c10a3ac:	ebffffcc 	bl	c10a2e4 <uart0_putchar>
    return URXH0;
}

void uart0_puts( char *s )
{
    while(*s != '\0'){
 c10a3b0:	e51b3010 	ldr	r3, [fp, #-16]
 c10a3b4:	e5d33000 	ldrb	r3, [r3]
 c10a3b8:	e3530000 	cmp	r3, #0
 c10a3bc:	1afffff4 	bne	c10a394 <uart0_puts+0x18>
    	uart0_putchar(*s++);
    }
}
 c10a3c0:	e24bd00c 	sub	sp, fp, #12
 c10a3c4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10a3c8:	e12fff1e 	bx	lr

0c10a3cc <uart0_putint>:

void uart0_putint( int32 i )
{
 c10a3cc:	e1a0c00d 	mov	ip, sp
 c10a3d0:	e92dd800 	push	{fp, ip, lr, pc}
 c10a3d4:	e24cb004 	sub	fp, ip, #4
 c10a3d8:	e24dde11 	sub	sp, sp, #272	; 0x110
 c10a3dc:	e50b0118 	str	r0, [fp, #-280]	; 0xfffffee8
	char buf[256+1];
	char *p = buf +256;
 c10a3e0:	e24b3f45 	sub	r3, fp, #276	; 0x114
 c10a3e4:	e2833c01 	add	r3, r3, #256	; 0x100
 c10a3e8:	e50b3010 	str	r3, [fp, #-16]
	int8 c;
    boolean neg = FALSE;
 c10a3ec:	e3a03000 	mov	r3, #0
 c10a3f0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef

	*p = '\0';
 c10a3f4:	e51b3010 	ldr	r3, [fp, #-16]
 c10a3f8:	e3a02000 	mov	r2, #0
 c10a3fc:	e5c32000 	strb	r2, [r3]

    if(i < 0){
 c10a400:	e51b3118 	ldr	r3, [fp, #-280]	; 0xfffffee8
 c10a404:	e3530000 	cmp	r3, #0
 c10a408:	aa000004 	bge	c10a420 <uart0_putint+0x54>
    	i *= -1;
 c10a40c:	e51b3118 	ldr	r3, [fp, #-280]	; 0xfffffee8
 c10a410:	e2633000 	rsb	r3, r3, #0
 c10a414:	e50b3118 	str	r3, [fp, #-280]	; 0xfffffee8
    	neg = TRUE;
 c10a418:	e3a03001 	mov	r3, #1
 c10a41c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    }
    do{
    	c = i%10;
 c10a420:	e51b1118 	ldr	r1, [fp, #-280]	; 0xfffffee8
 c10a424:	e59f30a8 	ldr	r3, [pc, #168]	; c10a4d4 <uart0_putint+0x108>
 c10a428:	e0c32391 	smull	r2, r3, r1, r3
 c10a42c:	e1a02143 	asr	r2, r3, #2
 c10a430:	e1a03fc1 	asr	r3, r1, #31
 c10a434:	e0632002 	rsb	r2, r3, r2
 c10a438:	e1a03002 	mov	r3, r2
 c10a43c:	e1a03103 	lsl	r3, r3, #2
 c10a440:	e0833002 	add	r3, r3, r2
 c10a444:	e1a03083 	lsl	r3, r3, #1
 c10a448:	e0632001 	rsb	r2, r3, r1
 c10a44c:	e1a03002 	mov	r3, r2
 c10a450:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
    	*--p = '0' + c;
 c10a454:	e51b3010 	ldr	r3, [fp, #-16]
 c10a458:	e2433001 	sub	r3, r3, #1
 c10a45c:	e50b3010 	str	r3, [fp, #-16]
 c10a460:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
 c10a464:	e2833030 	add	r3, r3, #48	; 0x30
 c10a468:	e20320ff 	and	r2, r3, #255	; 0xff
 c10a46c:	e51b3010 	ldr	r3, [fp, #-16]
 c10a470:	e5c32000 	strb	r2, [r3]
    	i/=10;
 c10a474:	e51b3118 	ldr	r3, [fp, #-280]	; 0xfffffee8
 c10a478:	e59f2054 	ldr	r2, [pc, #84]	; c10a4d4 <uart0_putint+0x108>
 c10a47c:	e0c21293 	smull	r1, r2, r3, r2
 c10a480:	e1a02142 	asr	r2, r2, #2
 c10a484:	e1a03fc3 	asr	r3, r3, #31
 c10a488:	e0633002 	rsb	r3, r3, r2
 c10a48c:	e50b3118 	str	r3, [fp, #-280]	; 0xfffffee8
    }while(i);
 c10a490:	e51b3118 	ldr	r3, [fp, #-280]	; 0xfffffee8
 c10a494:	e3530000 	cmp	r3, #0
 c10a498:	1affffe0 	bne	c10a420 <uart0_putint+0x54>
    if(neg){
 c10a49c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10a4a0:	e3530000 	cmp	r3, #0
 c10a4a4:	0a000005 	beq	c10a4c0 <uart0_putint+0xf4>
    	*--p = '-';
 c10a4a8:	e51b3010 	ldr	r3, [fp, #-16]
 c10a4ac:	e2433001 	sub	r3, r3, #1
 c10a4b0:	e50b3010 	str	r3, [fp, #-16]
 c10a4b4:	e51b3010 	ldr	r3, [fp, #-16]
 c10a4b8:	e3a0202d 	mov	r2, #45	; 0x2d
 c10a4bc:	e5c32000 	strb	r2, [r3]
    }
    uart0_puts(p);
 c10a4c0:	e51b0010 	ldr	r0, [fp, #-16]
 c10a4c4:	ebffffac 	bl	c10a37c <uart0_puts>

}
 c10a4c8:	e24bd00c 	sub	sp, fp, #12
 c10a4cc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10a4d0:	e12fff1e 	bx	lr
 c10a4d4:	66666667 	.word	0x66666667

0c10a4d8 <uart0_puthex>:


void uart0_puthex( uint32 i )
{
 c10a4d8:	e1a0c00d 	mov	ip, sp
 c10a4dc:	e92dd800 	push	{fp, ip, lr, pc}
 c10a4e0:	e24cb004 	sub	fp, ip, #4
 c10a4e4:	e24dd018 	sub	sp, sp, #24
 c10a4e8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    char buf[8 + 1];
    char *p = buf + 8;
 c10a4ec:	e24b301c 	sub	r3, fp, #28
 c10a4f0:	e2833008 	add	r3, r3, #8
 c10a4f4:	e50b3010 	str	r3, [fp, #-16]
    uint8 c;

    *p = '\0';
 c10a4f8:	e51b3010 	ldr	r3, [fp, #-16]
 c10a4fc:	e3a02000 	mov	r2, #0
 c10a500:	e5c32000 	strb	r2, [r3]

    do {
        c = i & 0xf;
 c10a504:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10a508:	e20330ff 	and	r3, r3, #255	; 0xff
 c10a50c:	e203300f 	and	r3, r3, #15
 c10a510:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        if( c < 10 )
 c10a514:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10a518:	e3530009 	cmp	r3, #9
 c10a51c:	8a000008 	bhi	c10a544 <uart0_puthex+0x6c>
            *--p = '0' + c;
 c10a520:	e51b3010 	ldr	r3, [fp, #-16]
 c10a524:	e2433001 	sub	r3, r3, #1
 c10a528:	e50b3010 	str	r3, [fp, #-16]
 c10a52c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10a530:	e2833030 	add	r3, r3, #48	; 0x30
 c10a534:	e20320ff 	and	r2, r3, #255	; 0xff
 c10a538:	e51b3010 	ldr	r3, [fp, #-16]
 c10a53c:	e5c32000 	strb	r2, [r3]
 c10a540:	ea000007 	b	c10a564 <uart0_puthex+0x8c>
        else
            *--p = 'a' + c - 10;
 c10a544:	e51b3010 	ldr	r3, [fp, #-16]
 c10a548:	e2433001 	sub	r3, r3, #1
 c10a54c:	e50b3010 	str	r3, [fp, #-16]
 c10a550:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10a554:	e2833057 	add	r3, r3, #87	; 0x57
 c10a558:	e20320ff 	and	r2, r3, #255	; 0xff
 c10a55c:	e51b3010 	ldr	r3, [fp, #-16]
 c10a560:	e5c32000 	strb	r2, [r3]
        i = i >> 4;
 c10a564:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10a568:	e1a03223 	lsr	r3, r3, #4
 c10a56c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    } while( i );
 c10a570:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10a574:	e3530000 	cmp	r3, #0
 c10a578:	1affffe1 	bne	c10a504 <uart0_puthex+0x2c>

    uart0_puts( p );
 c10a57c:	e51b0010 	ldr	r0, [fp, #-16]
 c10a580:	ebffff7d 	bl	c10a37c <uart0_puts>
}
 c10a584:	e24bd00c 	sub	sp, fp, #12
 c10a588:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10a58c:	e12fff1e 	bx	lr

0c10a590 <uart0_gets>:

void uart0_gets( char *s )
{
 c10a590:	e1a0c00d 	mov	ip, sp
 c10a594:	e92dd800 	push	{fp, ip, lr, pc}
 c10a598:	e24cb004 	sub	fp, ip, #4
 c10a59c:	e24dd010 	sub	sp, sp, #16
 c10a5a0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8

    char c;
    c = uart0_getchar();
 c10a5a4:	ebffff62 	bl	c10a334 <uart0_getchar>
 c10a5a8:	e1a03000 	mov	r3, r0
 c10a5ac:	e54b300d 	strb	r3, [fp, #-13]
    while(c != '\n'){
 c10a5b0:	ea000008 	b	c10a5d8 <uart0_gets+0x48>
    	*s++ = c;
 c10a5b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10a5b8:	e55b200d 	ldrb	r2, [fp, #-13]
 c10a5bc:	e5c32000 	strb	r2, [r3]
 c10a5c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10a5c4:	e2833001 	add	r3, r3, #1
 c10a5c8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    	c = uart0_getchar();
 c10a5cc:	ebffff58 	bl	c10a334 <uart0_getchar>
 c10a5d0:	e1a03000 	mov	r3, r0
 c10a5d4:	e54b300d 	strb	r3, [fp, #-13]
void uart0_gets( char *s )
{

    char c;
    c = uart0_getchar();
    while(c != '\n'){
 c10a5d8:	e55b300d 	ldrb	r3, [fp, #-13]
 c10a5dc:	e353000a 	cmp	r3, #10
 c10a5e0:	1afffff3 	bne	c10a5b4 <uart0_gets+0x24>
    	*s++ = c;
    	c = uart0_getchar();

    }
    *s = '\0';
 c10a5e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10a5e8:	e3a02000 	mov	r2, #0
 c10a5ec:	e5c32000 	strb	r2, [r3]
}
 c10a5f0:	e24bd00c 	sub	sp, fp, #12
 c10a5f4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10a5f8:	e12fff1e 	bx	lr

0c10a5fc <uart0_getint>:

int32 uart0_getint( void )
{
 c10a5fc:	e1a0c00d 	mov	ip, sp
 c10a600:	e92dd800 	push	{fp, ip, lr, pc}
 c10a604:	e24cb004 	sub	fp, ip, #4
 c10a608:	e24dde11 	sub	sp, sp, #272	; 0x110
   int32 ent = 0;
 c10a60c:	e3a03000 	mov	r3, #0
 c10a610:	e50b3010 	str	r3, [fp, #-16]
   char c[256], *p;
   uart0_gets(c);
 c10a614:	e24b3f46 	sub	r3, fp, #280	; 0x118
 c10a618:	e1a00003 	mov	r0, r3
 c10a61c:	ebffffdb 	bl	c10a590 <uart0_gets>
   boolean neg = FALSE;
 c10a620:	e3a03000 	mov	r3, #0
 c10a624:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    p = c;
 c10a628:	e24b3f46 	sub	r3, fp, #280	; 0x118
 c10a62c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    if(*p == '-'){
 c10a630:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10a634:	e5d33000 	ldrb	r3, [r3]
 c10a638:	e353002d 	cmp	r3, #45	; 0x2d
 c10a63c:	1a000013 	bne	c10a690 <uart0_getint+0x94>
    	neg = TRUE;
 c10a640:	e3a03001 	mov	r3, #1
 c10a644:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    	p++;
 c10a648:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10a64c:	e2833001 	add	r3, r3, #1
 c10a650:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    }
    while(*p != '\0'){
 c10a654:	ea00000e 	b	c10a694 <uart0_getint+0x98>
    	ent = (*(p++)- '0') + ent*10;
 c10a658:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10a65c:	e5d33000 	ldrb	r3, [r3]
 c10a660:	e2431030 	sub	r1, r3, #48	; 0x30
 c10a664:	e51b2010 	ldr	r2, [fp, #-16]
 c10a668:	e1a03002 	mov	r3, r2
 c10a66c:	e1a03103 	lsl	r3, r3, #2
 c10a670:	e0833002 	add	r3, r3, r2
 c10a674:	e1a03083 	lsl	r3, r3, #1
 c10a678:	e0813003 	add	r3, r1, r3
 c10a67c:	e50b3010 	str	r3, [fp, #-16]
 c10a680:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10a684:	e2833001 	add	r3, r3, #1
 c10a688:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c10a68c:	ea000000 	b	c10a694 <uart0_getint+0x98>
    p = c;
    if(*p == '-'){
    	neg = TRUE;
    	p++;
    }
    while(*p != '\0'){
 c10a690:	e1a00000 	nop			; (mov r0, r0)
 c10a694:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10a698:	e5d33000 	ldrb	r3, [r3]
 c10a69c:	e3530000 	cmp	r3, #0
 c10a6a0:	1affffec 	bne	c10a658 <uart0_getint+0x5c>
    	ent = (*(p++)- '0') + ent*10;
    }

    if(neg){
 c10a6a4:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10a6a8:	e3530000 	cmp	r3, #0
 c10a6ac:	0a000002 	beq	c10a6bc <uart0_getint+0xc0>
    	ent *= -1;
 c10a6b0:	e51b3010 	ldr	r3, [fp, #-16]
 c10a6b4:	e2633000 	rsb	r3, r3, #0
 c10a6b8:	e50b3010 	str	r3, [fp, #-16]
    }
    return ent;
 c10a6bc:	e51b3010 	ldr	r3, [fp, #-16]

}
 c10a6c0:	e1a00003 	mov	r0, r3
 c10a6c4:	e24bd00c 	sub	sp, fp, #12
 c10a6c8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10a6cc:	e12fff1e 	bx	lr

0c10a6d0 <uart0_gethex>:

uint32 uart0_gethex( void )
{
 c10a6d0:	e1a0c00d 	mov	ip, sp
 c10a6d4:	e92dd800 	push	{fp, ip, lr, pc}
 c10a6d8:	e24cb004 	sub	fp, ip, #4
 c10a6dc:	e24ddf42 	sub	sp, sp, #264	; 0x108
	uint32 hex = 0;
 c10a6e0:	e3a03000 	mov	r3, #0
 c10a6e4:	e50b3010 	str	r3, [fp, #-16]
    char c[256], *p;
    uart0_gets(c);
 c10a6e8:	e24b3f45 	sub	r3, fp, #276	; 0x114
 c10a6ec:	e1a00003 	mov	r0, r3
 c10a6f0:	ebffffa6 	bl	c10a590 <uart0_gets>

	p = c;
 c10a6f4:	e24b3f45 	sub	r3, fp, #276	; 0x114
 c10a6f8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	while(*p != '\0'){
 c10a6fc:	ea00003a 	b	c10a7ec <uart0_gethex+0x11c>
		if(*p >= '0' && *p <= '9'){
 c10a700:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10a704:	e5d33000 	ldrb	r3, [r3]
 c10a708:	e353002f 	cmp	r3, #47	; 0x2f
 c10a70c:	9a00000f 	bls	c10a750 <uart0_gethex+0x80>
 c10a710:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10a714:	e5d33000 	ldrb	r3, [r3]
 c10a718:	e3530039 	cmp	r3, #57	; 0x39
 c10a71c:	8a00000b 	bhi	c10a750 <uart0_gethex+0x80>
			hex = (*(p++) - '0') + hex*16;
 c10a720:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10a724:	e5d33000 	ldrb	r3, [r3]
 c10a728:	e1a02003 	mov	r2, r3
 c10a72c:	e51b3010 	ldr	r3, [fp, #-16]
 c10a730:	e1a03203 	lsl	r3, r3, #4
 c10a734:	e0823003 	add	r3, r2, r3
 c10a738:	e2433030 	sub	r3, r3, #48	; 0x30
 c10a73c:	e50b3010 	str	r3, [fp, #-16]
 c10a740:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10a744:	e2833001 	add	r3, r3, #1
 c10a748:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c10a74c:	ea000026 	b	c10a7ec <uart0_gethex+0x11c>
		}else if(*p >= 'A' && *p <= 'F'){
 c10a750:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10a754:	e5d33000 	ldrb	r3, [r3]
 c10a758:	e3530040 	cmp	r3, #64	; 0x40
 c10a75c:	9a00000f 	bls	c10a7a0 <uart0_gethex+0xd0>
 c10a760:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10a764:	e5d33000 	ldrb	r3, [r3]
 c10a768:	e3530046 	cmp	r3, #70	; 0x46
 c10a76c:	8a00000b 	bhi	c10a7a0 <uart0_gethex+0xd0>
			hex = ((*(p++) - 'A') + 10) + hex*16;
 c10a770:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10a774:	e5d33000 	ldrb	r3, [r3]
 c10a778:	e1a02003 	mov	r2, r3
 c10a77c:	e51b3010 	ldr	r3, [fp, #-16]
 c10a780:	e1a03203 	lsl	r3, r3, #4
 c10a784:	e0823003 	add	r3, r2, r3
 c10a788:	e2433037 	sub	r3, r3, #55	; 0x37
 c10a78c:	e50b3010 	str	r3, [fp, #-16]
 c10a790:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10a794:	e2833001 	add	r3, r3, #1
 c10a798:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c10a79c:	ea000012 	b	c10a7ec <uart0_gethex+0x11c>

		}else if(*p >= 'a' && *p <= 'f'){
 c10a7a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10a7a4:	e5d33000 	ldrb	r3, [r3]
 c10a7a8:	e3530060 	cmp	r3, #96	; 0x60
 c10a7ac:	9a00000e 	bls	c10a7ec <uart0_gethex+0x11c>
 c10a7b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10a7b4:	e5d33000 	ldrb	r3, [r3]
 c10a7b8:	e3530066 	cmp	r3, #102	; 0x66
 c10a7bc:	8a00000a 	bhi	c10a7ec <uart0_gethex+0x11c>
			hex = ((*(p++) - 'a') + 10) + hex*16;
 c10a7c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10a7c4:	e5d33000 	ldrb	r3, [r3]
 c10a7c8:	e1a02003 	mov	r2, r3
 c10a7cc:	e51b3010 	ldr	r3, [fp, #-16]
 c10a7d0:	e1a03203 	lsl	r3, r3, #4
 c10a7d4:	e0823003 	add	r3, r2, r3
 c10a7d8:	e2433057 	sub	r3, r3, #87	; 0x57
 c10a7dc:	e50b3010 	str	r3, [fp, #-16]
 c10a7e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10a7e4:	e2833001 	add	r3, r3, #1
 c10a7e8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	uint32 hex = 0;
    char c[256], *p;
    uart0_gets(c);

	p = c;
	while(*p != '\0'){
 c10a7ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10a7f0:	e5d33000 	ldrb	r3, [r3]
 c10a7f4:	e3530000 	cmp	r3, #0
 c10a7f8:	1affffc0 	bne	c10a700 <uart0_gethex+0x30>
		}else if(*p >= 'a' && *p <= 'f'){
			hex = ((*(p++) - 'a') + 10) + hex*16;

		}
	}
    return hex;
 c10a7fc:	e51b3010 	ldr	r3, [fp, #-16]


}
 c10a800:	e1a00003 	mov	r0, r3
 c10a804:	e24bd00c 	sub	sp, fp, #12
 c10a808:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10a80c:	e12fff1e 	bx	lr

0c10a810 <uda1341ts_init>:

static uint8 volume;
static uint8 state;

void uda1341ts_init( void )
{
 c10a810:	e1a0c00d 	mov	ip, sp
 c10a814:	e92dd800 	push	{fp, ip, lr, pc}
 c10a818:	e24cb004 	sub	fp, ip, #4
    L3_init();     
 c10a81c:	eb000177 	bl	c10ae00 <L3_init>
    
    L3_putByte( (ADDRESS << 2) | STATUS, L3_ADDR_MODE );
 c10a820:	e3a00016 	mov	r0, #22
 c10a824:	e3a01000 	mov	r1, #0
 c10a828:	eb000180 	bl	c10ae30 <L3_putByte>
    L3_putByte( (1 << 6) | (2 << 4), L3_DATA_MODE );
 c10a82c:	e3a00060 	mov	r0, #96	; 0x60
 c10a830:	e3a01001 	mov	r1, #1
 c10a834:	eb00017d 	bl	c10ae30 <L3_putByte>
    L3_putByte( (2 << 4), L3_DATA_MODE );
 c10a838:	e3a00020 	mov	r0, #32
 c10a83c:	e3a01001 	mov	r1, #1
 c10a840:	eb00017a 	bl	c10ae30 <L3_putByte>

    L3_putByte( (ADDRESS << 2) | DATA0, L3_ADDR_MODE  ); 
 c10a844:	e3a00014 	mov	r0, #20
 c10a848:	e3a01000 	mov	r1, #0
 c10a84c:	eb000177 	bl	c10ae30 <L3_putByte>
    L3_putByte( EA | (2), L3_DATA_MODE ); 
 c10a850:	e3a000c2 	mov	r0, #194	; 0xc2
 c10a854:	e3a01001 	mov	r1, #1
 c10a858:	eb000174 	bl	c10ae30 <L3_putByte>
    L3_putByte( ED | 1, L3_DATA_MODE );
 c10a85c:	e3a000e1 	mov	r0, #225	; 0xe1
 c10a860:	e3a01001 	mov	r1, #1
 c10a864:	eb000171 	bl	c10ae30 <L3_putByte>
  
    uda1341ts_setvol( VOL_MED );
 c10a868:	e3a00020 	mov	r0, #32
 c10a86c:	eb00006a 	bl	c10aa1c <uda1341ts_setvol>

    uda1341ts_on( UDA_DAC );
 c10a870:	e3a00001 	mov	r0, #1
 c10a874:	eb00001b 	bl	c10a8e8 <uda1341ts_on>
    uda1341ts_on( UDA_ADC );
 c10a878:	e3a00002 	mov	r0, #2
 c10a87c:	eb000019 	bl	c10a8e8 <uda1341ts_on>
}
 c10a880:	e24bd00c 	sub	sp, fp, #12
 c10a884:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10a888:	e12fff1e 	bx	lr

0c10a88c <uda1341ts_mute>:

void uda1341ts_mute( uint8 on )
{
 c10a88c:	e1a0c00d 	mov	ip, sp
 c10a890:	e92dd800 	push	{fp, ip, lr, pc}
 c10a894:	e24cb004 	sub	fp, ip, #4
 c10a898:	e24dd008 	sub	sp, sp, #8
 c10a89c:	e1a03000 	mov	r3, r0
 c10a8a0:	e54b300d 	strb	r3, [fp, #-13]
    L3_putByte((ADDRESS << 2) | DATA0, L3_ADDR_MODE);
 c10a8a4:	e3a00014 	mov	r0, #20
 c10a8a8:	e3a01000 	mov	r1, #0
 c10a8ac:	eb00015f 	bl	c10ae30 <L3_putByte>
    L3_putByte(0x2 << 6 | ((on & 1) << 2), L3_DATA_MODE);
 c10a8b0:	e55b300d 	ldrb	r3, [fp, #-13]
 c10a8b4:	e2033001 	and	r3, r3, #1
 c10a8b8:	e1a03103 	lsl	r3, r3, #2
 c10a8bc:	e20330ff 	and	r3, r3, #255	; 0xff
 c10a8c0:	e1e03c83 	mvn	r3, r3, lsl #25
 c10a8c4:	e1e03ca3 	mvn	r3, r3, lsr #25
 c10a8c8:	e20330ff 	and	r3, r3, #255	; 0xff
 c10a8cc:	e20330ff 	and	r3, r3, #255	; 0xff
 c10a8d0:	e1a00003 	mov	r0, r3
 c10a8d4:	e3a01001 	mov	r1, #1
 c10a8d8:	eb000154 	bl	c10ae30 <L3_putByte>
};
 c10a8dc:	e24bd00c 	sub	sp, fp, #12
 c10a8e0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10a8e4:	e12fff1e 	bx	lr

0c10a8e8 <uda1341ts_on>:

void uda1341ts_on( uint8 converter )
{
 c10a8e8:	e1a0c00d 	mov	ip, sp
 c10a8ec:	e92dd800 	push	{fp, ip, lr, pc}
 c10a8f0:	e24cb004 	sub	fp, ip, #4
 c10a8f4:	e24dd008 	sub	sp, sp, #8
 c10a8f8:	e1a03000 	mov	r3, r0
 c10a8fc:	e54b300d 	strb	r3, [fp, #-13]
    state |= (1 << 7) | converter;
 c10a900:	e59f304c 	ldr	r3, [pc, #76]	; c10a954 <uda1341ts_on+0x6c>
 c10a904:	e5d32000 	ldrb	r2, [r3]
 c10a908:	e55b300d 	ldrb	r3, [fp, #-13]
 c10a90c:	e1823003 	orr	r3, r2, r3
 c10a910:	e20330ff 	and	r3, r3, #255	; 0xff
 c10a914:	e1e03c83 	mvn	r3, r3, lsl #25
 c10a918:	e1e03ca3 	mvn	r3, r3, lsr #25
 c10a91c:	e20320ff 	and	r2, r3, #255	; 0xff
 c10a920:	e59f302c 	ldr	r3, [pc, #44]	; c10a954 <uda1341ts_on+0x6c>
 c10a924:	e5c32000 	strb	r2, [r3]
    L3_putByte( (ADDRESS << 2) | STATUS, L3_ADDR_MODE );
 c10a928:	e3a00016 	mov	r0, #22
 c10a92c:	e3a01000 	mov	r1, #0
 c10a930:	eb00013e 	bl	c10ae30 <L3_putByte>
    L3_putByte(state, L3_DATA_MODE);
 c10a934:	e59f3018 	ldr	r3, [pc, #24]	; c10a954 <uda1341ts_on+0x6c>
 c10a938:	e5d33000 	ldrb	r3, [r3]
 c10a93c:	e1a00003 	mov	r0, r3
 c10a940:	e3a01001 	mov	r1, #1
 c10a944:	eb000139 	bl	c10ae30 <L3_putByte>
}
 c10a948:	e24bd00c 	sub	sp, fp, #12
 c10a94c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10a950:	e12fff1e 	bx	lr
 c10a954:	0c10efb7 	.word	0x0c10efb7

0c10a958 <uda1341ts_off>:

void uda1341ts_off( uint8 converter )
{
 c10a958:	e1a0c00d 	mov	ip, sp
 c10a95c:	e92dd800 	push	{fp, ip, lr, pc}
 c10a960:	e24cb004 	sub	fp, ip, #4
 c10a964:	e24dd008 	sub	sp, sp, #8
 c10a968:	e1a03000 	mov	r3, r0
 c10a96c:	e54b300d 	strb	r3, [fp, #-13]
    state &= ~converter;
 c10a970:	e55b300d 	ldrb	r3, [fp, #-13]
 c10a974:	e1e03003 	mvn	r3, r3
 c10a978:	e20320ff 	and	r2, r3, #255	; 0xff
 c10a97c:	e59f3044 	ldr	r3, [pc, #68]	; c10a9c8 <uda1341ts_off+0x70>
 c10a980:	e5d33000 	ldrb	r3, [r3]
 c10a984:	e20330ff 	and	r3, r3, #255	; 0xff
 c10a988:	e0023003 	and	r3, r2, r3
 c10a98c:	e20330ff 	and	r3, r3, #255	; 0xff
 c10a990:	e20320ff 	and	r2, r3, #255	; 0xff
 c10a994:	e59f302c 	ldr	r3, [pc, #44]	; c10a9c8 <uda1341ts_off+0x70>
 c10a998:	e5c32000 	strb	r2, [r3]
    L3_putByte( (ADDRESS << 2) | STATUS, L3_ADDR_MODE );
 c10a99c:	e3a00016 	mov	r0, #22
 c10a9a0:	e3a01000 	mov	r1, #0
 c10a9a4:	eb000121 	bl	c10ae30 <L3_putByte>
    L3_putByte(state, L3_DATA_MODE);
 c10a9a8:	e59f3018 	ldr	r3, [pc, #24]	; c10a9c8 <uda1341ts_off+0x70>
 c10a9ac:	e5d33000 	ldrb	r3, [r3]
 c10a9b0:	e1a00003 	mov	r0, r3
 c10a9b4:	e3a01001 	mov	r1, #1
 c10a9b8:	eb00011c 	bl	c10ae30 <L3_putByte>
}
 c10a9bc:	e24bd00c 	sub	sp, fp, #12
 c10a9c0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10a9c4:	e12fff1e 	bx	lr
 c10a9c8:	0c10efb7 	.word	0x0c10efb7

0c10a9cc <uda1341ts_status>:

uint8 uda1341ts_status( uint8 converter )
{
 c10a9cc:	e1a0c00d 	mov	ip, sp
 c10a9d0:	e92dd800 	push	{fp, ip, lr, pc}
 c10a9d4:	e24cb004 	sub	fp, ip, #4
 c10a9d8:	e24dd008 	sub	sp, sp, #8
 c10a9dc:	e1a03000 	mov	r3, r0
 c10a9e0:	e54b300d 	strb	r3, [fp, #-13]
    return (state >> (converter - 1)) & 1;
 c10a9e4:	e59f302c 	ldr	r3, [pc, #44]	; c10aa18 <uda1341ts_status+0x4c>
 c10a9e8:	e5d33000 	ldrb	r3, [r3]
 c10a9ec:	e1a02003 	mov	r2, r3
 c10a9f0:	e55b300d 	ldrb	r3, [fp, #-13]
 c10a9f4:	e2433001 	sub	r3, r3, #1
 c10a9f8:	e1a03352 	asr	r3, r2, r3
 c10a9fc:	e20330ff 	and	r3, r3, #255	; 0xff
 c10aa00:	e2033001 	and	r3, r3, #1
 c10aa04:	e20330ff 	and	r3, r3, #255	; 0xff
}
 c10aa08:	e1a00003 	mov	r0, r3
 c10aa0c:	e24bd00c 	sub	sp, fp, #12
 c10aa10:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10aa14:	e12fff1e 	bx	lr
 c10aa18:	0c10efb7 	.word	0x0c10efb7

0c10aa1c <uda1341ts_setvol>:

void uda1341ts_setvol( uint8 vol )
{
 c10aa1c:	e1a0c00d 	mov	ip, sp
 c10aa20:	e92dd800 	push	{fp, ip, lr, pc}
 c10aa24:	e24cb004 	sub	fp, ip, #4
 c10aa28:	e24dd008 	sub	sp, sp, #8
 c10aa2c:	e1a03000 	mov	r3, r0
 c10aa30:	e54b300d 	strb	r3, [fp, #-13]
    L3_putByte((ADDRESS << 2) | DATA0, L3_ADDR_MODE);
 c10aa34:	e3a00014 	mov	r0, #20
 c10aa38:	e3a01000 	mov	r1, #0
 c10aa3c:	eb0000fb 	bl	c10ae30 <L3_putByte>
    L3_putByte(0x3F & (0x3F - vol), L3_DATA_MODE);
 c10aa40:	e55b300d 	ldrb	r3, [fp, #-13]
 c10aa44:	e263303f 	rsb	r3, r3, #63	; 0x3f
 c10aa48:	e20330ff 	and	r3, r3, #255	; 0xff
 c10aa4c:	e203303f 	and	r3, r3, #63	; 0x3f
 c10aa50:	e20330ff 	and	r3, r3, #255	; 0xff
 c10aa54:	e1a00003 	mov	r0, r3
 c10aa58:	e3a01001 	mov	r1, #1
 c10aa5c:	eb0000f3 	bl	c10ae30 <L3_putByte>
    volume = vol;
 c10aa60:	e59f3010 	ldr	r3, [pc, #16]	; c10aa78 <uda1341ts_setvol+0x5c>
 c10aa64:	e55b200d 	ldrb	r2, [fp, #-13]
 c10aa68:	e5c32000 	strb	r2, [r3]
};
 c10aa6c:	e24bd00c 	sub	sp, fp, #12
 c10aa70:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10aa74:	e12fff1e 	bx	lr
 c10aa78:	0c10efb6 	.word	0x0c10efb6

0c10aa7c <uda1341ts_getvol>:

uint8 uda1341ts_getvol( void )
{
 c10aa7c:	e1a0c00d 	mov	ip, sp
 c10aa80:	e92dd800 	push	{fp, ip, lr, pc}
 c10aa84:	e24cb004 	sub	fp, ip, #4
    return volume;
 c10aa88:	e59f3010 	ldr	r3, [pc, #16]	; c10aaa0 <uda1341ts_getvol+0x24>
 c10aa8c:	e5d33000 	ldrb	r3, [r3]
};
 c10aa90:	e1a00003 	mov	r0, r3
 c10aa94:	e24bd00c 	sub	sp, fp, #12
 c10aa98:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10aa9c:	e12fff1e 	bx	lr
 c10aaa0:	0c10efb6 	.word	0x0c10efb6

0c10aaa4 <adc_init>:
static uint8 state;

extern void isr_ADC_dummy( void );

void adc_init( void )
{
 c10aaa4:	e1a0c00d 	mov	ip, sp
 c10aaa8:	e92dd800 	push	{fp, ip, lr, pc}
 c10aaac:	e24cb004 	sub	fp, ip, #4
    ADCPSR = 19;
 c10aab0:	e59f3014 	ldr	r3, [pc, #20]	; c10aacc <adc_init+0x28>
 c10aab4:	e3a02013 	mov	r2, #19
 c10aab8:	e5832000 	str	r2, [r3]
    adc_off();
 c10aabc:	eb000014 	bl	c10ab14 <adc_off>
}
 c10aac0:	e24bd00c 	sub	sp, fp, #12
 c10aac4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10aac8:	e12fff1e 	bx	lr
 c10aacc:	01d40004 	.word	0x01d40004

0c10aad0 <adc_on>:

void adc_on( void )
{
 c10aad0:	e1a0c00d 	mov	ip, sp
 c10aad4:	e92dd800 	push	{fp, ip, lr, pc}
 c10aad8:	e24cb004 	sub	fp, ip, #4
    ADCCON &= ~(1 << 5);
 c10aadc:	e3a03775 	mov	r3, #30670848	; 0x1d40000
 c10aae0:	e3a02775 	mov	r2, #30670848	; 0x1d40000
 c10aae4:	e5922000 	ldr	r2, [r2]
 c10aae8:	e3c22020 	bic	r2, r2, #32
 c10aaec:	e5832000 	str	r2, [r3]
    sw_delay_ms( 10 );
 c10aaf0:	e3a0000a 	mov	r0, #10
 c10aaf4:	ebfff996 	bl	c109154 <sw_delay_ms>
    state = ON;
 c10aaf8:	e59f3010 	ldr	r3, [pc, #16]	; c10ab10 <adc_on+0x40>
 c10aafc:	e3a02001 	mov	r2, #1
 c10ab00:	e5c32000 	strb	r2, [r3]
}
 c10ab04:	e24bd00c 	sub	sp, fp, #12
 c10ab08:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10ab0c:	e12fff1e 	bx	lr
 c10ab10:	0c10efb8 	.word	0x0c10efb8

0c10ab14 <adc_off>:

void adc_off( void )
{
 c10ab14:	e1a0c00d 	mov	ip, sp
 c10ab18:	e92dd800 	push	{fp, ip, lr, pc}
 c10ab1c:	e24cb004 	sub	fp, ip, #4
    ADCCON |= (1 << 5);
 c10ab20:	e3a03775 	mov	r3, #30670848	; 0x1d40000
 c10ab24:	e3a02775 	mov	r2, #30670848	; 0x1d40000
 c10ab28:	e5922000 	ldr	r2, [r2]
 c10ab2c:	e3822020 	orr	r2, r2, #32
 c10ab30:	e5832000 	str	r2, [r3]
    state = OFF;
 c10ab34:	e59f3010 	ldr	r3, [pc, #16]	; c10ab4c <adc_off+0x38>
 c10ab38:	e3a02000 	mov	r2, #0
 c10ab3c:	e5c32000 	strb	r2, [r3]
}
 c10ab40:	e24bd00c 	sub	sp, fp, #12
 c10ab44:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10ab48:	e12fff1e 	bx	lr
 c10ab4c:	0c10efb8 	.word	0x0c10efb8

0c10ab50 <adc_status>:

uint8 adc_status( void )
{
 c10ab50:	e1a0c00d 	mov	ip, sp
 c10ab54:	e92dd800 	push	{fp, ip, lr, pc}
 c10ab58:	e24cb004 	sub	fp, ip, #4
    return state;
 c10ab5c:	e59f3010 	ldr	r3, [pc, #16]	; c10ab74 <adc_status+0x24>
 c10ab60:	e5d33000 	ldrb	r3, [r3]
}
 c10ab64:	e1a00003 	mov	r0, r3
 c10ab68:	e24bd00c 	sub	sp, fp, #12
 c10ab6c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10ab70:	e12fff1e 	bx	lr
 c10ab74:	0c10efb8 	.word	0x0c10efb8

0c10ab78 <adc_getSample>:

uint16 adc_getSample( uint8 ch )
{
 c10ab78:	e1a0c00d 	mov	ip, sp
 c10ab7c:	e92dd800 	push	{fp, ip, lr, pc}
 c10ab80:	e24cb004 	sub	fp, ip, #4
 c10ab84:	e24dd010 	sub	sp, sp, #16
 c10ab88:	e1a03000 	mov	r3, r0
 c10ab8c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    uint32 sample;
    uint8 i;
    
    ADCCON = (1 << 0) | (0 << 1) | (ch & 0x3) << 2;
 c10ab90:	e3a03775 	mov	r3, #30670848	; 0x1d40000
 c10ab94:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
 c10ab98:	e2022003 	and	r2, r2, #3
 c10ab9c:	e1a02102 	lsl	r2, r2, #2
 c10aba0:	e3822001 	orr	r2, r2, #1
 c10aba4:	e5832000 	str	r2, [r3]
    sw_delay_ms( 10 );
 c10aba8:	e3a0000a 	mov	r0, #10
 c10abac:	ebfff968 	bl	c109154 <sw_delay_ms>
    for( i=0, sample=0; i<5; i++ )
 c10abb0:	e3a03000 	mov	r3, #0
 c10abb4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
 c10abb8:	e3a03000 	mov	r3, #0
 c10abbc:	e50b3010 	str	r3, [fp, #-16]
 c10abc0:	ea00001b 	b	c10ac34 <adc_getSample+0xbc>
    {
        ADCCON |= (1 << 0);
 c10abc4:	e3a03775 	mov	r3, #30670848	; 0x1d40000
 c10abc8:	e3a02775 	mov	r2, #30670848	; 0x1d40000
 c10abcc:	e5922000 	ldr	r2, [r2]
 c10abd0:	e3822001 	orr	r2, r2, #1
 c10abd4:	e5832000 	str	r2, [r3]
        while(ADCCON & (1 << 0));
 c10abd8:	e1a00000 	nop			; (mov r0, r0)
 c10abdc:	e3a03775 	mov	r3, #30670848	; 0x1d40000
 c10abe0:	e5933000 	ldr	r3, [r3]
 c10abe4:	e2033001 	and	r3, r3, #1
 c10abe8:	e20330ff 	and	r3, r3, #255	; 0xff
 c10abec:	e3530000 	cmp	r3, #0
 c10abf0:	1afffff9 	bne	c10abdc <adc_getSample+0x64>
        while(!(ADCCON & (1 << 6)));
 c10abf4:	e1a00000 	nop			; (mov r0, r0)
 c10abf8:	e3a03775 	mov	r3, #30670848	; 0x1d40000
 c10abfc:	e5933000 	ldr	r3, [r3]
 c10ac00:	e2033040 	and	r3, r3, #64	; 0x40
 c10ac04:	e3530000 	cmp	r3, #0
 c10ac08:	0afffffa 	beq	c10abf8 <adc_getSample+0x80>
        sample += ADCDAT & 0x3ff;
 c10ac0c:	e59f3054 	ldr	r3, [pc, #84]	; c10ac68 <adc_getSample+0xf0>
 c10ac10:	e5933000 	ldr	r3, [r3]
 c10ac14:	e1a03b03 	lsl	r3, r3, #22
 c10ac18:	e1a03b23 	lsr	r3, r3, #22
 c10ac1c:	e51b2010 	ldr	r2, [fp, #-16]
 c10ac20:	e0823003 	add	r3, r2, r3
 c10ac24:	e50b3010 	str	r3, [fp, #-16]
    uint32 sample;
    uint8 i;
    
    ADCCON = (1 << 0) | (0 << 1) | (ch & 0x3) << 2;
    sw_delay_ms( 10 );
    for( i=0, sample=0; i<5; i++ )
 c10ac28:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10ac2c:	e2833001 	add	r3, r3, #1
 c10ac30:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
 c10ac34:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10ac38:	e3530004 	cmp	r3, #4
 c10ac3c:	9affffe0 	bls	c10abc4 <adc_getSample+0x4c>
        ADCCON |= (1 << 0);
        while(ADCCON & (1 << 0));
        while(!(ADCCON & (1 << 6)));
        sample += ADCDAT & 0x3ff;
    }
    return sample / 5;
 c10ac40:	e51b2010 	ldr	r2, [fp, #-16]
 c10ac44:	e59f3020 	ldr	r3, [pc, #32]	; c10ac6c <adc_getSample+0xf4>
 c10ac48:	e0831392 	umull	r1, r3, r2, r3
 c10ac4c:	e1a03123 	lsr	r3, r3, #2
 c10ac50:	e1a03803 	lsl	r3, r3, #16
 c10ac54:	e1a03823 	lsr	r3, r3, #16
}
 c10ac58:	e1a00003 	mov	r0, r3
 c10ac5c:	e24bd00c 	sub	sp, fp, #12
 c10ac60:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10ac64:	e12fff1e 	bx	lr
 c10ac68:	01d40008 	.word	0x01d40008
 c10ac6c:	cccccccd 	.word	0xcccccccd

0c10ac70 <adc_open>:

void adc_open( void (*isr)(void) )
{
 c10ac70:	e1a0c00d 	mov	ip, sp
 c10ac74:	e92dd800 	push	{fp, ip, lr, pc}
 c10ac78:	e24cb004 	sub	fp, ip, #4
 c10ac7c:	e24dd008 	sub	sp, sp, #8
 c10ac80:	e50b0010 	str	r0, [fp, #-16]
    pISR_ADC = (uint32)isr;
 c10ac84:	e59f3030 	ldr	r3, [pc, #48]	; c10acbc <adc_open+0x4c>
 c10ac88:	e51b2010 	ldr	r2, [fp, #-16]
 c10ac8c:	e5832000 	str	r2, [r3]
    I_ISPC   = BIT_ADC;
 c10ac90:	e59f3028 	ldr	r3, [pc, #40]	; c10acc0 <adc_open+0x50>
 c10ac94:	e3a02001 	mov	r2, #1
 c10ac98:	e5832000 	str	r2, [r3]
    INTMSK  &= ~(BIT_GLOBAL | BIT_ADC );
 c10ac9c:	e59f3020 	ldr	r3, [pc, #32]	; c10acc4 <adc_open+0x54>
 c10aca0:	e59f201c 	ldr	r2, [pc, #28]	; c10acc4 <adc_open+0x54>
 c10aca4:	e5922000 	ldr	r2, [r2]
 c10aca8:	e3c22341 	bic	r2, r2, #67108865	; 0x4000001
 c10acac:	e5832000 	str	r2, [r3]
}
 c10acb0:	e24bd00c 	sub	sp, fp, #12
 c10acb4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10acb8:	e12fff1e 	bx	lr
 c10acbc:	0c7fff20 	.word	0x0c7fff20
 c10acc0:	01e00024 	.word	0x01e00024
 c10acc4:	01e0000c 	.word	0x01e0000c

0c10acc8 <adc_close>:

void adc_close( void )
{
 c10acc8:	e1a0c00d 	mov	ip, sp
 c10accc:	e92dd800 	push	{fp, ip, lr, pc}
 c10acd0:	e24cb004 	sub	fp, ip, #4
    INTMSK  |= BIT_ADC;
 c10acd4:	e59f3024 	ldr	r3, [pc, #36]	; c10ad00 <adc_close+0x38>
 c10acd8:	e59f2020 	ldr	r2, [pc, #32]	; c10ad00 <adc_close+0x38>
 c10acdc:	e5922000 	ldr	r2, [r2]
 c10ace0:	e3822001 	orr	r2, r2, #1
 c10ace4:	e5832000 	str	r2, [r3]
    pISR_ADC = (uint32)isr_ADC_dummy;
 c10ace8:	e59f3014 	ldr	r3, [pc, #20]	; c10ad04 <adc_close+0x3c>
 c10acec:	e59f2014 	ldr	r2, [pc, #20]	; c10ad08 <adc_close+0x40>
 c10acf0:	e5832000 	str	r2, [r3]
}
 c10acf4:	e24bd00c 	sub	sp, fp, #12
 c10acf8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10acfc:	e12fff1e 	bx	lr
 c10ad00:	01e0000c 	.word	0x01e0000c
 c10ad04:	0c7fff20 	.word	0x0c7fff20
 c10ad08:	0c108600 	.word	0x0c108600

0c10ad0c <bdma0_init>:
#include <dma.h>

extern void isr_BDMA0_dummy( void ); 

void bdma0_init( void )
{
 c10ad0c:	e1a0c00d 	mov	ip, sp
 c10ad10:	e92dd800 	push	{fp, ip, lr, pc}
 c10ad14:	e24cb004 	sub	fp, ip, #4
    BDCON0  = 0;
 c10ad18:	e3a0377e 	mov	r3, #33030144	; 0x1f80000
 c10ad1c:	e3a02000 	mov	r2, #0
 c10ad20:	e5832000 	str	r2, [r3]
    BDISRC0 = 0;
 c10ad24:	e59f3028 	ldr	r3, [pc, #40]	; c10ad54 <bdma0_init+0x48>
 c10ad28:	e3a02000 	mov	r2, #0
 c10ad2c:	e5832000 	str	r2, [r3]
    BDIDES0 = 0;
 c10ad30:	e59f3020 	ldr	r3, [pc, #32]	; c10ad58 <bdma0_init+0x4c>
 c10ad34:	e3a02000 	mov	r2, #0
 c10ad38:	e5832000 	str	r2, [r3]
    BDICNT0 = 0;
 c10ad3c:	e59f3018 	ldr	r3, [pc, #24]	; c10ad5c <bdma0_init+0x50>
 c10ad40:	e3a02000 	mov	r2, #0
 c10ad44:	e5832000 	str	r2, [r3]
}
 c10ad48:	e24bd00c 	sub	sp, fp, #12
 c10ad4c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10ad50:	e12fff1e 	bx	lr
 c10ad54:	01f80004 	.word	0x01f80004
 c10ad58:	01f80008 	.word	0x01f80008
 c10ad5c:	01f8000c 	.word	0x01f8000c

0c10ad60 <bdma0_open>:

void bdma0_open( void (*isr)(void) )
{
 c10ad60:	e1a0c00d 	mov	ip, sp
 c10ad64:	e92dd800 	push	{fp, ip, lr, pc}
 c10ad68:	e24cb004 	sub	fp, ip, #4
 c10ad6c:	e24dd008 	sub	sp, sp, #8
 c10ad70:	e50b0010 	str	r0, [fp, #-16]
    pISR_BDMA0 = (uint32)isr;
 c10ad74:	e59f3034 	ldr	r3, [pc, #52]	; c10adb0 <bdma0_open+0x50>
 c10ad78:	e51b2010 	ldr	r2, [fp, #-16]
 c10ad7c:	e5832000 	str	r2, [r3]
    I_ISPC     = BIT_BDMA0;
 c10ad80:	e59f302c 	ldr	r3, [pc, #44]	; c10adb4 <bdma0_open+0x54>
 c10ad84:	e3a02802 	mov	r2, #131072	; 0x20000
 c10ad88:	e5832000 	str	r2, [r3]
    INTMSK    &= ~(BIT_GLOBAL | BIT_BDMA0 );
 c10ad8c:	e59f2024 	ldr	r2, [pc, #36]	; c10adb8 <bdma0_open+0x58>
 c10ad90:	e59f3020 	ldr	r3, [pc, #32]	; c10adb8 <bdma0_open+0x58>
 c10ad94:	e5933000 	ldr	r3, [r3]
 c10ad98:	e3c33301 	bic	r3, r3, #67108864	; 0x4000000
 c10ad9c:	e3c33802 	bic	r3, r3, #131072	; 0x20000
 c10ada0:	e5823000 	str	r3, [r2]
}
 c10ada4:	e24bd00c 	sub	sp, fp, #12
 c10ada8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10adac:	e12fff1e 	bx	lr
 c10adb0:	0c7fff64 	.word	0x0c7fff64
 c10adb4:	01e00024 	.word	0x01e00024
 c10adb8:	01e0000c 	.word	0x01e0000c

0c10adbc <bdma0_close>:

void bdma0_close( void )
{
 c10adbc:	e1a0c00d 	mov	ip, sp
 c10adc0:	e92dd800 	push	{fp, ip, lr, pc}
 c10adc4:	e24cb004 	sub	fp, ip, #4
    INTMSK    |= BIT_BDMA0;
 c10adc8:	e59f3024 	ldr	r3, [pc, #36]	; c10adf4 <bdma0_close+0x38>
 c10adcc:	e59f2020 	ldr	r2, [pc, #32]	; c10adf4 <bdma0_close+0x38>
 c10add0:	e5922000 	ldr	r2, [r2]
 c10add4:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c10add8:	e5832000 	str	r2, [r3]
    pISR_BDMA0 = (uint32)isr_BDMA0_dummy;
 c10addc:	e59f3014 	ldr	r3, [pc, #20]	; c10adf8 <bdma0_close+0x3c>
 c10ade0:	e59f2014 	ldr	r2, [pc, #20]	; c10adfc <bdma0_close+0x40>
 c10ade4:	e5832000 	str	r2, [r3]
}
 c10ade8:	e24bd00c 	sub	sp, fp, #12
 c10adec:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10adf0:	e12fff1e 	bx	lr
 c10adf4:	01e0000c 	.word	0x01e0000c
 c10adf8:	0c7fff64 	.word	0x0c7fff64
 c10adfc:	0c1088ec 	.word	0x0c1088ec

0c10ae00 <L3_init>:
#include <leds.h>

#define SHORT_DELAY    { int8 j; for( j=0; j<4; j++ ); }

void L3_init( void )
{
 c10ae00:	e1a0c00d 	mov	ip, sp
 c10ae04:	e92dd800 	push	{fp, ip, lr, pc}
 c10ae08:	e24cb004 	sub	fp, ip, #4
	 PDATB |= (L3_DATA_MODE << 4) | (1 << 5);
 c10ae0c:	e59f3018 	ldr	r3, [pc, #24]	; c10ae2c <L3_init+0x2c>
 c10ae10:	e59f2014 	ldr	r2, [pc, #20]	; c10ae2c <L3_init+0x2c>
 c10ae14:	e5922000 	ldr	r2, [r2]
 c10ae18:	e3822030 	orr	r2, r2, #48	; 0x30
 c10ae1c:	e5832000 	str	r2, [r3]
}
 c10ae20:	e24bd00c 	sub	sp, fp, #12
 c10ae24:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10ae28:	e12fff1e 	bx	lr
 c10ae2c:	01d2000c 	.word	0x01d2000c

0c10ae30 <L3_putByte>:

void L3_putByte( uint8 byte, uint8 mode )
{
 c10ae30:	e1a0c00d 	mov	ip, sp
 c10ae34:	e92dd800 	push	{fp, ip, lr, pc}
 c10ae38:	e24cb004 	sub	fp, ip, #4
 c10ae3c:	e24dd010 	sub	sp, sp, #16
 c10ae40:	e1a02000 	mov	r2, r0
 c10ae44:	e1a03001 	mov	r3, r1
 c10ae48:	e54b2015 	strb	r2, [fp, #-21]	; 0xffffffeb
 c10ae4c:	e54b3016 	strb	r3, [fp, #-22]	; 0xffffffea
    uint8 i;
    uint8 rled, lled;
    
    rled = !led_status( RIGHT_LED );
 c10ae50:	e3a00002 	mov	r0, #2
 c10ae54:	ebfff0e5 	bl	c1071f0 <led_status>
 c10ae58:	e1a03000 	mov	r3, r0
 c10ae5c:	e3530000 	cmp	r3, #0
 c10ae60:	13a03000 	movne	r3, #0
 c10ae64:	03a03001 	moveq	r3, #1
 c10ae68:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    lled = !led_status( LEFT_LED );    
 c10ae6c:	e3a00001 	mov	r0, #1
 c10ae70:	ebfff0de 	bl	c1071f0 <led_status>
 c10ae74:	e1a03000 	mov	r3, r0
 c10ae78:	e3530000 	cmp	r3, #0
 c10ae7c:	13a03000 	movne	r3, #0
 c10ae80:	03a03001 	moveq	r3, #1
 c10ae84:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
   
    PDATB = (1 << 5) | (mode << 4);
 c10ae88:	e59f3114 	ldr	r3, [pc, #276]	; c10afa4 <L3_putByte+0x174>
 c10ae8c:	e55b2016 	ldrb	r2, [fp, #-22]	; 0xffffffea
 c10ae90:	e1a02202 	lsl	r2, r2, #4
 c10ae94:	e3822020 	orr	r2, r2, #32
 c10ae98:	e5832000 	str	r2, [r3]
    SHORT_DELAY;
 c10ae9c:	e3a03000 	mov	r3, #0
 c10aea0:	e54b300e 	strb	r3, [fp, #-14]
 c10aea4:	ea000002 	b	c10aeb4 <L3_putByte+0x84>
 c10aea8:	e55b300e 	ldrb	r3, [fp, #-14]
 c10aeac:	e2833001 	add	r3, r3, #1
 c10aeb0:	e54b300e 	strb	r3, [fp, #-14]
 c10aeb4:	e15b30de 	ldrsb	r3, [fp, #-14]
 c10aeb8:	e3530003 	cmp	r3, #3
 c10aebc:	dafffff9 	ble	c10aea8 <L3_putByte+0x78>

    for( i=0; i<8; i++ )
 c10aec0:	e3a03000 	mov	r3, #0
 c10aec4:	e54b300d 	strb	r3, [fp, #-13]
 c10aec8:	ea000027 	b	c10af6c <L3_putByte+0x13c>
    {
    	PDATB = (0 << 5) | (mode << 4);
 c10aecc:	e59f30d0 	ldr	r3, [pc, #208]	; c10afa4 <L3_putByte+0x174>
 c10aed0:	e55b2016 	ldrb	r2, [fp, #-22]	; 0xffffffea
 c10aed4:	e1a02202 	lsl	r2, r2, #4
 c10aed8:	e5832000 	str	r2, [r3]
		PDATA = (byte & (1 << i)) << (9 - i);
 c10aedc:	e59f30c4 	ldr	r3, [pc, #196]	; c10afa8 <L3_putByte+0x178>
 c10aee0:	e55b1015 	ldrb	r1, [fp, #-21]	; 0xffffffeb
 c10aee4:	e55b200d 	ldrb	r2, [fp, #-13]
 c10aee8:	e3a00001 	mov	r0, #1
 c10aeec:	e1a02210 	lsl	r2, r0, r2
 c10aef0:	e0011002 	and	r1, r1, r2
 c10aef4:	e55b200d 	ldrb	r2, [fp, #-13]
 c10aef8:	e2622009 	rsb	r2, r2, #9
 c10aefc:	e1a02211 	lsl	r2, r1, r2
 c10af00:	e5832000 	str	r2, [r3]
		SHORT_DELAY;
 c10af04:	e3a03000 	mov	r3, #0
 c10af08:	e54b300f 	strb	r3, [fp, #-15]
 c10af0c:	ea000002 	b	c10af1c <L3_putByte+0xec>
 c10af10:	e55b300f 	ldrb	r3, [fp, #-15]
 c10af14:	e2833001 	add	r3, r3, #1
 c10af18:	e54b300f 	strb	r3, [fp, #-15]
 c10af1c:	e15b30df 	ldrsb	r3, [fp, #-15]
 c10af20:	e3530003 	cmp	r3, #3
 c10af24:	dafffff9 	ble	c10af10 <L3_putByte+0xe0>
		PDATB = (1 << 5) | (mode << 4);
 c10af28:	e59f3074 	ldr	r3, [pc, #116]	; c10afa4 <L3_putByte+0x174>
 c10af2c:	e55b2016 	ldrb	r2, [fp, #-22]	; 0xffffffea
 c10af30:	e1a02202 	lsl	r2, r2, #4
 c10af34:	e3822020 	orr	r2, r2, #32
 c10af38:	e5832000 	str	r2, [r3]
		SHORT_DELAY;
 c10af3c:	e3a03000 	mov	r3, #0
 c10af40:	e54b3010 	strb	r3, [fp, #-16]
 c10af44:	ea000002 	b	c10af54 <L3_putByte+0x124>
 c10af48:	e55b3010 	ldrb	r3, [fp, #-16]
 c10af4c:	e2833001 	add	r3, r3, #1
 c10af50:	e54b3010 	strb	r3, [fp, #-16]
 c10af54:	e15b31d0 	ldrsb	r3, [fp, #-16]
 c10af58:	e3530003 	cmp	r3, #3
 c10af5c:	dafffff9 	ble	c10af48 <L3_putByte+0x118>
    lled = !led_status( LEFT_LED );    
   
    PDATB = (1 << 5) | (mode << 4);
    SHORT_DELAY;

    for( i=0; i<8; i++ )
 c10af60:	e55b300d 	ldrb	r3, [fp, #-13]
 c10af64:	e2833001 	add	r3, r3, #1
 c10af68:	e54b300d 	strb	r3, [fp, #-13]
 c10af6c:	e55b300d 	ldrb	r3, [fp, #-13]
 c10af70:	e3530007 	cmp	r3, #7
 c10af74:	9affffd4 	bls	c10aecc <L3_putByte+0x9c>
		PDATA = (byte & (1 << i)) << (9 - i);
		SHORT_DELAY;
		PDATB = (1 << 5) | (mode << 4);
		SHORT_DELAY;
    }
    PDATB = (rled << 10) | (lled << 9) | (1 << 5) | (1 << 4);   
 c10af78:	e59f3024 	ldr	r3, [pc, #36]	; c10afa4 <L3_putByte+0x174>
 c10af7c:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
 c10af80:	e1a01502 	lsl	r1, r2, #10
 c10af84:	e55b2012 	ldrb	r2, [fp, #-18]	; 0xffffffee
 c10af88:	e1a02482 	lsl	r2, r2, #9
 c10af8c:	e1812002 	orr	r2, r1, r2
 c10af90:	e3822030 	orr	r2, r2, #48	; 0x30
 c10af94:	e5832000 	str	r2, [r3]
}
 c10af98:	e24bd00c 	sub	sp, fp, #12
 c10af9c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10afa0:	e12fff1e 	bx	lr
 c10afa4:	01d2000c 	.word	0x01d2000c
 c10afa8:	01d20004 	.word	0x01d20004

0c10afac <__aeabi_uidiv>:
 c10afac:	e2512001 	subs	r2, r1, #1
 c10afb0:	012fff1e 	bxeq	lr
 c10afb4:	3a000036 	bcc	c10b094 <__aeabi_uidiv+0xe8>
 c10afb8:	e1500001 	cmp	r0, r1
 c10afbc:	9a000022 	bls	c10b04c <__aeabi_uidiv+0xa0>
 c10afc0:	e1110002 	tst	r1, r2
 c10afc4:	0a000023 	beq	c10b058 <__aeabi_uidiv+0xac>
 c10afc8:	e311020e 	tst	r1, #-536870912	; 0xe0000000
 c10afcc:	01a01181 	lsleq	r1, r1, #3
 c10afd0:	03a03008 	moveq	r3, #8
 c10afd4:	13a03001 	movne	r3, #1
 c10afd8:	e3510201 	cmp	r1, #268435456	; 0x10000000
 c10afdc:	31510000 	cmpcc	r1, r0
 c10afe0:	31a01201 	lslcc	r1, r1, #4
 c10afe4:	31a03203 	lslcc	r3, r3, #4
 c10afe8:	3afffffa 	bcc	c10afd8 <__aeabi_uidiv+0x2c>
 c10afec:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 c10aff0:	31510000 	cmpcc	r1, r0
 c10aff4:	31a01081 	lslcc	r1, r1, #1
 c10aff8:	31a03083 	lslcc	r3, r3, #1
 c10affc:	3afffffa 	bcc	c10afec <__aeabi_uidiv+0x40>
 c10b000:	e3a02000 	mov	r2, #0
 c10b004:	e1500001 	cmp	r0, r1
 c10b008:	20400001 	subcs	r0, r0, r1
 c10b00c:	21822003 	orrcs	r2, r2, r3
 c10b010:	e15000a1 	cmp	r0, r1, lsr #1
 c10b014:	204000a1 	subcs	r0, r0, r1, lsr #1
 c10b018:	218220a3 	orrcs	r2, r2, r3, lsr #1
 c10b01c:	e1500121 	cmp	r0, r1, lsr #2
 c10b020:	20400121 	subcs	r0, r0, r1, lsr #2
 c10b024:	21822123 	orrcs	r2, r2, r3, lsr #2
 c10b028:	e15001a1 	cmp	r0, r1, lsr #3
 c10b02c:	204001a1 	subcs	r0, r0, r1, lsr #3
 c10b030:	218221a3 	orrcs	r2, r2, r3, lsr #3
 c10b034:	e3500000 	cmp	r0, #0
 c10b038:	11b03223 	lsrsne	r3, r3, #4
 c10b03c:	11a01221 	lsrne	r1, r1, #4
 c10b040:	1affffef 	bne	c10b004 <__aeabi_uidiv+0x58>
 c10b044:	e1a00002 	mov	r0, r2
 c10b048:	e12fff1e 	bx	lr
 c10b04c:	03a00001 	moveq	r0, #1
 c10b050:	13a00000 	movne	r0, #0
 c10b054:	e12fff1e 	bx	lr
 c10b058:	e3510801 	cmp	r1, #65536	; 0x10000
 c10b05c:	21a01821 	lsrcs	r1, r1, #16
 c10b060:	23a02010 	movcs	r2, #16
 c10b064:	33a02000 	movcc	r2, #0
 c10b068:	e3510c01 	cmp	r1, #256	; 0x100
 c10b06c:	21a01421 	lsrcs	r1, r1, #8
 c10b070:	22822008 	addcs	r2, r2, #8
 c10b074:	e3510010 	cmp	r1, #16
 c10b078:	21a01221 	lsrcs	r1, r1, #4
 c10b07c:	22822004 	addcs	r2, r2, #4
 c10b080:	e3510004 	cmp	r1, #4
 c10b084:	82822003 	addhi	r2, r2, #3
 c10b088:	908220a1 	addls	r2, r2, r1, lsr #1
 c10b08c:	e1a00230 	lsr	r0, r0, r2
 c10b090:	e12fff1e 	bx	lr
 c10b094:	e3500000 	cmp	r0, #0
 c10b098:	13e00000 	mvnne	r0, #0
 c10b09c:	ea000059 	b	c10b208 <__aeabi_idiv0>

0c10b0a0 <__aeabi_uidivmod>:
 c10b0a0:	e3510000 	cmp	r1, #0
 c10b0a4:	0afffffa 	beq	c10b094 <__aeabi_uidiv+0xe8>
 c10b0a8:	e92d4003 	push	{r0, r1, lr}
 c10b0ac:	ebffffbe 	bl	c10afac <__aeabi_uidiv>
 c10b0b0:	e8bd4006 	pop	{r1, r2, lr}
 c10b0b4:	e0030092 	mul	r3, r2, r0
 c10b0b8:	e0411003 	sub	r1, r1, r3
 c10b0bc:	e12fff1e 	bx	lr

0c10b0c0 <__aeabi_idiv>:
 c10b0c0:	e3510000 	cmp	r1, #0
 c10b0c4:	0a000043 	beq	c10b1d8 <.divsi3_skip_div0_test+0x110>

0c10b0c8 <.divsi3_skip_div0_test>:
 c10b0c8:	e020c001 	eor	ip, r0, r1
 c10b0cc:	42611000 	rsbmi	r1, r1, #0
 c10b0d0:	e2512001 	subs	r2, r1, #1
 c10b0d4:	0a000027 	beq	c10b178 <.divsi3_skip_div0_test+0xb0>
 c10b0d8:	e1b03000 	movs	r3, r0
 c10b0dc:	42603000 	rsbmi	r3, r0, #0
 c10b0e0:	e1530001 	cmp	r3, r1
 c10b0e4:	9a000026 	bls	c10b184 <.divsi3_skip_div0_test+0xbc>
 c10b0e8:	e1110002 	tst	r1, r2
 c10b0ec:	0a000028 	beq	c10b194 <.divsi3_skip_div0_test+0xcc>
 c10b0f0:	e311020e 	tst	r1, #-536870912	; 0xe0000000
 c10b0f4:	01a01181 	lsleq	r1, r1, #3
 c10b0f8:	03a02008 	moveq	r2, #8
 c10b0fc:	13a02001 	movne	r2, #1
 c10b100:	e3510201 	cmp	r1, #268435456	; 0x10000000
 c10b104:	31510003 	cmpcc	r1, r3
 c10b108:	31a01201 	lslcc	r1, r1, #4
 c10b10c:	31a02202 	lslcc	r2, r2, #4
 c10b110:	3afffffa 	bcc	c10b100 <.divsi3_skip_div0_test+0x38>
 c10b114:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 c10b118:	31510003 	cmpcc	r1, r3
 c10b11c:	31a01081 	lslcc	r1, r1, #1
 c10b120:	31a02082 	lslcc	r2, r2, #1
 c10b124:	3afffffa 	bcc	c10b114 <.divsi3_skip_div0_test+0x4c>
 c10b128:	e3a00000 	mov	r0, #0
 c10b12c:	e1530001 	cmp	r3, r1
 c10b130:	20433001 	subcs	r3, r3, r1
 c10b134:	21800002 	orrcs	r0, r0, r2
 c10b138:	e15300a1 	cmp	r3, r1, lsr #1
 c10b13c:	204330a1 	subcs	r3, r3, r1, lsr #1
 c10b140:	218000a2 	orrcs	r0, r0, r2, lsr #1
 c10b144:	e1530121 	cmp	r3, r1, lsr #2
 c10b148:	20433121 	subcs	r3, r3, r1, lsr #2
 c10b14c:	21800122 	orrcs	r0, r0, r2, lsr #2
 c10b150:	e15301a1 	cmp	r3, r1, lsr #3
 c10b154:	204331a1 	subcs	r3, r3, r1, lsr #3
 c10b158:	218001a2 	orrcs	r0, r0, r2, lsr #3
 c10b15c:	e3530000 	cmp	r3, #0
 c10b160:	11b02222 	lsrsne	r2, r2, #4
 c10b164:	11a01221 	lsrne	r1, r1, #4
 c10b168:	1affffef 	bne	c10b12c <.divsi3_skip_div0_test+0x64>
 c10b16c:	e35c0000 	cmp	ip, #0
 c10b170:	42600000 	rsbmi	r0, r0, #0
 c10b174:	e12fff1e 	bx	lr
 c10b178:	e13c0000 	teq	ip, r0
 c10b17c:	42600000 	rsbmi	r0, r0, #0
 c10b180:	e12fff1e 	bx	lr
 c10b184:	33a00000 	movcc	r0, #0
 c10b188:	01a00fcc 	asreq	r0, ip, #31
 c10b18c:	03800001 	orreq	r0, r0, #1
 c10b190:	e12fff1e 	bx	lr
 c10b194:	e3510801 	cmp	r1, #65536	; 0x10000
 c10b198:	21a01821 	lsrcs	r1, r1, #16
 c10b19c:	23a02010 	movcs	r2, #16
 c10b1a0:	33a02000 	movcc	r2, #0
 c10b1a4:	e3510c01 	cmp	r1, #256	; 0x100
 c10b1a8:	21a01421 	lsrcs	r1, r1, #8
 c10b1ac:	22822008 	addcs	r2, r2, #8
 c10b1b0:	e3510010 	cmp	r1, #16
 c10b1b4:	21a01221 	lsrcs	r1, r1, #4
 c10b1b8:	22822004 	addcs	r2, r2, #4
 c10b1bc:	e3510004 	cmp	r1, #4
 c10b1c0:	82822003 	addhi	r2, r2, #3
 c10b1c4:	908220a1 	addls	r2, r2, r1, lsr #1
 c10b1c8:	e35c0000 	cmp	ip, #0
 c10b1cc:	e1a00233 	lsr	r0, r3, r2
 c10b1d0:	42600000 	rsbmi	r0, r0, #0
 c10b1d4:	e12fff1e 	bx	lr
 c10b1d8:	e3500000 	cmp	r0, #0
 c10b1dc:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
 c10b1e0:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
 c10b1e4:	ea000007 	b	c10b208 <__aeabi_idiv0>

0c10b1e8 <__aeabi_idivmod>:
 c10b1e8:	e3510000 	cmp	r1, #0
 c10b1ec:	0afffff9 	beq	c10b1d8 <.divsi3_skip_div0_test+0x110>
 c10b1f0:	e92d4003 	push	{r0, r1, lr}
 c10b1f4:	ebffffb3 	bl	c10b0c8 <.divsi3_skip_div0_test>
 c10b1f8:	e8bd4006 	pop	{r1, r2, lr}
 c10b1fc:	e0030092 	mul	r3, r2, r0
 c10b200:	e0411003 	sub	r1, r1, r3
 c10b204:	e12fff1e 	bx	lr

0c10b208 <__aeabi_idiv0>:
 c10b208:	e12fff1e 	bx	lr

0c10b20c <__aeabi_drsub>:
 c10b20c:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
 c10b210:	ea000000 	b	c10b218 <__adddf3>

0c10b214 <__aeabi_dsub>:
 c10b214:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

0c10b218 <__adddf3>:
 c10b218:	e92d4030 	push	{r4, r5, lr}
 c10b21c:	e1a04081 	lsl	r4, r1, #1
 c10b220:	e1a05083 	lsl	r5, r3, #1
 c10b224:	e1340005 	teq	r4, r5
 c10b228:	01300002 	teqeq	r0, r2
 c10b22c:	1194c000 	orrsne	ip, r4, r0
 c10b230:	1195c002 	orrsne	ip, r5, r2
 c10b234:	11f0cac4 	mvnsne	ip, r4, asr #21
 c10b238:	11f0cac5 	mvnsne	ip, r5, asr #21
 c10b23c:	0a00008c 	beq	c10b474 <__adddf3+0x25c>
 c10b240:	e1a04aa4 	lsr	r4, r4, #21
 c10b244:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
 c10b248:	b2655000 	rsblt	r5, r5, #0
 c10b24c:	da000006 	ble	c10b26c <__adddf3+0x54>
 c10b250:	e0844005 	add	r4, r4, r5
 c10b254:	e0202002 	eor	r2, r0, r2
 c10b258:	e0213003 	eor	r3, r1, r3
 c10b25c:	e0220000 	eor	r0, r2, r0
 c10b260:	e0231001 	eor	r1, r3, r1
 c10b264:	e0202002 	eor	r2, r0, r2
 c10b268:	e0213003 	eor	r3, r1, r3
 c10b26c:	e3550036 	cmp	r5, #54	; 0x36
 c10b270:	88bd4030 	pophi	{r4, r5, lr}
 c10b274:	812fff1e 	bxhi	lr
 c10b278:	e3110102 	tst	r1, #-2147483648	; 0x80000000
 c10b27c:	e1a01601 	lsl	r1, r1, #12
 c10b280:	e3a0c601 	mov	ip, #1048576	; 0x100000
 c10b284:	e18c1621 	orr	r1, ip, r1, lsr #12
 c10b288:	0a000001 	beq	c10b294 <__adddf3+0x7c>
 c10b28c:	e2700000 	rsbs	r0, r0, #0
 c10b290:	e2e11000 	rsc	r1, r1, #0
 c10b294:	e3130102 	tst	r3, #-2147483648	; 0x80000000
 c10b298:	e1a03603 	lsl	r3, r3, #12
 c10b29c:	e18c3623 	orr	r3, ip, r3, lsr #12
 c10b2a0:	0a000001 	beq	c10b2ac <__adddf3+0x94>
 c10b2a4:	e2722000 	rsbs	r2, r2, #0
 c10b2a8:	e2e33000 	rsc	r3, r3, #0
 c10b2ac:	e1340005 	teq	r4, r5
 c10b2b0:	0a000069 	beq	c10b45c <__adddf3+0x244>
 c10b2b4:	e2444001 	sub	r4, r4, #1
 c10b2b8:	e275e020 	rsbs	lr, r5, #32
 c10b2bc:	ba000005 	blt	c10b2d8 <__adddf3+0xc0>
 c10b2c0:	e1a0ce12 	lsl	ip, r2, lr
 c10b2c4:	e0900532 	adds	r0, r0, r2, lsr r5
 c10b2c8:	e2a11000 	adc	r1, r1, #0
 c10b2cc:	e0900e13 	adds	r0, r0, r3, lsl lr
 c10b2d0:	e0b11553 	adcs	r1, r1, r3, asr r5
 c10b2d4:	ea000006 	b	c10b2f4 <__adddf3+0xdc>
 c10b2d8:	e2455020 	sub	r5, r5, #32
 c10b2dc:	e28ee020 	add	lr, lr, #32
 c10b2e0:	e3520001 	cmp	r2, #1
 c10b2e4:	e1a0ce13 	lsl	ip, r3, lr
 c10b2e8:	238cc002 	orrcs	ip, ip, #2
 c10b2ec:	e0900553 	adds	r0, r0, r3, asr r5
 c10b2f0:	e0b11fc3 	adcs	r1, r1, r3, asr #31
 c10b2f4:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
 c10b2f8:	5a000002 	bpl	c10b308 <__adddf3+0xf0>
 c10b2fc:	e27cc000 	rsbs	ip, ip, #0
 c10b300:	e2f00000 	rscs	r0, r0, #0
 c10b304:	e2e11000 	rsc	r1, r1, #0
 c10b308:	e3510601 	cmp	r1, #1048576	; 0x100000
 c10b30c:	3a00000f 	bcc	c10b350 <__adddf3+0x138>
 c10b310:	e3510602 	cmp	r1, #2097152	; 0x200000
 c10b314:	3a000006 	bcc	c10b334 <__adddf3+0x11c>
 c10b318:	e1b010a1 	lsrs	r1, r1, #1
 c10b31c:	e1b00060 	rrxs	r0, r0
 c10b320:	e1a0c06c 	rrx	ip, ip
 c10b324:	e2844001 	add	r4, r4, #1
 c10b328:	e1a02a84 	lsl	r2, r4, #21
 c10b32c:	e3720501 	cmn	r2, #4194304	; 0x400000
 c10b330:	2a00006b 	bcs	c10b4e4 <__adddf3+0x2cc>
 c10b334:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
 c10b338:	01b0c0a0 	lsrseq	ip, r0, #1
 c10b33c:	e2b00000 	adcs	r0, r0, #0
 c10b340:	e0a11a04 	adc	r1, r1, r4, lsl #20
 c10b344:	e1811005 	orr	r1, r1, r5
 c10b348:	e8bd4030 	pop	{r4, r5, lr}
 c10b34c:	e12fff1e 	bx	lr
 c10b350:	e1b0c08c 	lsls	ip, ip, #1
 c10b354:	e0b00000 	adcs	r0, r0, r0
 c10b358:	e0a11001 	adc	r1, r1, r1
 c10b35c:	e3110601 	tst	r1, #1048576	; 0x100000
 c10b360:	e2444001 	sub	r4, r4, #1
 c10b364:	1afffff2 	bne	c10b334 <__adddf3+0x11c>
 c10b368:	e3310000 	teq	r1, #0
 c10b36c:	13a03014 	movne	r3, #20
 c10b370:	03a03034 	moveq	r3, #52	; 0x34
 c10b374:	01a01000 	moveq	r1, r0
 c10b378:	03a00000 	moveq	r0, #0
 c10b37c:	e1a02001 	mov	r2, r1
 c10b380:	e3520801 	cmp	r2, #65536	; 0x10000
 c10b384:	21a02822 	lsrcs	r2, r2, #16
 c10b388:	22433010 	subcs	r3, r3, #16
 c10b38c:	e3520c01 	cmp	r2, #256	; 0x100
 c10b390:	21a02422 	lsrcs	r2, r2, #8
 c10b394:	22433008 	subcs	r3, r3, #8
 c10b398:	e3520010 	cmp	r2, #16
 c10b39c:	21a02222 	lsrcs	r2, r2, #4
 c10b3a0:	22433004 	subcs	r3, r3, #4
 c10b3a4:	e3520004 	cmp	r2, #4
 c10b3a8:	22433002 	subcs	r3, r3, #2
 c10b3ac:	304330a2 	subcc	r3, r3, r2, lsr #1
 c10b3b0:	e04331a2 	sub	r3, r3, r2, lsr #3
 c10b3b4:	e2532020 	subs	r2, r3, #32
 c10b3b8:	aa000007 	bge	c10b3dc <__adddf3+0x1c4>
 c10b3bc:	e292200c 	adds	r2, r2, #12
 c10b3c0:	da000004 	ble	c10b3d8 <__adddf3+0x1c0>
 c10b3c4:	e282c014 	add	ip, r2, #20
 c10b3c8:	e262200c 	rsb	r2, r2, #12
 c10b3cc:	e1a00c11 	lsl	r0, r1, ip
 c10b3d0:	e1a01231 	lsr	r1, r1, r2
 c10b3d4:	ea000004 	b	c10b3ec <__adddf3+0x1d4>
 c10b3d8:	e2822014 	add	r2, r2, #20
 c10b3dc:	d262c020 	rsble	ip, r2, #32
 c10b3e0:	e1a01211 	lsl	r1, r1, r2
 c10b3e4:	d1811c30 	orrle	r1, r1, r0, lsr ip
 c10b3e8:	d1a00210 	lslle	r0, r0, r2
 c10b3ec:	e0544003 	subs	r4, r4, r3
 c10b3f0:	a0811a04 	addge	r1, r1, r4, lsl #20
 c10b3f4:	a1811005 	orrge	r1, r1, r5
 c10b3f8:	a8bd4030 	popge	{r4, r5, lr}
 c10b3fc:	a12fff1e 	bxge	lr
 c10b400:	e1e04004 	mvn	r4, r4
 c10b404:	e254401f 	subs	r4, r4, #31
 c10b408:	aa00000f 	bge	c10b44c <__adddf3+0x234>
 c10b40c:	e294400c 	adds	r4, r4, #12
 c10b410:	ca000006 	bgt	c10b430 <__adddf3+0x218>
 c10b414:	e2844014 	add	r4, r4, #20
 c10b418:	e2642020 	rsb	r2, r4, #32
 c10b41c:	e1a00430 	lsr	r0, r0, r4
 c10b420:	e1800211 	orr	r0, r0, r1, lsl r2
 c10b424:	e1851431 	orr	r1, r5, r1, lsr r4
 c10b428:	e8bd4030 	pop	{r4, r5, lr}
 c10b42c:	e12fff1e 	bx	lr
 c10b430:	e264400c 	rsb	r4, r4, #12
 c10b434:	e2642020 	rsb	r2, r4, #32
 c10b438:	e1a00230 	lsr	r0, r0, r2
 c10b43c:	e1800411 	orr	r0, r0, r1, lsl r4
 c10b440:	e1a01005 	mov	r1, r5
 c10b444:	e8bd4030 	pop	{r4, r5, lr}
 c10b448:	e12fff1e 	bx	lr
 c10b44c:	e1a00431 	lsr	r0, r1, r4
 c10b450:	e1a01005 	mov	r1, r5
 c10b454:	e8bd4030 	pop	{r4, r5, lr}
 c10b458:	e12fff1e 	bx	lr
 c10b45c:	e3340000 	teq	r4, #0
 c10b460:	e2233601 	eor	r3, r3, #1048576	; 0x100000
 c10b464:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
 c10b468:	02844001 	addeq	r4, r4, #1
 c10b46c:	12455001 	subne	r5, r5, #1
 c10b470:	eaffff8f 	b	c10b2b4 <__adddf3+0x9c>
 c10b474:	e1f0cac4 	mvns	ip, r4, asr #21
 c10b478:	11f0cac5 	mvnsne	ip, r5, asr #21
 c10b47c:	0a00001d 	beq	c10b4f8 <__adddf3+0x2e0>
 c10b480:	e1340005 	teq	r4, r5
 c10b484:	01300002 	teqeq	r0, r2
 c10b488:	0a000004 	beq	c10b4a0 <__adddf3+0x288>
 c10b48c:	e194c000 	orrs	ip, r4, r0
 c10b490:	01a01003 	moveq	r1, r3
 c10b494:	01a00002 	moveq	r0, r2
 c10b498:	e8bd4030 	pop	{r4, r5, lr}
 c10b49c:	e12fff1e 	bx	lr
 c10b4a0:	e1310003 	teq	r1, r3
 c10b4a4:	13a01000 	movne	r1, #0
 c10b4a8:	13a00000 	movne	r0, #0
 c10b4ac:	18bd4030 	popne	{r4, r5, lr}
 c10b4b0:	112fff1e 	bxne	lr
 c10b4b4:	e1b0caa4 	lsrs	ip, r4, #21
 c10b4b8:	1a000004 	bne	c10b4d0 <__adddf3+0x2b8>
 c10b4bc:	e1b00080 	lsls	r0, r0, #1
 c10b4c0:	e0b11001 	adcs	r1, r1, r1
 c10b4c4:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
 c10b4c8:	e8bd4030 	pop	{r4, r5, lr}
 c10b4cc:	e12fff1e 	bx	lr
 c10b4d0:	e2944501 	adds	r4, r4, #4194304	; 0x400000
 c10b4d4:	32811601 	addcc	r1, r1, #1048576	; 0x100000
 c10b4d8:	38bd4030 	popcc	{r4, r5, lr}
 c10b4dc:	312fff1e 	bxcc	lr
 c10b4e0:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
 c10b4e4:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
 c10b4e8:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
 c10b4ec:	e3a00000 	mov	r0, #0
 c10b4f0:	e8bd4030 	pop	{r4, r5, lr}
 c10b4f4:	e12fff1e 	bx	lr
 c10b4f8:	e1f0cac4 	mvns	ip, r4, asr #21
 c10b4fc:	11a01003 	movne	r1, r3
 c10b500:	11a00002 	movne	r0, r2
 c10b504:	01f0cac5 	mvnseq	ip, r5, asr #21
 c10b508:	11a03001 	movne	r3, r1
 c10b50c:	11a02000 	movne	r2, r0
 c10b510:	e1904601 	orrs	r4, r0, r1, lsl #12
 c10b514:	01925603 	orrseq	r5, r2, r3, lsl #12
 c10b518:	01310003 	teqeq	r1, r3
 c10b51c:	13811702 	orrne	r1, r1, #524288	; 0x80000
 c10b520:	e8bd4030 	pop	{r4, r5, lr}
 c10b524:	e12fff1e 	bx	lr

0c10b528 <__aeabi_ui2d>:
 c10b528:	e3300000 	teq	r0, #0
 c10b52c:	03a01000 	moveq	r1, #0
 c10b530:	012fff1e 	bxeq	lr
 c10b534:	e92d4030 	push	{r4, r5, lr}
 c10b538:	e3a04b01 	mov	r4, #1024	; 0x400
 c10b53c:	e2844032 	add	r4, r4, #50	; 0x32
 c10b540:	e3a05000 	mov	r5, #0
 c10b544:	e3a01000 	mov	r1, #0
 c10b548:	eaffff86 	b	c10b368 <__adddf3+0x150>

0c10b54c <__aeabi_i2d>:
 c10b54c:	e3300000 	teq	r0, #0
 c10b550:	03a01000 	moveq	r1, #0
 c10b554:	012fff1e 	bxeq	lr
 c10b558:	e92d4030 	push	{r4, r5, lr}
 c10b55c:	e3a04b01 	mov	r4, #1024	; 0x400
 c10b560:	e2844032 	add	r4, r4, #50	; 0x32
 c10b564:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
 c10b568:	42600000 	rsbmi	r0, r0, #0
 c10b56c:	e3a01000 	mov	r1, #0
 c10b570:	eaffff7c 	b	c10b368 <__adddf3+0x150>

0c10b574 <__aeabi_f2d>:
 c10b574:	e1b02080 	lsls	r2, r0, #1
 c10b578:	e1a011c2 	asr	r1, r2, #3
 c10b57c:	e1a01061 	rrx	r1, r1
 c10b580:	e1a00e02 	lsl	r0, r2, #28
 c10b584:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
 c10b588:	133304ff 	teqne	r3, #-16777216	; 0xff000000
 c10b58c:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
 c10b590:	112fff1e 	bxne	lr
 c10b594:	e3320000 	teq	r2, #0
 c10b598:	133304ff 	teqne	r3, #-16777216	; 0xff000000
 c10b59c:	012fff1e 	bxeq	lr
 c10b5a0:	e92d4030 	push	{r4, r5, lr}
 c10b5a4:	e3a04d0e 	mov	r4, #896	; 0x380
 c10b5a8:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
 c10b5ac:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
 c10b5b0:	eaffff6c 	b	c10b368 <__adddf3+0x150>

0c10b5b4 <__aeabi_ul2d>:
 c10b5b4:	e1902001 	orrs	r2, r0, r1
 c10b5b8:	012fff1e 	bxeq	lr
 c10b5bc:	e92d4030 	push	{r4, r5, lr}
 c10b5c0:	e3a05000 	mov	r5, #0
 c10b5c4:	ea000006 	b	c10b5e4 <__aeabi_l2d+0x1c>

0c10b5c8 <__aeabi_l2d>:
 c10b5c8:	e1902001 	orrs	r2, r0, r1
 c10b5cc:	012fff1e 	bxeq	lr
 c10b5d0:	e92d4030 	push	{r4, r5, lr}
 c10b5d4:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
 c10b5d8:	5a000001 	bpl	c10b5e4 <__aeabi_l2d+0x1c>
 c10b5dc:	e2700000 	rsbs	r0, r0, #0
 c10b5e0:	e2e11000 	rsc	r1, r1, #0
 c10b5e4:	e3a04b01 	mov	r4, #1024	; 0x400
 c10b5e8:	e2844032 	add	r4, r4, #50	; 0x32
 c10b5ec:	e1b0cb21 	lsrs	ip, r1, #22
 c10b5f0:	0affff44 	beq	c10b308 <__adddf3+0xf0>
 c10b5f4:	e3a02003 	mov	r2, #3
 c10b5f8:	e1b0c1ac 	lsrs	ip, ip, #3
 c10b5fc:	12822003 	addne	r2, r2, #3
 c10b600:	e1b0c1ac 	lsrs	ip, ip, #3
 c10b604:	12822003 	addne	r2, r2, #3
 c10b608:	e08221ac 	add	r2, r2, ip, lsr #3
 c10b60c:	e2623020 	rsb	r3, r2, #32
 c10b610:	e1a0c310 	lsl	ip, r0, r3
 c10b614:	e1a00230 	lsr	r0, r0, r2
 c10b618:	e1800311 	orr	r0, r0, r1, lsl r3
 c10b61c:	e1a01231 	lsr	r1, r1, r2
 c10b620:	e0844002 	add	r4, r4, r2
 c10b624:	eaffff37 	b	c10b308 <__adddf3+0xf0>

0c10b628 <__aeabi_dmul>:
 c10b628:	e92d4070 	push	{r4, r5, r6, lr}
 c10b62c:	e3a0c0ff 	mov	ip, #255	; 0xff
 c10b630:	e38ccc07 	orr	ip, ip, #1792	; 0x700
 c10b634:	e01c4a21 	ands	r4, ip, r1, lsr #20
 c10b638:	101c5a23 	andsne	r5, ip, r3, lsr #20
 c10b63c:	1134000c 	teqne	r4, ip
 c10b640:	1135000c 	teqne	r5, ip
 c10b644:	0b000075 	bleq	c10b820 <__aeabi_dmul+0x1f8>
 c10b648:	e0844005 	add	r4, r4, r5
 c10b64c:	e0216003 	eor	r6, r1, r3
 c10b650:	e1c11a8c 	bic	r1, r1, ip, lsl #21
 c10b654:	e1c33a8c 	bic	r3, r3, ip, lsl #21
 c10b658:	e1905601 	orrs	r5, r0, r1, lsl #12
 c10b65c:	11925603 	orrsne	r5, r2, r3, lsl #12
 c10b660:	e3811601 	orr	r1, r1, #1048576	; 0x100000
 c10b664:	e3833601 	orr	r3, r3, #1048576	; 0x100000
 c10b668:	0a00001d 	beq	c10b6e4 <__aeabi_dmul+0xbc>
 c10b66c:	e08ec290 	umull	ip, lr, r0, r2
 c10b670:	e3a05000 	mov	r5, #0
 c10b674:	e0a5e291 	umlal	lr, r5, r1, r2
 c10b678:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
 c10b67c:	e0a5e390 	umlal	lr, r5, r0, r3
 c10b680:	e3a06000 	mov	r6, #0
 c10b684:	e0a65391 	umlal	r5, r6, r1, r3
 c10b688:	e33c0000 	teq	ip, #0
 c10b68c:	138ee001 	orrne	lr, lr, #1
 c10b690:	e24440ff 	sub	r4, r4, #255	; 0xff
 c10b694:	e3560c02 	cmp	r6, #512	; 0x200
 c10b698:	e2c44c03 	sbc	r4, r4, #768	; 0x300
 c10b69c:	2a000002 	bcs	c10b6ac <__aeabi_dmul+0x84>
 c10b6a0:	e1b0e08e 	lsls	lr, lr, #1
 c10b6a4:	e0b55005 	adcs	r5, r5, r5
 c10b6a8:	e0a66006 	adc	r6, r6, r6
 c10b6ac:	e1821586 	orr	r1, r2, r6, lsl #11
 c10b6b0:	e1811aa5 	orr	r1, r1, r5, lsr #21
 c10b6b4:	e1a00585 	lsl	r0, r5, #11
 c10b6b8:	e1800aae 	orr	r0, r0, lr, lsr #21
 c10b6bc:	e1a0e58e 	lsl	lr, lr, #11
 c10b6c0:	e254c0fd 	subs	ip, r4, #253	; 0xfd
 c10b6c4:	835c0c07 	cmphi	ip, #1792	; 0x700
 c10b6c8:	8a000011 	bhi	c10b714 <__aeabi_dmul+0xec>
 c10b6cc:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
 c10b6d0:	01b0e0a0 	lsrseq	lr, r0, #1
 c10b6d4:	e2b00000 	adcs	r0, r0, #0
 c10b6d8:	e0a11a04 	adc	r1, r1, r4, lsl #20
 c10b6dc:	e8bd4070 	pop	{r4, r5, r6, lr}
 c10b6e0:	e12fff1e 	bx	lr
 c10b6e4:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
 c10b6e8:	e1861001 	orr	r1, r6, r1
 c10b6ec:	e1800002 	orr	r0, r0, r2
 c10b6f0:	e0211003 	eor	r1, r1, r3
 c10b6f4:	e05440ac 	subs	r4, r4, ip, lsr #1
 c10b6f8:	c074500c 	rsbsgt	r5, r4, ip
 c10b6fc:	c1811a04 	orrgt	r1, r1, r4, lsl #20
 c10b700:	c8bd4070 	popgt	{r4, r5, r6, lr}
 c10b704:	c12fff1e 	bxgt	lr
 c10b708:	e3811601 	orr	r1, r1, #1048576	; 0x100000
 c10b70c:	e3a0e000 	mov	lr, #0
 c10b710:	e2544001 	subs	r4, r4, #1
 c10b714:	ca00005d 	bgt	c10b890 <__aeabi_dmul+0x268>
 c10b718:	e3740036 	cmn	r4, #54	; 0x36
 c10b71c:	d3a00000 	movle	r0, #0
 c10b720:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
 c10b724:	d8bd4070 	pople	{r4, r5, r6, lr}
 c10b728:	d12fff1e 	bxle	lr
 c10b72c:	e2644000 	rsb	r4, r4, #0
 c10b730:	e2544020 	subs	r4, r4, #32
 c10b734:	aa00001a 	bge	c10b7a4 <__aeabi_dmul+0x17c>
 c10b738:	e294400c 	adds	r4, r4, #12
 c10b73c:	ca00000c 	bgt	c10b774 <__aeabi_dmul+0x14c>
 c10b740:	e2844014 	add	r4, r4, #20
 c10b744:	e2645020 	rsb	r5, r4, #32
 c10b748:	e1a03510 	lsl	r3, r0, r5
 c10b74c:	e1a00430 	lsr	r0, r0, r4
 c10b750:	e1800511 	orr	r0, r0, r1, lsl r5
 c10b754:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
 c10b758:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
 c10b75c:	e0900fa3 	adds	r0, r0, r3, lsr #31
 c10b760:	e0a21431 	adc	r1, r2, r1, lsr r4
 c10b764:	e19ee083 	orrs	lr, lr, r3, lsl #1
 c10b768:	01c00fa3 	biceq	r0, r0, r3, lsr #31
 c10b76c:	e8bd4070 	pop	{r4, r5, r6, lr}
 c10b770:	e12fff1e 	bx	lr
 c10b774:	e264400c 	rsb	r4, r4, #12
 c10b778:	e2645020 	rsb	r5, r4, #32
 c10b77c:	e1a03410 	lsl	r3, r0, r4
 c10b780:	e1a00530 	lsr	r0, r0, r5
 c10b784:	e1800411 	orr	r0, r0, r1, lsl r4
 c10b788:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
 c10b78c:	e0900fa3 	adds	r0, r0, r3, lsr #31
 c10b790:	e2a11000 	adc	r1, r1, #0
 c10b794:	e19ee083 	orrs	lr, lr, r3, lsl #1
 c10b798:	01c00fa3 	biceq	r0, r0, r3, lsr #31
 c10b79c:	e8bd4070 	pop	{r4, r5, r6, lr}
 c10b7a0:	e12fff1e 	bx	lr
 c10b7a4:	e2645020 	rsb	r5, r4, #32
 c10b7a8:	e18ee510 	orr	lr, lr, r0, lsl r5
 c10b7ac:	e1a03430 	lsr	r3, r0, r4
 c10b7b0:	e1833511 	orr	r3, r3, r1, lsl r5
 c10b7b4:	e1a00431 	lsr	r0, r1, r4
 c10b7b8:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
 c10b7bc:	e1c00431 	bic	r0, r0, r1, lsr r4
 c10b7c0:	e0800fa3 	add	r0, r0, r3, lsr #31
 c10b7c4:	e19ee083 	orrs	lr, lr, r3, lsl #1
 c10b7c8:	01c00fa3 	biceq	r0, r0, r3, lsr #31
 c10b7cc:	e8bd4070 	pop	{r4, r5, r6, lr}
 c10b7d0:	e12fff1e 	bx	lr
 c10b7d4:	e3340000 	teq	r4, #0
 c10b7d8:	1a000008 	bne	c10b800 <__aeabi_dmul+0x1d8>
 c10b7dc:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
 c10b7e0:	e1b00080 	lsls	r0, r0, #1
 c10b7e4:	e0a11001 	adc	r1, r1, r1
 c10b7e8:	e3110601 	tst	r1, #1048576	; 0x100000
 c10b7ec:	02444001 	subeq	r4, r4, #1
 c10b7f0:	0afffffa 	beq	c10b7e0 <__aeabi_dmul+0x1b8>
 c10b7f4:	e1811006 	orr	r1, r1, r6
 c10b7f8:	e3350000 	teq	r5, #0
 c10b7fc:	112fff1e 	bxne	lr
 c10b800:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
 c10b804:	e1b02082 	lsls	r2, r2, #1
 c10b808:	e0a33003 	adc	r3, r3, r3
 c10b80c:	e3130601 	tst	r3, #1048576	; 0x100000
 c10b810:	02455001 	subeq	r5, r5, #1
 c10b814:	0afffffa 	beq	c10b804 <__aeabi_dmul+0x1dc>
 c10b818:	e1833006 	orr	r3, r3, r6
 c10b81c:	e12fff1e 	bx	lr
 c10b820:	e134000c 	teq	r4, ip
 c10b824:	e00c5a23 	and	r5, ip, r3, lsr #20
 c10b828:	1135000c 	teqne	r5, ip
 c10b82c:	0a000007 	beq	c10b850 <__aeabi_dmul+0x228>
 c10b830:	e1906081 	orrs	r6, r0, r1, lsl #1
 c10b834:	11926083 	orrsne	r6, r2, r3, lsl #1
 c10b838:	1affffe5 	bne	c10b7d4 <__aeabi_dmul+0x1ac>
 c10b83c:	e0211003 	eor	r1, r1, r3
 c10b840:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
 c10b844:	e3a00000 	mov	r0, #0
 c10b848:	e8bd4070 	pop	{r4, r5, r6, lr}
 c10b84c:	e12fff1e 	bx	lr
 c10b850:	e1906081 	orrs	r6, r0, r1, lsl #1
 c10b854:	01a00002 	moveq	r0, r2
 c10b858:	01a01003 	moveq	r1, r3
 c10b85c:	11926083 	orrsne	r6, r2, r3, lsl #1
 c10b860:	0a000010 	beq	c10b8a8 <__aeabi_dmul+0x280>
 c10b864:	e134000c 	teq	r4, ip
 c10b868:	1a000001 	bne	c10b874 <__aeabi_dmul+0x24c>
 c10b86c:	e1906601 	orrs	r6, r0, r1, lsl #12
 c10b870:	1a00000c 	bne	c10b8a8 <__aeabi_dmul+0x280>
 c10b874:	e135000c 	teq	r5, ip
 c10b878:	1a000003 	bne	c10b88c <__aeabi_dmul+0x264>
 c10b87c:	e1926603 	orrs	r6, r2, r3, lsl #12
 c10b880:	11a00002 	movne	r0, r2
 c10b884:	11a01003 	movne	r1, r3
 c10b888:	1a000006 	bne	c10b8a8 <__aeabi_dmul+0x280>
 c10b88c:	e0211003 	eor	r1, r1, r3
 c10b890:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
 c10b894:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
 c10b898:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
 c10b89c:	e3a00000 	mov	r0, #0
 c10b8a0:	e8bd4070 	pop	{r4, r5, r6, lr}
 c10b8a4:	e12fff1e 	bx	lr
 c10b8a8:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
 c10b8ac:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
 c10b8b0:	e8bd4070 	pop	{r4, r5, r6, lr}
 c10b8b4:	e12fff1e 	bx	lr

0c10b8b8 <__aeabi_ddiv>:
 c10b8b8:	e92d4070 	push	{r4, r5, r6, lr}
 c10b8bc:	e3a0c0ff 	mov	ip, #255	; 0xff
 c10b8c0:	e38ccc07 	orr	ip, ip, #1792	; 0x700
 c10b8c4:	e01c4a21 	ands	r4, ip, r1, lsr #20
 c10b8c8:	101c5a23 	andsne	r5, ip, r3, lsr #20
 c10b8cc:	1134000c 	teqne	r4, ip
 c10b8d0:	1135000c 	teqne	r5, ip
 c10b8d4:	0b00005e 	bleq	c10ba54 <__aeabi_ddiv+0x19c>
 c10b8d8:	e0444005 	sub	r4, r4, r5
 c10b8dc:	e021e003 	eor	lr, r1, r3
 c10b8e0:	e1925603 	orrs	r5, r2, r3, lsl #12
 c10b8e4:	e1a01601 	lsl	r1, r1, #12
 c10b8e8:	0a00004c 	beq	c10ba20 <__aeabi_ddiv+0x168>
 c10b8ec:	e1a03603 	lsl	r3, r3, #12
 c10b8f0:	e3a05201 	mov	r5, #268435456	; 0x10000000
 c10b8f4:	e1853223 	orr	r3, r5, r3, lsr #4
 c10b8f8:	e1833c22 	orr	r3, r3, r2, lsr #24
 c10b8fc:	e1a02402 	lsl	r2, r2, #8
 c10b900:	e1855221 	orr	r5, r5, r1, lsr #4
 c10b904:	e1855c20 	orr	r5, r5, r0, lsr #24
 c10b908:	e1a06400 	lsl	r6, r0, #8
 c10b90c:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
 c10b910:	e1550003 	cmp	r5, r3
 c10b914:	01560002 	cmpeq	r6, r2
 c10b918:	e2a440fd 	adc	r4, r4, #253	; 0xfd
 c10b91c:	e2844c03 	add	r4, r4, #768	; 0x300
 c10b920:	2a000001 	bcs	c10b92c <__aeabi_ddiv+0x74>
 c10b924:	e1b030a3 	lsrs	r3, r3, #1
 c10b928:	e1a02062 	rrx	r2, r2
 c10b92c:	e0566002 	subs	r6, r6, r2
 c10b930:	e0c55003 	sbc	r5, r5, r3
 c10b934:	e1b030a3 	lsrs	r3, r3, #1
 c10b938:	e1a02062 	rrx	r2, r2
 c10b93c:	e3a00601 	mov	r0, #1048576	; 0x100000
 c10b940:	e3a0c702 	mov	ip, #524288	; 0x80000
 c10b944:	e056e002 	subs	lr, r6, r2
 c10b948:	e0d5e003 	sbcs	lr, r5, r3
 c10b94c:	20466002 	subcs	r6, r6, r2
 c10b950:	21a0500e 	movcs	r5, lr
 c10b954:	2180000c 	orrcs	r0, r0, ip
 c10b958:	e1b030a3 	lsrs	r3, r3, #1
 c10b95c:	e1a02062 	rrx	r2, r2
 c10b960:	e056e002 	subs	lr, r6, r2
 c10b964:	e0d5e003 	sbcs	lr, r5, r3
 c10b968:	20466002 	subcs	r6, r6, r2
 c10b96c:	21a0500e 	movcs	r5, lr
 c10b970:	218000ac 	orrcs	r0, r0, ip, lsr #1
 c10b974:	e1b030a3 	lsrs	r3, r3, #1
 c10b978:	e1a02062 	rrx	r2, r2
 c10b97c:	e056e002 	subs	lr, r6, r2
 c10b980:	e0d5e003 	sbcs	lr, r5, r3
 c10b984:	20466002 	subcs	r6, r6, r2
 c10b988:	21a0500e 	movcs	r5, lr
 c10b98c:	2180012c 	orrcs	r0, r0, ip, lsr #2
 c10b990:	e1b030a3 	lsrs	r3, r3, #1
 c10b994:	e1a02062 	rrx	r2, r2
 c10b998:	e056e002 	subs	lr, r6, r2
 c10b99c:	e0d5e003 	sbcs	lr, r5, r3
 c10b9a0:	20466002 	subcs	r6, r6, r2
 c10b9a4:	21a0500e 	movcs	r5, lr
 c10b9a8:	218001ac 	orrcs	r0, r0, ip, lsr #3
 c10b9ac:	e195e006 	orrs	lr, r5, r6
 c10b9b0:	0a00000d 	beq	c10b9ec <__aeabi_ddiv+0x134>
 c10b9b4:	e1a05205 	lsl	r5, r5, #4
 c10b9b8:	e1855e26 	orr	r5, r5, r6, lsr #28
 c10b9bc:	e1a06206 	lsl	r6, r6, #4
 c10b9c0:	e1a03183 	lsl	r3, r3, #3
 c10b9c4:	e1833ea2 	orr	r3, r3, r2, lsr #29
 c10b9c8:	e1a02182 	lsl	r2, r2, #3
 c10b9cc:	e1b0c22c 	lsrs	ip, ip, #4
 c10b9d0:	1affffdb 	bne	c10b944 <__aeabi_ddiv+0x8c>
 c10b9d4:	e3110601 	tst	r1, #1048576	; 0x100000
 c10b9d8:	1a000006 	bne	c10b9f8 <__aeabi_ddiv+0x140>
 c10b9dc:	e1811000 	orr	r1, r1, r0
 c10b9e0:	e3a00000 	mov	r0, #0
 c10b9e4:	e3a0c102 	mov	ip, #-2147483648	; 0x80000000
 c10b9e8:	eaffffd5 	b	c10b944 <__aeabi_ddiv+0x8c>
 c10b9ec:	e3110601 	tst	r1, #1048576	; 0x100000
 c10b9f0:	01811000 	orreq	r1, r1, r0
 c10b9f4:	03a00000 	moveq	r0, #0
 c10b9f8:	e254c0fd 	subs	ip, r4, #253	; 0xfd
 c10b9fc:	835c0c07 	cmphi	ip, #1792	; 0x700
 c10ba00:	8affff43 	bhi	c10b714 <__aeabi_dmul+0xec>
 c10ba04:	e055c003 	subs	ip, r5, r3
 c10ba08:	0056c002 	subseq	ip, r6, r2
 c10ba0c:	01b0c0a0 	lsrseq	ip, r0, #1
 c10ba10:	e2b00000 	adcs	r0, r0, #0
 c10ba14:	e0a11a04 	adc	r1, r1, r4, lsl #20
 c10ba18:	e8bd4070 	pop	{r4, r5, r6, lr}
 c10ba1c:	e12fff1e 	bx	lr
 c10ba20:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
 c10ba24:	e18e1621 	orr	r1, lr, r1, lsr #12
 c10ba28:	e09440ac 	adds	r4, r4, ip, lsr #1
 c10ba2c:	c074500c 	rsbsgt	r5, r4, ip
 c10ba30:	c1811a04 	orrgt	r1, r1, r4, lsl #20
 c10ba34:	c8bd4070 	popgt	{r4, r5, r6, lr}
 c10ba38:	c12fff1e 	bxgt	lr
 c10ba3c:	e3811601 	orr	r1, r1, #1048576	; 0x100000
 c10ba40:	e3a0e000 	mov	lr, #0
 c10ba44:	e2544001 	subs	r4, r4, #1
 c10ba48:	eaffff31 	b	c10b714 <__aeabi_dmul+0xec>
 c10ba4c:	e185e006 	orr	lr, r5, r6
 c10ba50:	eaffff2f 	b	c10b714 <__aeabi_dmul+0xec>
 c10ba54:	e00c5a23 	and	r5, ip, r3, lsr #20
 c10ba58:	e134000c 	teq	r4, ip
 c10ba5c:	0135000c 	teqeq	r5, ip
 c10ba60:	0affff90 	beq	c10b8a8 <__aeabi_dmul+0x280>
 c10ba64:	e134000c 	teq	r4, ip
 c10ba68:	1a000006 	bne	c10ba88 <__aeabi_ddiv+0x1d0>
 c10ba6c:	e1904601 	orrs	r4, r0, r1, lsl #12
 c10ba70:	1affff8c 	bne	c10b8a8 <__aeabi_dmul+0x280>
 c10ba74:	e135000c 	teq	r5, ip
 c10ba78:	1affff83 	bne	c10b88c <__aeabi_dmul+0x264>
 c10ba7c:	e1a00002 	mov	r0, r2
 c10ba80:	e1a01003 	mov	r1, r3
 c10ba84:	eaffff87 	b	c10b8a8 <__aeabi_dmul+0x280>
 c10ba88:	e135000c 	teq	r5, ip
 c10ba8c:	1a000004 	bne	c10baa4 <__aeabi_ddiv+0x1ec>
 c10ba90:	e1925603 	orrs	r5, r2, r3, lsl #12
 c10ba94:	0affff68 	beq	c10b83c <__aeabi_dmul+0x214>
 c10ba98:	e1a00002 	mov	r0, r2
 c10ba9c:	e1a01003 	mov	r1, r3
 c10baa0:	eaffff80 	b	c10b8a8 <__aeabi_dmul+0x280>
 c10baa4:	e1906081 	orrs	r6, r0, r1, lsl #1
 c10baa8:	11926083 	orrsne	r6, r2, r3, lsl #1
 c10baac:	1affff48 	bne	c10b7d4 <__aeabi_dmul+0x1ac>
 c10bab0:	e1904081 	orrs	r4, r0, r1, lsl #1
 c10bab4:	1affff74 	bne	c10b88c <__aeabi_dmul+0x264>
 c10bab8:	e1925083 	orrs	r5, r2, r3, lsl #1
 c10babc:	1affff5e 	bne	c10b83c <__aeabi_dmul+0x214>
 c10bac0:	eaffff78 	b	c10b8a8 <__aeabi_dmul+0x280>

0c10bac4 <__gedf2>:
 c10bac4:	e3e0c000 	mvn	ip, #0
 c10bac8:	ea000002 	b	c10bad8 <__cmpdf2+0x4>

0c10bacc <__ledf2>:
 c10bacc:	e3a0c001 	mov	ip, #1
 c10bad0:	ea000000 	b	c10bad8 <__cmpdf2+0x4>

0c10bad4 <__cmpdf2>:
 c10bad4:	e3a0c001 	mov	ip, #1
 c10bad8:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10badc:	e1a0c081 	lsl	ip, r1, #1
 c10bae0:	e1f0cacc 	mvns	ip, ip, asr #21
 c10bae4:	e1a0c083 	lsl	ip, r3, #1
 c10bae8:	11f0cacc 	mvnsne	ip, ip, asr #21
 c10baec:	0a00000e 	beq	c10bb2c <__cmpdf2+0x58>
 c10baf0:	e28dd004 	add	sp, sp, #4
 c10baf4:	e190c081 	orrs	ip, r0, r1, lsl #1
 c10baf8:	0192c083 	orrseq	ip, r2, r3, lsl #1
 c10bafc:	11310003 	teqne	r1, r3
 c10bb00:	01300002 	teqeq	r0, r2
 c10bb04:	03a00000 	moveq	r0, #0
 c10bb08:	012fff1e 	bxeq	lr
 c10bb0c:	e3700000 	cmn	r0, #0
 c10bb10:	e1310003 	teq	r1, r3
 c10bb14:	51510003 	cmppl	r1, r3
 c10bb18:	01500002 	cmpeq	r0, r2
 c10bb1c:	21a00fc3 	asrcs	r0, r3, #31
 c10bb20:	31e00fc3 	mvncc	r0, r3, asr #31
 c10bb24:	e3800001 	orr	r0, r0, #1
 c10bb28:	e12fff1e 	bx	lr
 c10bb2c:	e1a0c081 	lsl	ip, r1, #1
 c10bb30:	e1f0cacc 	mvns	ip, ip, asr #21
 c10bb34:	1a000001 	bne	c10bb40 <__cmpdf2+0x6c>
 c10bb38:	e190c601 	orrs	ip, r0, r1, lsl #12
 c10bb3c:	1a000004 	bne	c10bb54 <__cmpdf2+0x80>
 c10bb40:	e1a0c083 	lsl	ip, r3, #1
 c10bb44:	e1f0cacc 	mvns	ip, ip, asr #21
 c10bb48:	1affffe8 	bne	c10baf0 <__cmpdf2+0x1c>
 c10bb4c:	e192c603 	orrs	ip, r2, r3, lsl #12
 c10bb50:	0affffe6 	beq	c10baf0 <__cmpdf2+0x1c>
 c10bb54:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
 c10bb58:	e12fff1e 	bx	lr

0c10bb5c <__aeabi_cdrcmple>:
 c10bb5c:	e1a0c000 	mov	ip, r0
 c10bb60:	e1a00002 	mov	r0, r2
 c10bb64:	e1a0200c 	mov	r2, ip
 c10bb68:	e1a0c001 	mov	ip, r1
 c10bb6c:	e1a01003 	mov	r1, r3
 c10bb70:	e1a0300c 	mov	r3, ip
 c10bb74:	eaffffff 	b	c10bb78 <__aeabi_cdcmpeq>

0c10bb78 <__aeabi_cdcmpeq>:
 c10bb78:	e92d4001 	push	{r0, lr}
 c10bb7c:	ebffffd4 	bl	c10bad4 <__cmpdf2>
 c10bb80:	e3500000 	cmp	r0, #0
 c10bb84:	43700000 	cmnmi	r0, #0
 c10bb88:	e8bd4001 	pop	{r0, lr}
 c10bb8c:	e12fff1e 	bx	lr

0c10bb90 <__aeabi_dcmpeq>:
 c10bb90:	e52de008 	str	lr, [sp, #-8]!
 c10bb94:	ebfffff7 	bl	c10bb78 <__aeabi_cdcmpeq>
 c10bb98:	03a00001 	moveq	r0, #1
 c10bb9c:	13a00000 	movne	r0, #0
 c10bba0:	e49de008 	ldr	lr, [sp], #8
 c10bba4:	e12fff1e 	bx	lr

0c10bba8 <__aeabi_dcmplt>:
 c10bba8:	e52de008 	str	lr, [sp, #-8]!
 c10bbac:	ebfffff1 	bl	c10bb78 <__aeabi_cdcmpeq>
 c10bbb0:	33a00001 	movcc	r0, #1
 c10bbb4:	23a00000 	movcs	r0, #0
 c10bbb8:	e49de008 	ldr	lr, [sp], #8
 c10bbbc:	e12fff1e 	bx	lr

0c10bbc0 <__aeabi_dcmple>:
 c10bbc0:	e52de008 	str	lr, [sp, #-8]!
 c10bbc4:	ebffffeb 	bl	c10bb78 <__aeabi_cdcmpeq>
 c10bbc8:	93a00001 	movls	r0, #1
 c10bbcc:	83a00000 	movhi	r0, #0
 c10bbd0:	e49de008 	ldr	lr, [sp], #8
 c10bbd4:	e12fff1e 	bx	lr

0c10bbd8 <__aeabi_dcmpge>:
 c10bbd8:	e52de008 	str	lr, [sp, #-8]!
 c10bbdc:	ebffffde 	bl	c10bb5c <__aeabi_cdrcmple>
 c10bbe0:	93a00001 	movls	r0, #1
 c10bbe4:	83a00000 	movhi	r0, #0
 c10bbe8:	e49de008 	ldr	lr, [sp], #8
 c10bbec:	e12fff1e 	bx	lr

0c10bbf0 <__aeabi_dcmpgt>:
 c10bbf0:	e52de008 	str	lr, [sp, #-8]!
 c10bbf4:	ebffffd8 	bl	c10bb5c <__aeabi_cdrcmple>
 c10bbf8:	33a00001 	movcc	r0, #1
 c10bbfc:	23a00000 	movcs	r0, #0
 c10bc00:	e49de008 	ldr	lr, [sp], #8
 c10bc04:	e12fff1e 	bx	lr

0c10bc08 <__aeabi_d2iz>:
 c10bc08:	e1a02081 	lsl	r2, r1, #1
 c10bc0c:	e2922602 	adds	r2, r2, #2097152	; 0x200000
 c10bc10:	2a00000c 	bcs	c10bc48 <__aeabi_d2iz+0x40>
 c10bc14:	5a000009 	bpl	c10bc40 <__aeabi_d2iz+0x38>
 c10bc18:	e3e03e3e 	mvn	r3, #992	; 0x3e0
 c10bc1c:	e0532ac2 	subs	r2, r3, r2, asr #21
 c10bc20:	9a00000a 	bls	c10bc50 <__aeabi_d2iz+0x48>
 c10bc24:	e1a03581 	lsl	r3, r1, #11
 c10bc28:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
 c10bc2c:	e1833aa0 	orr	r3, r3, r0, lsr #21
 c10bc30:	e3110102 	tst	r1, #-2147483648	; 0x80000000
 c10bc34:	e1a00233 	lsr	r0, r3, r2
 c10bc38:	12600000 	rsbne	r0, r0, #0
 c10bc3c:	e12fff1e 	bx	lr
 c10bc40:	e3a00000 	mov	r0, #0
 c10bc44:	e12fff1e 	bx	lr
 c10bc48:	e1900601 	orrs	r0, r0, r1, lsl #12
 c10bc4c:	1a000002 	bne	c10bc5c <__aeabi_d2iz+0x54>
 c10bc50:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
 c10bc54:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
 c10bc58:	e12fff1e 	bx	lr
 c10bc5c:	e3a00000 	mov	r0, #0
 c10bc60:	e12fff1e 	bx	lr

0c10bc64 <__aeabi_uldivmod>:
 c10bc64:	e3530000 	cmp	r3, #0
 c10bc68:	03520000 	cmpeq	r2, #0
 c10bc6c:	1a000004 	bne	c10bc84 <__aeabi_uldivmod+0x20>
 c10bc70:	e3510000 	cmp	r1, #0
 c10bc74:	03500000 	cmpeq	r0, #0
 c10bc78:	13e01000 	mvnne	r1, #0
 c10bc7c:	13e00000 	mvnne	r0, #0
 c10bc80:	eafffd60 	b	c10b208 <__aeabi_idiv0>
 c10bc84:	e24dd008 	sub	sp, sp, #8
 c10bc88:	e92d6000 	push	{sp, lr}
 c10bc8c:	eb000013 	bl	c10bce0 <__gnu_uldivmod_helper>
 c10bc90:	e59de004 	ldr	lr, [sp, #4]
 c10bc94:	e28dd008 	add	sp, sp, #8
 c10bc98:	e8bd000c 	pop	{r2, r3}
 c10bc9c:	e12fff1e 	bx	lr

0c10bca0 <__gnu_ldivmod_helper>:
 c10bca0:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
 c10bca4:	e1a04002 	mov	r4, r2
 c10bca8:	e1a07003 	mov	r7, r3
 c10bcac:	e1a05000 	mov	r5, r0
 c10bcb0:	e1a06001 	mov	r6, r1
 c10bcb4:	eb000019 	bl	c10bd20 <__divdi3>
 c10bcb8:	e0070790 	mul	r7, r0, r7
 c10bcbc:	e0832490 	umull	r2, r3, r0, r4
 c10bcc0:	e0247491 	mla	r4, r1, r4, r7
 c10bcc4:	e0843003 	add	r3, r4, r3
 c10bcc8:	e0555002 	subs	r5, r5, r2
 c10bccc:	e0c66003 	sbc	r6, r6, r3
 c10bcd0:	e59d3018 	ldr	r3, [sp, #24]
 c10bcd4:	e8830060 	stm	r3, {r5, r6}
 c10bcd8:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
 c10bcdc:	e12fff1e 	bx	lr

0c10bce0 <__gnu_uldivmod_helper>:
 c10bce0:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
 c10bce4:	e1a04002 	mov	r4, r2
 c10bce8:	e1a07003 	mov	r7, r3
 c10bcec:	e1a05000 	mov	r5, r0
 c10bcf0:	e1a06001 	mov	r6, r1
 c10bcf4:	eb000133 	bl	c10c1c8 <__udivdi3>
 c10bcf8:	e0070790 	mul	r7, r0, r7
 c10bcfc:	e0832490 	umull	r2, r3, r0, r4
 c10bd00:	e0247491 	mla	r4, r1, r4, r7
 c10bd04:	e0843003 	add	r3, r4, r3
 c10bd08:	e0555002 	subs	r5, r5, r2
 c10bd0c:	e0c66003 	sbc	r6, r6, r3
 c10bd10:	e59d3018 	ldr	r3, [sp, #24]
 c10bd14:	e8830060 	stm	r3, {r5, r6}
 c10bd18:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
 c10bd1c:	e12fff1e 	bx	lr

0c10bd20 <__divdi3>:
 c10bd20:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c10bd24:	e3510000 	cmp	r1, #0
 c10bd28:	e24dd014 	sub	sp, sp, #20
 c10bd2c:	e1a0c003 	mov	ip, r3
 c10bd30:	a3a07000 	movge	r7, #0
 c10bd34:	ba000094 	blt	c10bf8c <__divdi3+0x26c>
 c10bd38:	e35c0000 	cmp	ip, #0
 c10bd3c:	ba00008e 	blt	c10bf7c <__divdi3+0x25c>
 c10bd40:	e253a000 	subs	sl, r3, #0
 c10bd44:	e1a0b000 	mov	fp, r0
 c10bd48:	e1a08001 	mov	r8, r1
 c10bd4c:	e1a09002 	mov	r9, r2
 c10bd50:	e1a04002 	mov	r4, r2
 c10bd54:	e1a05000 	mov	r5, r0
 c10bd58:	e1a06001 	mov	r6, r1
 c10bd5c:	1a00003e 	bne	c10be5c <__divdi3+0x13c>
 c10bd60:	e1520001 	cmp	r2, r1
 c10bd64:	9a00004c 	bls	c10be9c <__divdi3+0x17c>
 c10bd68:	e1a00002 	mov	r0, r2
 c10bd6c:	eb000222 	bl	c10c5fc <__clzsi2>
 c10bd70:	e3500000 	cmp	r0, #0
 c10bd74:	12603020 	rsbne	r3, r0, #32
 c10bd78:	11a0333b 	lsrne	r3, fp, r3
 c10bd7c:	11a04019 	lslne	r4, r9, r0
 c10bd80:	11836018 	orrne	r6, r3, r8, lsl r0
 c10bd84:	e1a09824 	lsr	r9, r4, #16
 c10bd88:	11a0501b 	lslne	r5, fp, r0
 c10bd8c:	e1a01009 	mov	r1, r9
 c10bd90:	e1a00006 	mov	r0, r6
 c10bd94:	ebfffc84 	bl	c10afac <__aeabi_uidiv>
 c10bd98:	e1a01009 	mov	r1, r9
 c10bd9c:	e1a0a000 	mov	sl, r0
 c10bda0:	e1a00006 	mov	r0, r6
 c10bda4:	ebfffcbd 	bl	c10b0a0 <__aeabi_uidivmod>
 c10bda8:	e1a08804 	lsl	r8, r4, #16
 c10bdac:	e1a08828 	lsr	r8, r8, #16
 c10bdb0:	e0030a98 	mul	r3, r8, sl
 c10bdb4:	e1a0b825 	lsr	fp, r5, #16
 c10bdb8:	e18bb801 	orr	fp, fp, r1, lsl #16
 c10bdbc:	e153000b 	cmp	r3, fp
 c10bdc0:	9a000005 	bls	c10bddc <__divdi3+0xbc>
 c10bdc4:	e09bb004 	adds	fp, fp, r4
 c10bdc8:	e24aa001 	sub	sl, sl, #1
 c10bdcc:	2a000002 	bcs	c10bddc <__divdi3+0xbc>
 c10bdd0:	e153000b 	cmp	r3, fp
 c10bdd4:	824aa001 	subhi	sl, sl, #1
 c10bdd8:	808bb004 	addhi	fp, fp, r4
 c10bddc:	e063b00b 	rsb	fp, r3, fp
 c10bde0:	e1a01009 	mov	r1, r9
 c10bde4:	e1a0000b 	mov	r0, fp
 c10bde8:	ebfffc6f 	bl	c10afac <__aeabi_uidiv>
 c10bdec:	e1a01009 	mov	r1, r9
 c10bdf0:	e1a06000 	mov	r6, r0
 c10bdf4:	e1a0000b 	mov	r0, fp
 c10bdf8:	ebfffca8 	bl	c10b0a0 <__aeabi_uidivmod>
 c10bdfc:	e0080896 	mul	r8, r6, r8
 c10be00:	e1a00805 	lsl	r0, r5, #16
 c10be04:	e1a05820 	lsr	r5, r0, #16
 c10be08:	e1855801 	orr	r5, r5, r1, lsl #16
 c10be0c:	e1580005 	cmp	r8, r5
 c10be10:	9a000004 	bls	c10be28 <__divdi3+0x108>
 c10be14:	e0955004 	adds	r5, r5, r4
 c10be18:	e2466001 	sub	r6, r6, #1
 c10be1c:	2a000001 	bcs	c10be28 <__divdi3+0x108>
 c10be20:	e1580005 	cmp	r8, r5
 c10be24:	82466001 	subhi	r6, r6, #1
 c10be28:	e186680a 	orr	r6, r6, sl, lsl #16
 c10be2c:	e3a09000 	mov	r9, #0
 c10be30:	e3570000 	cmp	r7, #0
 c10be34:	e1a03006 	mov	r3, r6
 c10be38:	e1a04009 	mov	r4, r9
 c10be3c:	0a000001 	beq	c10be48 <__divdi3+0x128>
 c10be40:	e2733000 	rsbs	r3, r3, #0
 c10be44:	e2e44000 	rsc	r4, r4, #0
 c10be48:	e1a00003 	mov	r0, r3
 c10be4c:	e1a01004 	mov	r1, r4
 c10be50:	e28dd014 	add	sp, sp, #20
 c10be54:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c10be58:	e12fff1e 	bx	lr
 c10be5c:	e15a0001 	cmp	sl, r1
 c10be60:	83a09000 	movhi	r9, #0
 c10be64:	81a06009 	movhi	r6, r9
 c10be68:	8afffff0 	bhi	c10be30 <__divdi3+0x110>
 c10be6c:	e1a00003 	mov	r0, r3
 c10be70:	eb0001e1 	bl	c10c5fc <__clzsi2>
 c10be74:	e2504000 	subs	r4, r0, #0
 c10be78:	1a00007a 	bne	c10c068 <__divdi3+0x348>
 c10be7c:	e15a0008 	cmp	sl, r8
 c10be80:	2159000b 	cmpcs	r9, fp
 c10be84:	83a09000 	movhi	r9, #0
 c10be88:	93a09001 	movls	r9, #1
 c10be8c:	93a06001 	movls	r6, #1
 c10be90:	91a09004 	movls	r9, r4
 c10be94:	81a06009 	movhi	r6, r9
 c10be98:	eaffffe4 	b	c10be30 <__divdi3+0x110>
 c10be9c:	e3520000 	cmp	r2, #0
 c10bea0:	1a000003 	bne	c10beb4 <__divdi3+0x194>
 c10bea4:	e3a00001 	mov	r0, #1
 c10bea8:	e1a01002 	mov	r1, r2
 c10beac:	ebfffc3e 	bl	c10afac <__aeabi_uidiv>
 c10beb0:	e1a04000 	mov	r4, r0
 c10beb4:	e1a00004 	mov	r0, r4
 c10beb8:	eb0001cf 	bl	c10c5fc <__clzsi2>
 c10bebc:	e2503000 	subs	r3, r0, #0
 c10bec0:	1a000035 	bne	c10bf9c <__divdi3+0x27c>
 c10bec4:	e3a01001 	mov	r1, #1
 c10bec8:	e1a09804 	lsl	r9, r4, #16
 c10becc:	e58d1008 	str	r1, [sp, #8]
 c10bed0:	e0646006 	rsb	r6, r4, r6
 c10bed4:	e1a08824 	lsr	r8, r4, #16
 c10bed8:	e1a09829 	lsr	r9, r9, #16
 c10bedc:	e1a01008 	mov	r1, r8
 c10bee0:	e1a00006 	mov	r0, r6
 c10bee4:	ebfffc30 	bl	c10afac <__aeabi_uidiv>
 c10bee8:	e1a01008 	mov	r1, r8
 c10beec:	e1a0a000 	mov	sl, r0
 c10bef0:	e1a00006 	mov	r0, r6
 c10bef4:	ebfffc69 	bl	c10b0a0 <__aeabi_uidivmod>
 c10bef8:	e0030a99 	mul	r3, r9, sl
 c10befc:	e1a0c825 	lsr	ip, r5, #16
 c10bf00:	e18cb801 	orr	fp, ip, r1, lsl #16
 c10bf04:	e153000b 	cmp	r3, fp
 c10bf08:	9a000005 	bls	c10bf24 <__divdi3+0x204>
 c10bf0c:	e09bb004 	adds	fp, fp, r4
 c10bf10:	e24aa001 	sub	sl, sl, #1
 c10bf14:	2a000002 	bcs	c10bf24 <__divdi3+0x204>
 c10bf18:	e153000b 	cmp	r3, fp
 c10bf1c:	824aa001 	subhi	sl, sl, #1
 c10bf20:	808bb004 	addhi	fp, fp, r4
 c10bf24:	e063b00b 	rsb	fp, r3, fp
 c10bf28:	e1a01008 	mov	r1, r8
 c10bf2c:	e1a0000b 	mov	r0, fp
 c10bf30:	ebfffc1d 	bl	c10afac <__aeabi_uidiv>
 c10bf34:	e1a01008 	mov	r1, r8
 c10bf38:	e1a06000 	mov	r6, r0
 c10bf3c:	e1a0000b 	mov	r0, fp
 c10bf40:	ebfffc56 	bl	c10b0a0 <__aeabi_uidivmod>
 c10bf44:	e0090996 	mul	r9, r6, r9
 c10bf48:	e1a00805 	lsl	r0, r5, #16
 c10bf4c:	e1a05820 	lsr	r5, r0, #16
 c10bf50:	e1855801 	orr	r5, r5, r1, lsl #16
 c10bf54:	e1590005 	cmp	r9, r5
 c10bf58:	9a000004 	bls	c10bf70 <__divdi3+0x250>
 c10bf5c:	e0955004 	adds	r5, r5, r4
 c10bf60:	e2466001 	sub	r6, r6, #1
 c10bf64:	2a000001 	bcs	c10bf70 <__divdi3+0x250>
 c10bf68:	e1590005 	cmp	r9, r5
 c10bf6c:	82466001 	subhi	r6, r6, #1
 c10bf70:	e186680a 	orr	r6, r6, sl, lsl #16
 c10bf74:	e59d9008 	ldr	r9, [sp, #8]
 c10bf78:	eaffffac 	b	c10be30 <__divdi3+0x110>
 c10bf7c:	e1e07007 	mvn	r7, r7
 c10bf80:	e2722000 	rsbs	r2, r2, #0
 c10bf84:	e2e33000 	rsc	r3, r3, #0
 c10bf88:	eaffff6c 	b	c10bd40 <__divdi3+0x20>
 c10bf8c:	e2700000 	rsbs	r0, r0, #0
 c10bf90:	e2e11000 	rsc	r1, r1, #0
 c10bf94:	e3e07000 	mvn	r7, #0
 c10bf98:	eaffff66 	b	c10bd38 <__divdi3+0x18>
 c10bf9c:	e2638020 	rsb	r8, r3, #32
 c10bfa0:	e1a0b835 	lsr	fp, r5, r8
 c10bfa4:	e1a04314 	lsl	r4, r4, r3
 c10bfa8:	e1a0a836 	lsr	sl, r6, r8
 c10bfac:	e18be316 	orr	lr, fp, r6, lsl r3
 c10bfb0:	e1a08824 	lsr	r8, r4, #16
 c10bfb4:	e1a0c804 	lsl	ip, r4, #16
 c10bfb8:	e1a01008 	mov	r1, r8
 c10bfbc:	e1a0000a 	mov	r0, sl
 c10bfc0:	e1a0982c 	lsr	r9, ip, #16
 c10bfc4:	e1a05315 	lsl	r5, r5, r3
 c10bfc8:	e58de008 	str	lr, [sp, #8]
 c10bfcc:	ebfffbf6 	bl	c10afac <__aeabi_uidiv>
 c10bfd0:	e1a01008 	mov	r1, r8
 c10bfd4:	e1a0b000 	mov	fp, r0
 c10bfd8:	e1a0000a 	mov	r0, sl
 c10bfdc:	ebfffc2f 	bl	c10b0a0 <__aeabi_uidivmod>
 c10bfe0:	e0030b99 	mul	r3, r9, fp
 c10bfe4:	e59d2008 	ldr	r2, [sp, #8]
 c10bfe8:	e1a06822 	lsr	r6, r2, #16
 c10bfec:	e1866801 	orr	r6, r6, r1, lsl #16
 c10bff0:	e1530006 	cmp	r3, r6
 c10bff4:	9a000002 	bls	c10c004 <__divdi3+0x2e4>
 c10bff8:	e0966004 	adds	r6, r6, r4
 c10bffc:	e24bb001 	sub	fp, fp, #1
 c10c000:	3a00006c 	bcc	c10c1b8 <__divdi3+0x498>
 c10c004:	e0636006 	rsb	r6, r3, r6
 c10c008:	e1a01008 	mov	r1, r8
 c10c00c:	e1a00006 	mov	r0, r6
 c10c010:	ebfffbe5 	bl	c10afac <__aeabi_uidiv>
 c10c014:	e1a01008 	mov	r1, r8
 c10c018:	e1a0a000 	mov	sl, r0
 c10c01c:	e1a00006 	mov	r0, r6
 c10c020:	ebfffc1e 	bl	c10b0a0 <__aeabi_uidivmod>
 c10c024:	e0030a99 	mul	r3, r9, sl
 c10c028:	e59d2008 	ldr	r2, [sp, #8]
 c10c02c:	e1a06802 	lsl	r6, r2, #16
 c10c030:	e1a00826 	lsr	r0, r6, #16
 c10c034:	e1806801 	orr	r6, r0, r1, lsl #16
 c10c038:	e1530006 	cmp	r3, r6
 c10c03c:	9a000005 	bls	c10c058 <__divdi3+0x338>
 c10c040:	e0966004 	adds	r6, r6, r4
 c10c044:	e24aa001 	sub	sl, sl, #1
 c10c048:	2a000002 	bcs	c10c058 <__divdi3+0x338>
 c10c04c:	e1530006 	cmp	r3, r6
 c10c050:	824aa001 	subhi	sl, sl, #1
 c10c054:	80866004 	addhi	r6, r6, r4
 c10c058:	e0636006 	rsb	r6, r3, r6
 c10c05c:	e18a380b 	orr	r3, sl, fp, lsl #16
 c10c060:	e58d3008 	str	r3, [sp, #8]
 c10c064:	eaffff9c 	b	c10bedc <__divdi3+0x1bc>
 c10c068:	e2641020 	rsb	r1, r4, #32
 c10c06c:	e1a00139 	lsr	r0, r9, r1
 c10c070:	e1a0213b 	lsr	r2, fp, r1
 c10c074:	e180a41a 	orr	sl, r0, sl, lsl r4
 c10c078:	e1a06138 	lsr	r6, r8, r1
 c10c07c:	e1828418 	orr	r8, r2, r8, lsl r4
 c10c080:	e1a0380a 	lsl	r3, sl, #16
 c10c084:	e1a0b82a 	lsr	fp, sl, #16
 c10c088:	e1a0e823 	lsr	lr, r3, #16
 c10c08c:	e1a0100b 	mov	r1, fp
 c10c090:	e1a00006 	mov	r0, r6
 c10c094:	e58d8008 	str	r8, [sp, #8]
 c10c098:	e58de00c 	str	lr, [sp, #12]
 c10c09c:	ebfffbc2 	bl	c10afac <__aeabi_uidiv>
 c10c0a0:	e1a0100b 	mov	r1, fp
 c10c0a4:	e1a08000 	mov	r8, r0
 c10c0a8:	e1a00006 	mov	r0, r6
 c10c0ac:	ebfffbfb 	bl	c10b0a0 <__aeabi_uidivmod>
 c10c0b0:	e59dc00c 	ldr	ip, [sp, #12]
 c10c0b4:	e002089c 	mul	r2, ip, r8
 c10c0b8:	e59d3008 	ldr	r3, [sp, #8]
 c10c0bc:	e1a06823 	lsr	r6, r3, #16
 c10c0c0:	e1861801 	orr	r1, r6, r1, lsl #16
 c10c0c4:	e1520001 	cmp	r2, r1
 c10c0c8:	e1a03419 	lsl	r3, r9, r4
 c10c0cc:	9a000002 	bls	c10c0dc <__divdi3+0x3bc>
 c10c0d0:	e091100a 	adds	r1, r1, sl
 c10c0d4:	e2488001 	sub	r8, r8, #1
 c10c0d8:	3a000032 	bcc	c10c1a8 <__divdi3+0x488>
 c10c0dc:	e0629001 	rsb	r9, r2, r1
 c10c0e0:	e1a00009 	mov	r0, r9
 c10c0e4:	e1a0100b 	mov	r1, fp
 c10c0e8:	e58d3004 	str	r3, [sp, #4]
 c10c0ec:	ebfffbae 	bl	c10afac <__aeabi_uidiv>
 c10c0f0:	e1a0100b 	mov	r1, fp
 c10c0f4:	e1a06000 	mov	r6, r0
 c10c0f8:	e1a00009 	mov	r0, r9
 c10c0fc:	ebfffbe7 	bl	c10b0a0 <__aeabi_uidivmod>
 c10c100:	e59d000c 	ldr	r0, [sp, #12]
 c10c104:	e0020690 	mul	r2, r0, r6
 c10c108:	e59d3008 	ldr	r3, [sp, #8]
 c10c10c:	e1a0c803 	lsl	ip, r3, #16
 c10c110:	e1a0982c 	lsr	r9, ip, #16
 c10c114:	e1890801 	orr	r0, r9, r1, lsl #16
 c10c118:	e1520000 	cmp	r2, r0
 c10c11c:	e59d3004 	ldr	r3, [sp, #4]
 c10c120:	9a000002 	bls	c10c130 <__divdi3+0x410>
 c10c124:	e090000a 	adds	r0, r0, sl
 c10c128:	e2466001 	sub	r6, r6, #1
 c10c12c:	3a000019 	bcc	c10c198 <__divdi3+0x478>
 c10c130:	e062e000 	rsb	lr, r2, r0
 c10c134:	e1866808 	orr	r6, r6, r8, lsl #16
 c10c138:	e1a02826 	lsr	r2, r6, #16
 c10c13c:	e1a01823 	lsr	r1, r3, #16
 c10c140:	e1c6c802 	bic	ip, r6, r2, lsl #16
 c10c144:	e1c39801 	bic	r9, r3, r1, lsl #16
 c10c148:	e003099c 	mul	r3, ip, r9
 c10c14c:	e0090992 	mul	r9, r2, r9
 c10c150:	e00c0c91 	mul	ip, r1, ip
 c10c154:	e0010192 	mul	r1, r2, r1
 c10c158:	e099c00c 	adds	ip, r9, ip
 c10c15c:	22811801 	addcs	r1, r1, #65536	; 0x10000
 c10c160:	e093380c 	adds	r3, r3, ip, lsl #16
 c10c164:	e0a1182c 	adc	r1, r1, ip, lsr #16
 c10c168:	e15e0001 	cmp	lr, r1
 c10c16c:	3a000006 	bcc	c10c18c <__divdi3+0x46c>
 c10c170:	13a02000 	movne	r2, #0
 c10c174:	03a02001 	moveq	r2, #1
 c10c178:	e1530415 	cmp	r3, r5, lsl r4
 c10c17c:	93a09000 	movls	r9, #0
 c10c180:	82029001 	andhi	r9, r2, #1
 c10c184:	e3590000 	cmp	r9, #0
 c10c188:	0affff28 	beq	c10be30 <__divdi3+0x110>
 c10c18c:	e2466001 	sub	r6, r6, #1
 c10c190:	e3a09000 	mov	r9, #0
 c10c194:	eaffff25 	b	c10be30 <__divdi3+0x110>
 c10c198:	e1520000 	cmp	r2, r0
 c10c19c:	82466001 	subhi	r6, r6, #1
 c10c1a0:	8080000a 	addhi	r0, r0, sl
 c10c1a4:	eaffffe1 	b	c10c130 <__divdi3+0x410>
 c10c1a8:	e1520001 	cmp	r2, r1
 c10c1ac:	82488001 	subhi	r8, r8, #1
 c10c1b0:	8081100a 	addhi	r1, r1, sl
 c10c1b4:	eaffffc8 	b	c10c0dc <__divdi3+0x3bc>
 c10c1b8:	e1530006 	cmp	r3, r6
 c10c1bc:	824bb001 	subhi	fp, fp, #1
 c10c1c0:	80866004 	addhi	r6, r6, r4
 c10c1c4:	eaffff8e 	b	c10c004 <__divdi3+0x2e4>

0c10c1c8 <__udivdi3>:
 c10c1c8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c10c1cc:	e2538000 	subs	r8, r3, #0
 c10c1d0:	e24dd00c 	sub	sp, sp, #12
 c10c1d4:	e1a05000 	mov	r5, r0
 c10c1d8:	e1a04001 	mov	r4, r1
 c10c1dc:	e1a06002 	mov	r6, r2
 c10c1e0:	e1a0a002 	mov	sl, r2
 c10c1e4:	e1a0b000 	mov	fp, r0
 c10c1e8:	e1a07001 	mov	r7, r1
 c10c1ec:	1a000037 	bne	c10c2d0 <__udivdi3+0x108>
 c10c1f0:	e1520001 	cmp	r2, r1
 c10c1f4:	9a000045 	bls	c10c310 <__udivdi3+0x148>
 c10c1f8:	e1a00002 	mov	r0, r2
 c10c1fc:	eb0000fe 	bl	c10c5fc <__clzsi2>
 c10c200:	e3500000 	cmp	r0, #0
 c10c204:	12603020 	rsbne	r3, r0, #32
 c10c208:	11a03335 	lsrne	r3, r5, r3
 c10c20c:	11a0a016 	lslne	sl, r6, r0
 c10c210:	11837014 	orrne	r7, r3, r4, lsl r0
 c10c214:	e1a0482a 	lsr	r4, sl, #16
 c10c218:	11a0b015 	lslne	fp, r5, r0
 c10c21c:	e1a01004 	mov	r1, r4
 c10c220:	e1a00007 	mov	r0, r7
 c10c224:	ebfffb60 	bl	c10afac <__aeabi_uidiv>
 c10c228:	e1a01004 	mov	r1, r4
 c10c22c:	e1a08000 	mov	r8, r0
 c10c230:	e1a00007 	mov	r0, r7
 c10c234:	ebfffb99 	bl	c10b0a0 <__aeabi_uidivmod>
 c10c238:	e1a0680a 	lsl	r6, sl, #16
 c10c23c:	e1a06826 	lsr	r6, r6, #16
 c10c240:	e0030896 	mul	r3, r6, r8
 c10c244:	e1a0782b 	lsr	r7, fp, #16
 c10c248:	e1877801 	orr	r7, r7, r1, lsl #16
 c10c24c:	e1530007 	cmp	r3, r7
 c10c250:	9a000005 	bls	c10c26c <__udivdi3+0xa4>
 c10c254:	e097700a 	adds	r7, r7, sl
 c10c258:	e2488001 	sub	r8, r8, #1
 c10c25c:	2a000002 	bcs	c10c26c <__udivdi3+0xa4>
 c10c260:	e1530007 	cmp	r3, r7
 c10c264:	82488001 	subhi	r8, r8, #1
 c10c268:	8087700a 	addhi	r7, r7, sl
 c10c26c:	e0637007 	rsb	r7, r3, r7
 c10c270:	e1a01004 	mov	r1, r4
 c10c274:	e1a00007 	mov	r0, r7
 c10c278:	ebfffb4b 	bl	c10afac <__aeabi_uidiv>
 c10c27c:	e1a01004 	mov	r1, r4
 c10c280:	e1a05000 	mov	r5, r0
 c10c284:	e1a00007 	mov	r0, r7
 c10c288:	ebfffb84 	bl	c10b0a0 <__aeabi_uidivmod>
 c10c28c:	e0060695 	mul	r6, r5, r6
 c10c290:	e1a0080b 	lsl	r0, fp, #16
 c10c294:	e1a0b820 	lsr	fp, r0, #16
 c10c298:	e18bb801 	orr	fp, fp, r1, lsl #16
 c10c29c:	e156000b 	cmp	r6, fp
 c10c2a0:	9a000004 	bls	c10c2b8 <__udivdi3+0xf0>
 c10c2a4:	e09bb00a 	adds	fp, fp, sl
 c10c2a8:	e2455001 	sub	r5, r5, #1
 c10c2ac:	2a000001 	bcs	c10c2b8 <__udivdi3+0xf0>
 c10c2b0:	e156000b 	cmp	r6, fp
 c10c2b4:	82455001 	subhi	r5, r5, #1
 c10c2b8:	e1858808 	orr	r8, r5, r8, lsl #16
 c10c2bc:	e3a01000 	mov	r1, #0
 c10c2c0:	e1a00008 	mov	r0, r8
 c10c2c4:	e28dd00c 	add	sp, sp, #12
 c10c2c8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c10c2cc:	e12fff1e 	bx	lr
 c10c2d0:	e1580001 	cmp	r8, r1
 c10c2d4:	83a01000 	movhi	r1, #0
 c10c2d8:	81a08001 	movhi	r8, r1
 c10c2dc:	8afffff7 	bhi	c10c2c0 <__udivdi3+0xf8>
 c10c2e0:	e1a00008 	mov	r0, r8
 c10c2e4:	eb0000c4 	bl	c10c5fc <__clzsi2>
 c10c2e8:	e2507000 	subs	r7, r0, #0
 c10c2ec:	1a00003e 	bne	c10c3ec <__udivdi3+0x224>
 c10c2f0:	e1580004 	cmp	r8, r4
 c10c2f4:	21560005 	cmpcs	r6, r5
 c10c2f8:	83a01000 	movhi	r1, #0
 c10c2fc:	93a01001 	movls	r1, #1
 c10c300:	93a08001 	movls	r8, #1
 c10c304:	91a01007 	movls	r1, r7
 c10c308:	81a08001 	movhi	r8, r1
 c10c30c:	eaffffeb 	b	c10c2c0 <__udivdi3+0xf8>
 c10c310:	e3520000 	cmp	r2, #0
 c10c314:	1a000003 	bne	c10c328 <__udivdi3+0x160>
 c10c318:	e3a00001 	mov	r0, #1
 c10c31c:	e1a01002 	mov	r1, r2
 c10c320:	ebfffb21 	bl	c10afac <__aeabi_uidiv>
 c10c324:	e1a0a000 	mov	sl, r0
 c10c328:	e1a0000a 	mov	r0, sl
 c10c32c:	eb0000b2 	bl	c10c5fc <__clzsi2>
 c10c330:	e2503000 	subs	r3, r0, #0
 c10c334:	1a000075 	bne	c10c510 <__udivdi3+0x348>
 c10c338:	e1a0180a 	lsl	r1, sl, #16
 c10c33c:	e06a4004 	rsb	r4, sl, r4
 c10c340:	e1a0982a 	lsr	r9, sl, #16
 c10c344:	e1a06821 	lsr	r6, r1, #16
 c10c348:	e3a07001 	mov	r7, #1
 c10c34c:	e1a01009 	mov	r1, r9
 c10c350:	e1a00004 	mov	r0, r4
 c10c354:	ebfffb14 	bl	c10afac <__aeabi_uidiv>
 c10c358:	e1a01009 	mov	r1, r9
 c10c35c:	e1a05000 	mov	r5, r0
 c10c360:	e1a00004 	mov	r0, r4
 c10c364:	ebfffb4d 	bl	c10b0a0 <__aeabi_uidivmod>
 c10c368:	e0030596 	mul	r3, r6, r5
 c10c36c:	e1a0282b 	lsr	r2, fp, #16
 c10c370:	e1824801 	orr	r4, r2, r1, lsl #16
 c10c374:	e1530004 	cmp	r3, r4
 c10c378:	9a000005 	bls	c10c394 <__udivdi3+0x1cc>
 c10c37c:	e094400a 	adds	r4, r4, sl
 c10c380:	e2455001 	sub	r5, r5, #1
 c10c384:	2a000002 	bcs	c10c394 <__udivdi3+0x1cc>
 c10c388:	e1530004 	cmp	r3, r4
 c10c38c:	82455001 	subhi	r5, r5, #1
 c10c390:	8084400a 	addhi	r4, r4, sl
 c10c394:	e0634004 	rsb	r4, r3, r4
 c10c398:	e1a01009 	mov	r1, r9
 c10c39c:	e1a00004 	mov	r0, r4
 c10c3a0:	ebfffb01 	bl	c10afac <__aeabi_uidiv>
 c10c3a4:	e1a01009 	mov	r1, r9
 c10c3a8:	e1a08000 	mov	r8, r0
 c10c3ac:	e1a00004 	mov	r0, r4
 c10c3b0:	ebfffb3a 	bl	c10b0a0 <__aeabi_uidivmod>
 c10c3b4:	e0060698 	mul	r6, r8, r6
 c10c3b8:	e1a0b80b 	lsl	fp, fp, #16
 c10c3bc:	e1a0382b 	lsr	r3, fp, #16
 c10c3c0:	e183b801 	orr	fp, r3, r1, lsl #16
 c10c3c4:	e156000b 	cmp	r6, fp
 c10c3c8:	9a000004 	bls	c10c3e0 <__udivdi3+0x218>
 c10c3cc:	e09bb00a 	adds	fp, fp, sl
 c10c3d0:	e2488001 	sub	r8, r8, #1
 c10c3d4:	2a000001 	bcs	c10c3e0 <__udivdi3+0x218>
 c10c3d8:	e156000b 	cmp	r6, fp
 c10c3dc:	82488001 	subhi	r8, r8, #1
 c10c3e0:	e1888805 	orr	r8, r8, r5, lsl #16
 c10c3e4:	e1a01007 	mov	r1, r7
 c10c3e8:	eaffffb4 	b	c10c2c0 <__udivdi3+0xf8>
 c10c3ec:	e267a020 	rsb	sl, r7, #32
 c10c3f0:	e1a01a36 	lsr	r1, r6, sl
 c10c3f4:	e1a02a35 	lsr	r2, r5, sl
 c10c3f8:	e1818718 	orr	r8, r1, r8, lsl r7
 c10c3fc:	e1a0ba34 	lsr	fp, r4, sl
 c10c400:	e1829714 	orr	r9, r2, r4, lsl r7
 c10c404:	e1a0a828 	lsr	sl, r8, #16
 c10c408:	e1a0e808 	lsl	lr, r8, #16
 c10c40c:	e1a0100a 	mov	r1, sl
 c10c410:	e1a0000b 	mov	r0, fp
 c10c414:	e1a0482e 	lsr	r4, lr, #16
 c10c418:	e58d9004 	str	r9, [sp, #4]
 c10c41c:	ebfffae2 	bl	c10afac <__aeabi_uidiv>
 c10c420:	e1a0100a 	mov	r1, sl
 c10c424:	e1a09000 	mov	r9, r0
 c10c428:	e1a0000b 	mov	r0, fp
 c10c42c:	ebfffb1b 	bl	c10b0a0 <__aeabi_uidivmod>
 c10c430:	e0020994 	mul	r2, r4, r9
 c10c434:	e59d0004 	ldr	r0, [sp, #4]
 c10c438:	e1a0c820 	lsr	ip, r0, #16
 c10c43c:	e18cb801 	orr	fp, ip, r1, lsl #16
 c10c440:	e152000b 	cmp	r2, fp
 c10c444:	e1a03716 	lsl	r3, r6, r7
 c10c448:	9a000002 	bls	c10c458 <__udivdi3+0x290>
 c10c44c:	e09bb008 	adds	fp, fp, r8
 c10c450:	e2499001 	sub	r9, r9, #1
 c10c454:	3a000060 	bcc	c10c5dc <__udivdi3+0x414>
 c10c458:	e062b00b 	rsb	fp, r2, fp
 c10c45c:	e1a0100a 	mov	r1, sl
 c10c460:	e1a0000b 	mov	r0, fp
 c10c464:	e58d3000 	str	r3, [sp]
 c10c468:	ebfffacf 	bl	c10afac <__aeabi_uidiv>
 c10c46c:	e1a0100a 	mov	r1, sl
 c10c470:	e1a06000 	mov	r6, r0
 c10c474:	e1a0000b 	mov	r0, fp
 c10c478:	ebfffb08 	bl	c10b0a0 <__aeabi_uidivmod>
 c10c47c:	e0040496 	mul	r4, r6, r4
 c10c480:	e59d0004 	ldr	r0, [sp, #4]
 c10c484:	e1a0c800 	lsl	ip, r0, #16
 c10c488:	e1a0382c 	lsr	r3, ip, #16
 c10c48c:	e1832801 	orr	r2, r3, r1, lsl #16
 c10c490:	e1540002 	cmp	r4, r2
 c10c494:	e59d3000 	ldr	r3, [sp]
 c10c498:	9a000002 	bls	c10c4a8 <__udivdi3+0x2e0>
 c10c49c:	e0922008 	adds	r2, r2, r8
 c10c4a0:	e2466001 	sub	r6, r6, #1
 c10c4a4:	3a000048 	bcc	c10c5cc <__udivdi3+0x404>
 c10c4a8:	e0644002 	rsb	r4, r4, r2
 c10c4ac:	e1868809 	orr	r8, r6, r9, lsl #16
 c10c4b0:	e1a02828 	lsr	r2, r8, #16
 c10c4b4:	e1a0e823 	lsr	lr, r3, #16
 c10c4b8:	e1c80802 	bic	r0, r8, r2, lsl #16
 c10c4bc:	e1c3680e 	bic	r6, r3, lr, lsl #16
 c10c4c0:	e0030690 	mul	r3, r0, r6
 c10c4c4:	e0060692 	mul	r6, r2, r6
 c10c4c8:	e000009e 	mul	r0, lr, r0
 c10c4cc:	e00e0e92 	mul	lr, r2, lr
 c10c4d0:	e0960000 	adds	r0, r6, r0
 c10c4d4:	228ee801 	addcs	lr, lr, #65536	; 0x10000
 c10c4d8:	e0933800 	adds	r3, r3, r0, lsl #16
 c10c4dc:	e0aee820 	adc	lr, lr, r0, lsr #16
 c10c4e0:	e154000e 	cmp	r4, lr
 c10c4e4:	3a000006 	bcc	c10c504 <__udivdi3+0x33c>
 c10c4e8:	13a02000 	movne	r2, #0
 c10c4ec:	03a02001 	moveq	r2, #1
 c10c4f0:	e1530715 	cmp	r3, r5, lsl r7
 c10c4f4:	93a01000 	movls	r1, #0
 c10c4f8:	82021001 	andhi	r1, r2, #1
 c10c4fc:	e3510000 	cmp	r1, #0
 c10c500:	0affff6e 	beq	c10c2c0 <__udivdi3+0xf8>
 c10c504:	e2488001 	sub	r8, r8, #1
 c10c508:	e3a01000 	mov	r1, #0
 c10c50c:	eaffff6b 	b	c10c2c0 <__udivdi3+0xf8>
 c10c510:	e2639020 	rsb	r9, r3, #32
 c10c514:	e1a0a31a 	lsl	sl, sl, r3
 c10c518:	e1a07934 	lsr	r7, r4, r9
 c10c51c:	e1a08935 	lsr	r8, r5, r9
 c10c520:	e1a0982a 	lsr	r9, sl, #16
 c10c524:	e1a0280a 	lsl	r2, sl, #16
 c10c528:	e1a01009 	mov	r1, r9
 c10c52c:	e1a00007 	mov	r0, r7
 c10c530:	e1888314 	orr	r8, r8, r4, lsl r3
 c10c534:	e1a0b315 	lsl	fp, r5, r3
 c10c538:	e1a06822 	lsr	r6, r2, #16
 c10c53c:	ebfffa9a 	bl	c10afac <__aeabi_uidiv>
 c10c540:	e1a01009 	mov	r1, r9
 c10c544:	e1a05000 	mov	r5, r0
 c10c548:	e1a00007 	mov	r0, r7
 c10c54c:	ebfffad3 	bl	c10b0a0 <__aeabi_uidivmod>
 c10c550:	e0030596 	mul	r3, r6, r5
 c10c554:	e1a04828 	lsr	r4, r8, #16
 c10c558:	e1844801 	orr	r4, r4, r1, lsl #16
 c10c55c:	e1530004 	cmp	r3, r4
 c10c560:	9a000002 	bls	c10c570 <__udivdi3+0x3a8>
 c10c564:	e094400a 	adds	r4, r4, sl
 c10c568:	e2455001 	sub	r5, r5, #1
 c10c56c:	3a00001e 	bcc	c10c5ec <__udivdi3+0x424>
 c10c570:	e0634004 	rsb	r4, r3, r4
 c10c574:	e1a01009 	mov	r1, r9
 c10c578:	e1a00004 	mov	r0, r4
 c10c57c:	ebfffa8a 	bl	c10afac <__aeabi_uidiv>
 c10c580:	e1a01009 	mov	r1, r9
 c10c584:	e1a07000 	mov	r7, r0
 c10c588:	e1a00004 	mov	r0, r4
 c10c58c:	ebfffac3 	bl	c10b0a0 <__aeabi_uidivmod>
 c10c590:	e0030796 	mul	r3, r6, r7
 c10c594:	e1a00808 	lsl	r0, r8, #16
 c10c598:	e1a0c820 	lsr	ip, r0, #16
 c10c59c:	e18c4801 	orr	r4, ip, r1, lsl #16
 c10c5a0:	e1530004 	cmp	r3, r4
 c10c5a4:	9a000005 	bls	c10c5c0 <__udivdi3+0x3f8>
 c10c5a8:	e094400a 	adds	r4, r4, sl
 c10c5ac:	e2477001 	sub	r7, r7, #1
 c10c5b0:	2a000002 	bcs	c10c5c0 <__udivdi3+0x3f8>
 c10c5b4:	e1530004 	cmp	r3, r4
 c10c5b8:	82477001 	subhi	r7, r7, #1
 c10c5bc:	8084400a 	addhi	r4, r4, sl
 c10c5c0:	e0634004 	rsb	r4, r3, r4
 c10c5c4:	e1877805 	orr	r7, r7, r5, lsl #16
 c10c5c8:	eaffff5f 	b	c10c34c <__udivdi3+0x184>
 c10c5cc:	e1540002 	cmp	r4, r2
 c10c5d0:	82466001 	subhi	r6, r6, #1
 c10c5d4:	80822008 	addhi	r2, r2, r8
 c10c5d8:	eaffffb2 	b	c10c4a8 <__udivdi3+0x2e0>
 c10c5dc:	e152000b 	cmp	r2, fp
 c10c5e0:	82499001 	subhi	r9, r9, #1
 c10c5e4:	808bb008 	addhi	fp, fp, r8
 c10c5e8:	eaffff9a 	b	c10c458 <__udivdi3+0x290>
 c10c5ec:	e1530004 	cmp	r3, r4
 c10c5f0:	82455001 	subhi	r5, r5, #1
 c10c5f4:	8084400a 	addhi	r4, r4, sl
 c10c5f8:	eaffffdc 	b	c10c570 <__udivdi3+0x3a8>

0c10c5fc <__clzsi2>:
 c10c5fc:	e3a0101c 	mov	r1, #28
 c10c600:	e3500801 	cmp	r0, #65536	; 0x10000
 c10c604:	21a00820 	lsrcs	r0, r0, #16
 c10c608:	22411010 	subcs	r1, r1, #16
 c10c60c:	e3500c01 	cmp	r0, #256	; 0x100
 c10c610:	21a00420 	lsrcs	r0, r0, #8
 c10c614:	22411008 	subcs	r1, r1, #8
 c10c618:	e3500010 	cmp	r0, #16
 c10c61c:	21a00220 	lsrcs	r0, r0, #4
 c10c620:	22411004 	subcs	r1, r1, #4
 c10c624:	e28f2008 	add	r2, pc, #8
 c10c628:	e7d20000 	ldrb	r0, [r2, r0]
 c10c62c:	e0800001 	add	r0, r0, r1
 c10c630:	e12fff1e 	bx	lr
 c10c634:	02020304 	.word	0x02020304
 c10c638:	01010101 	.word	0x01010101
	...

0c10c644 <atoi>:
 c10c644:	e92d4008 	push	{r3, lr}
 c10c648:	e3a01000 	mov	r1, #0
 c10c64c:	e3a0200a 	mov	r2, #10
 c10c650:	eb000079 	bl	c10c83c <strtol>
 c10c654:	e8bd4008 	pop	{r3, lr}
 c10c658:	e12fff1e 	bx	lr

0c10c65c <_atoi_r>:
 c10c65c:	e92d4008 	push	{r3, lr}
 c10c660:	e3a02000 	mov	r2, #0
 c10c664:	e3a0300a 	mov	r3, #10
 c10c668:	eb000001 	bl	c10c674 <_strtol_r>
 c10c66c:	e8bd4008 	pop	{r3, lr}
 c10c670:	e12fff1e 	bx	lr

0c10c674 <_strtol_r>:
 c10c674:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c10c678:	e1a0c001 	mov	ip, r1
 c10c67c:	e59f11b4 	ldr	r1, [pc, #436]	; c10c838 <_strtol_r+0x1c4>
 c10c680:	e24dd014 	sub	sp, sp, #20
 c10c684:	e5914000 	ldr	r4, [r1]
 c10c688:	e58d000c 	str	r0, [sp, #12]
 c10c68c:	e58d2008 	str	r2, [sp, #8]
 c10c690:	e1a07003 	mov	r7, r3
 c10c694:	e1a0300c 	mov	r3, ip
 c10c698:	e4d35001 	ldrb	r5, [r3], #1
 c10c69c:	e0842005 	add	r2, r4, r5
 c10c6a0:	e5d2b001 	ldrb	fp, [r2, #1]
 c10c6a4:	e21bb008 	ands	fp, fp, #8
 c10c6a8:	e1a06003 	mov	r6, r3
 c10c6ac:	1afffff9 	bne	c10c698 <_strtol_r+0x24>
 c10c6b0:	e355002d 	cmp	r5, #45	; 0x2d
 c10c6b4:	0a00004c 	beq	c10c7ec <_strtol_r+0x178>
 c10c6b8:	e355002b 	cmp	r5, #43	; 0x2b
 c10c6bc:	04d65001 	ldrbeq	r5, [r6], #1
 c10c6c0:	e2773001 	rsbs	r3, r7, #1
 c10c6c4:	33a03000 	movcc	r3, #0
 c10c6c8:	e3570000 	cmp	r7, #0
 c10c6cc:	13570010 	cmpne	r7, #16
 c10c6d0:	1a000008 	bne	c10c6f8 <_strtol_r+0x84>
 c10c6d4:	e3550030 	cmp	r5, #48	; 0x30
 c10c6d8:	0a00004d 	beq	c10c814 <_strtol_r+0x1a0>
 c10c6dc:	e3530000 	cmp	r3, #0
 c10c6e0:	0a000004 	beq	c10c6f8 <_strtol_r+0x84>
 c10c6e4:	e3550030 	cmp	r5, #48	; 0x30
 c10c6e8:	03a07008 	moveq	r7, #8
 c10c6ec:	01a0a007 	moveq	sl, r7
 c10c6f0:	0a000001 	beq	c10c6fc <_strtol_r+0x88>
 c10c6f4:	e3a0700a 	mov	r7, #10
 c10c6f8:	e1a0a007 	mov	sl, r7
 c10c6fc:	e35b0000 	cmp	fp, #0
 c10c700:	03e09102 	mvneq	r9, #-2147483648	; 0x80000000
 c10c704:	13a09102 	movne	r9, #-2147483648	; 0x80000000
 c10c708:	e1a00009 	mov	r0, r9
 c10c70c:	e1a0100a 	mov	r1, sl
 c10c710:	e58dc004 	str	ip, [sp, #4]
 c10c714:	ebfffa61 	bl	c10b0a0 <__aeabi_uidivmod>
 c10c718:	e1a00009 	mov	r0, r9
 c10c71c:	e1a08001 	mov	r8, r1
 c10c720:	e1a0100a 	mov	r1, sl
 c10c724:	ebfffa20 	bl	c10afac <__aeabi_uidiv>
 c10c728:	e3a02000 	mov	r2, #0
 c10c72c:	e59dc004 	ldr	ip, [sp, #4]
 c10c730:	e1a01002 	mov	r1, r2
 c10c734:	e0843005 	add	r3, r4, r5
 c10c738:	e5d33001 	ldrb	r3, [r3, #1]
 c10c73c:	e3130004 	tst	r3, #4
 c10c740:	12455030 	subne	r5, r5, #48	; 0x30
 c10c744:	1a000005 	bne	c10c760 <_strtol_r+0xec>
 c10c748:	e2133003 	ands	r3, r3, #3
 c10c74c:	0a000017 	beq	c10c7b0 <_strtol_r+0x13c>
 c10c750:	e3530001 	cmp	r3, #1
 c10c754:	13a03057 	movne	r3, #87	; 0x57
 c10c758:	03a03037 	moveq	r3, #55	; 0x37
 c10c75c:	e0635005 	rsb	r5, r3, r5
 c10c760:	e1570005 	cmp	r7, r5
 c10c764:	da000011 	ble	c10c7b0 <_strtol_r+0x13c>
 c10c768:	e1510000 	cmp	r1, r0
 c10c76c:	93a03000 	movls	r3, #0
 c10c770:	83a03001 	movhi	r3, #1
 c10c774:	e1932fa2 	orrs	r2, r3, r2, lsr #31
 c10c778:	1a000009 	bne	c10c7a4 <_strtol_r+0x130>
 c10c77c:	e1550008 	cmp	r5, r8
 c10c780:	d3a03000 	movle	r3, #0
 c10c784:	c3a03001 	movgt	r3, #1
 c10c788:	e1510000 	cmp	r1, r0
 c10c78c:	13a03000 	movne	r3, #0
 c10c790:	e3530000 	cmp	r3, #0
 c10c794:	0021519a 	mlaeq	r1, sl, r1, r5
 c10c798:	03a02001 	moveq	r2, #1
 c10c79c:	04d65001 	ldrbeq	r5, [r6], #1
 c10c7a0:	0affffe3 	beq	c10c734 <_strtol_r+0xc0>
 c10c7a4:	e3e02000 	mvn	r2, #0
 c10c7a8:	e4d65001 	ldrb	r5, [r6], #1
 c10c7ac:	eaffffe0 	b	c10c734 <_strtol_r+0xc0>
 c10c7b0:	e3720001 	cmn	r2, #1
 c10c7b4:	0a00000f 	beq	c10c7f8 <_strtol_r+0x184>
 c10c7b8:	e35b0000 	cmp	fp, #0
 c10c7bc:	01a00001 	moveq	r0, r1
 c10c7c0:	12610000 	rsbne	r0, r1, #0
 c10c7c4:	e59d3008 	ldr	r3, [sp, #8]
 c10c7c8:	e3530000 	cmp	r3, #0
 c10c7cc:	0a000003 	beq	c10c7e0 <_strtol_r+0x16c>
 c10c7d0:	e3520000 	cmp	r2, #0
 c10c7d4:	e59d1008 	ldr	r1, [sp, #8]
 c10c7d8:	1246c001 	subne	ip, r6, #1
 c10c7dc:	e581c000 	str	ip, [r1]
 c10c7e0:	e28dd014 	add	sp, sp, #20
 c10c7e4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c10c7e8:	e12fff1e 	bx	lr
 c10c7ec:	e4d65001 	ldrb	r5, [r6], #1
 c10c7f0:	e3a0b001 	mov	fp, #1
 c10c7f4:	eaffffb1 	b	c10c6c0 <_strtol_r+0x4c>
 c10c7f8:	e59d100c 	ldr	r1, [sp, #12]
 c10c7fc:	e35b0000 	cmp	fp, #0
 c10c800:	e3a03022 	mov	r3, #34	; 0x22
 c10c804:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
 c10c808:	13a00102 	movne	r0, #-2147483648	; 0x80000000
 c10c80c:	e5813000 	str	r3, [r1]
 c10c810:	eaffffeb 	b	c10c7c4 <_strtol_r+0x150>
 c10c814:	e5d62000 	ldrb	r2, [r6]
 c10c818:	e3520078 	cmp	r2, #120	; 0x78
 c10c81c:	13520058 	cmpne	r2, #88	; 0x58
 c10c820:	1affffad 	bne	c10c6dc <_strtol_r+0x68>
 c10c824:	e3a07010 	mov	r7, #16
 c10c828:	e5d65001 	ldrb	r5, [r6, #1]
 c10c82c:	e1a0a007 	mov	sl, r7
 c10c830:	e2866002 	add	r6, r6, #2
 c10c834:	eaffffb0 	b	c10c6fc <_strtol_r+0x88>
 c10c838:	0c10e750 	.word	0x0c10e750

0c10c83c <strtol>:
 c10c83c:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
 c10c840:	e1a03002 	mov	r3, r2
 c10c844:	e59f2018 	ldr	r2, [pc, #24]	; c10c864 <strtol+0x28>
 c10c848:	e1a04000 	mov	r4, r0
 c10c84c:	e1a0c001 	mov	ip, r1
 c10c850:	e5920000 	ldr	r0, [r2]
 c10c854:	e1a01004 	mov	r1, r4
 c10c858:	e1a0200c 	mov	r2, ip
 c10c85c:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
 c10c860:	eaffff83 	b	c10c674 <_strtol_r>
 c10c864:	0c10e758 	.word	0x0c10e758

0c10c868 <toupper>:
 c10c868:	e59f3018 	ldr	r3, [pc, #24]	; c10c888 <toupper+0x20>
 c10c86c:	e5933000 	ldr	r3, [r3]
 c10c870:	e0833000 	add	r3, r3, r0
 c10c874:	e5d33001 	ldrb	r3, [r3, #1]
 c10c878:	e2033003 	and	r3, r3, #3
 c10c87c:	e3530002 	cmp	r3, #2
 c10c880:	02400020 	subeq	r0, r0, #32
 c10c884:	e12fff1e 	bx	lr
 c10c888:	0c10e750 	.word	0x0c10e750
