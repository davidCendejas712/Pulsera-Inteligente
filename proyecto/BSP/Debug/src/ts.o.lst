   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"ts.c"
  21              	.Ltext0:
  22              		.file 1 "../src/ts.c"
 1996              		.align	1
 1997              	Vxmin:
 1998 0000 0000     		.space	2
 1999              		.align	1
 2000              	Vxmax:
 2001 0002 0000     		.space	2
 2002              		.align	1
 2003              	Vymin:
 2004 0004 0000     		.space	2
 2005              		.align	1
 2006              	Vymax:
 2007 0006 0000     		.space	2
 2008              	state:
 2009 0008 00       		.space	1
 2010 0009 00       		.text
 2011              		.align	2
 2012              		.global	ts_init
 2014              	ts_init:
 2015              	.LFB0:
   1:../src/ts.c   **** 
   2:../src/ts.c   **** #include <s3c44b0x.h>
   3:../src/ts.c   **** #include <s3cev40.h>
   4:../src/ts.c   **** #include <timers.h>
   5:../src/ts.c   **** #include <adc.h>
   6:../src/ts.c   **** #include <lcd.h>
   7:../src/ts.c   **** #include <ts.h>
   8:../src/ts.c   **** 
   9:../src/ts.c   **** #define PX_ERROR    (10)
  10:../src/ts.c   **** 
  11:../src/ts.c   **** static uint16 Vxmin = 0;
  12:../src/ts.c   **** static uint16 Vxmax = 0;
  13:../src/ts.c   **** static uint16 Vymin = 0;
  14:../src/ts.c   **** static uint16 Vymax = 0;
  15:../src/ts.c   **** 
  16:../src/ts.c   **** static uint8 state;
  17:../src/ts.c   **** 
  18:../src/ts.c   **** extern void isr_TS_dummy( void );
  19:../src/ts.c   **** 
  20:../src/ts.c   **** static void ts_scan( uint16 *Vx, uint16 *Vy );
  21:../src/ts.c   **** static void ts_calibrate( void );
  22:../src/ts.c   **** static void ts_sample2coord( uint16 Vx, uint16 Vy, uint16 *x, uint16 *y );
  23:../src/ts.c   **** 
  24:../src/ts.c   **** void ts_init( void )
  25:../src/ts.c   **** {
 2016              		.loc 1 25 0
 2017              		.cfi_startproc
 2018              		@ Function supports interworking.
 2019              		@ args = 0, pretend = 0, frame = 0
 2020              		@ frame_needed = 1, uses_anonymous_args = 0
 2021 0000 0DC0A0E1 		mov	ip, sp
 2022              	.LCFI0:
 2023              		.cfi_def_cfa_register 12
 2024 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2025 0008 04B04CE2 		sub	fp, ip, #4
 2026              		.cfi_offset 14, -8
 2027              		.cfi_offset 13, -12
 2028              		.cfi_offset 11, -16
 2029              	.LCFI1:
 2030              		.cfi_def_cfa 11, 4
  26:../src/ts.c   ****     timers_init();
 2031              		.loc 1 26 0
 2032 000c FEFFFFEB 		bl	timers_init
  27:../src/ts.c   ****     lcd_init();
 2033              		.loc 1 27 0
 2034 0010 FEFFFFEB 		bl	lcd_init
  28:../src/ts.c   ****     adc_init();
 2035              		.loc 1 28 0
 2036 0014 FEFFFFEB 		bl	adc_init
  29:../src/ts.c   ****     PDATE = (1 << 4) | (1 << 5) | (0 << 6) | (1 << 7);
 2037              		.loc 1 29 0
 2038 0018 24309FE5 		ldr	r3, .L2
 2039 001c B020A0E3 		mov	r2, #176
 2040 0020 002083E5 		str	r2, [r3, #0]
  30:../src/ts.c   ****     sw_delay_ms( 1 );
 2041              		.loc 1 30 0
 2042 0024 0100A0E3 		mov	r0, #1
 2043 0028 FEFFFFEB 		bl	sw_delay_ms
  31:../src/ts.c   ****     ts_on();
 2044              		.loc 1 31 0
 2045 002c FEFFFFEB 		bl	ts_on
  32:../src/ts.c   ****     ts_calibrate();
 2046              		.loc 1 32 0
 2047 0030 330000EB 		bl	ts_calibrate
  33:../src/ts.c   ****     ts_off();
 2048              		.loc 1 33 0
 2049 0034 FEFFFFEB 		bl	ts_off
  34:../src/ts.c   **** }
 2050              		.loc 1 34 0
 2051 0038 0CD04BE2 		sub	sp, fp, #12
 2052 003c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2053 0040 1EFF2FE1 		bx	lr
 2054              	.L3:
 2055              		.align	2
 2056              	.L2:
 2057 0044 2C00D201 		.word	30539820
 2058              		.cfi_endproc
 2059              	.LFE0:
 2061              		.align	2
 2062              		.global	ts_on
 2064              	ts_on:
 2065              	.LFB1:
  35:../src/ts.c   **** 
  36:../src/ts.c   **** void ts_on( void )
  37:../src/ts.c   **** {
 2066              		.loc 1 37 0
 2067              		.cfi_startproc
 2068              		@ Function supports interworking.
 2069              		@ args = 0, pretend = 0, frame = 0
 2070              		@ frame_needed = 1, uses_anonymous_args = 0
 2071 0048 0DC0A0E1 		mov	ip, sp
 2072              	.LCFI2:
 2073              		.cfi_def_cfa_register 12
 2074 004c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2075 0050 04B04CE2 		sub	fp, ip, #4
 2076              		.cfi_offset 14, -8
 2077              		.cfi_offset 13, -12
 2078              		.cfi_offset 11, -16
 2079              	.LCFI3:
 2080              		.cfi_def_cfa 11, 4
  38:../src/ts.c   ****     adc_on();
 2081              		.loc 1 38 0
 2082 0054 FEFFFFEB 		bl	adc_on
  39:../src/ts.c   ****     state = ON;
 2083              		.loc 1 39 0
 2084 0058 10309FE5 		ldr	r3, .L5
 2085 005c 0120A0E3 		mov	r2, #1
 2086 0060 0020C3E5 		strb	r2, [r3, #0]
  40:../src/ts.c   **** }
 2087              		.loc 1 40 0
 2088 0064 0CD04BE2 		sub	sp, fp, #12
 2089 0068 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2090 006c 1EFF2FE1 		bx	lr
 2091              	.L6:
 2092              		.align	2
 2093              	.L5:
 2094 0070 08000000 		.word	state
 2095              		.cfi_endproc
 2096              	.LFE1:
 2098              		.align	2
 2099              		.global	ts_off
 2101              	ts_off:
 2102              	.LFB2:
  41:../src/ts.c   **** 
  42:../src/ts.c   **** void ts_off( void )
  43:../src/ts.c   **** {
 2103              		.loc 1 43 0
 2104              		.cfi_startproc
 2105              		@ Function supports interworking.
 2106              		@ args = 0, pretend = 0, frame = 0
 2107              		@ frame_needed = 1, uses_anonymous_args = 0
 2108 0074 0DC0A0E1 		mov	ip, sp
 2109              	.LCFI4:
 2110              		.cfi_def_cfa_register 12
 2111 0078 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2112 007c 04B04CE2 		sub	fp, ip, #4
 2113              		.cfi_offset 14, -8
 2114              		.cfi_offset 13, -12
 2115              		.cfi_offset 11, -16
 2116              	.LCFI5:
 2117              		.cfi_def_cfa 11, 4
  44:../src/ts.c   ****     adc_off();
 2118              		.loc 1 44 0
 2119 0080 FEFFFFEB 		bl	adc_off
  45:../src/ts.c   ****     state = OFF;
 2120              		.loc 1 45 0
 2121 0084 10309FE5 		ldr	r3, .L8
 2122 0088 0020A0E3 		mov	r2, #0
 2123 008c 0020C3E5 		strb	r2, [r3, #0]
  46:../src/ts.c   **** }
 2124              		.loc 1 46 0
 2125 0090 0CD04BE2 		sub	sp, fp, #12
 2126 0094 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2127 0098 1EFF2FE1 		bx	lr
 2128              	.L9:
 2129              		.align	2
 2130              	.L8:
 2131 009c 08000000 		.word	state
 2132              		.cfi_endproc
 2133              	.LFE2:
 2135              		.align	2
 2136              		.global	ts_status
 2138              	ts_status:
 2139              	.LFB3:
  47:../src/ts.c   **** 
  48:../src/ts.c   **** uint8 ts_status( void )
  49:../src/ts.c   **** {
 2140              		.loc 1 49 0
 2141              		.cfi_startproc
 2142              		@ Function supports interworking.
 2143              		@ args = 0, pretend = 0, frame = 0
 2144              		@ frame_needed = 1, uses_anonymous_args = 0
 2145 00a0 0DC0A0E1 		mov	ip, sp
 2146              	.LCFI6:
 2147              		.cfi_def_cfa_register 12
 2148 00a4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2149 00a8 04B04CE2 		sub	fp, ip, #4
 2150              		.cfi_offset 14, -8
 2151              		.cfi_offset 13, -12
 2152              		.cfi_offset 11, -16
 2153              	.LCFI7:
 2154              		.cfi_def_cfa 11, 4
  50:../src/ts.c   ****     return state;
 2155              		.loc 1 50 0
 2156 00ac 10309FE5 		ldr	r3, .L11
 2157 00b0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  51:../src/ts.c   **** }
 2158              		.loc 1 51 0
 2159 00b4 0300A0E1 		mov	r0, r3
 2160 00b8 0CD04BE2 		sub	sp, fp, #12
 2161 00bc 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2162 00c0 1EFF2FE1 		bx	lr
 2163              	.L12:
 2164              		.align	2
 2165              	.L11:
 2166 00c4 08000000 		.word	state
 2167              		.cfi_endproc
 2168              	.LFE3:
 2170              		.align	2
 2171              		.global	ts_pressed
 2173              	ts_pressed:
 2174              	.LFB4:
  52:../src/ts.c   **** 
  53:../src/ts.c   **** uint8 ts_pressed( void )
  54:../src/ts.c   **** {
 2175              		.loc 1 54 0
 2176              		.cfi_startproc
 2177              		@ Function supports interworking.
 2178              		@ args = 0, pretend = 0, frame = 0
 2179              		@ frame_needed = 1, uses_anonymous_args = 0
 2180 00c8 0DC0A0E1 		mov	ip, sp
 2181              	.LCFI8:
 2182              		.cfi_def_cfa_register 12
 2183 00cc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2184 00d0 04B04CE2 		sub	fp, ip, #4
 2185              		.cfi_offset 14, -8
 2186              		.cfi_offset 13, -12
 2187              		.cfi_offset 11, -16
 2188              	.LCFI9:
 2189              		.cfi_def_cfa 11, 4
  55:../src/ts.c   ****     return (PDATG & (1 << 2)) ? 0 : 1;
 2190              		.loc 1 55 0
 2191 00d4 24309FE5 		ldr	r3, .L14
 2192 00d8 003093E5 		ldr	r3, [r3, #0]
 2193 00dc 043003E2 		and	r3, r3, #4
 2194 00e0 000053E3 		cmp	r3, #0
 2195 00e4 0030A013 		movne	r3, #0
 2196 00e8 0130A003 		moveq	r3, #1
 2197 00ec FF3003E2 		and	r3, r3, #255
  56:../src/ts.c   **** }
 2198              		.loc 1 56 0
 2199 00f0 0300A0E1 		mov	r0, r3
 2200 00f4 0CD04BE2 		sub	sp, fp, #12
 2201 00f8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2202 00fc 1EFF2FE1 		bx	lr
 2203              	.L15:
 2204              		.align	2
 2205              	.L14:
 2206 0100 4400D201 		.word	30539844
 2207              		.cfi_endproc
 2208              	.LFE4:
 2210              		.section	.rodata
 2211              		.align	2
 2212              	.LC0:
 2213 0000 43616C69 		.ascii	"Calibrar pantalla\000"
 2213      62726172 
 2213      2070616E 
 2213      74616C6C 
 2213      6100
 2214 0012 0000     		.align	2
 2215              	.LC1:
 2216 0014 50726573 		.ascii	"Presione en la esquina superior izq\000"
 2216      696F6E65 
 2216      20656E20 
 2216      6C612065 
 2216      73717569 
 2217              		.align	2
 2218              	.LC2:
 2219 0038 50726573 		.ascii	"Presione en la esquina inferior dch\000"
 2219      696F6E65 
 2219      20656E20 
 2219      6C612065 
 2219      73717569 
 2220              		.align	2
 2221              	.LC3:
 2222 005c 50726573 		.ascii	"Presione en el cuadrado del centro\000"
 2222      696F6E65 
 2222      20656E20 
 2222      656C2063 
 2222      75616472 
 2223 007f 00       		.text
 2224              		.align	2
 2226              	ts_calibrate:
 2227              	.LFB5:
  57:../src/ts.c   **** 
  58:../src/ts.c   **** static void ts_calibrate( void )
  59:../src/ts.c   **** {
 2228              		.loc 1 59 0
 2229              		.cfi_startproc
 2230              		@ Function supports interworking.
 2231              		@ args = 0, pretend = 0, frame = 8
 2232              		@ frame_needed = 1, uses_anonymous_args = 0
 2233 0104 0DC0A0E1 		mov	ip, sp
 2234              	.LCFI10:
 2235              		.cfi_def_cfa_register 12
 2236 0108 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2237 010c 04B04CE2 		sub	fp, ip, #4
 2238              		.cfi_offset 14, -8
 2239              		.cfi_offset 13, -12
 2240              		.cfi_offset 11, -16
 2241              	.LCFI11:
 2242              		.cfi_def_cfa 11, 4
 2243 0110 10D04DE2 		sub	sp, sp, #16
  60:../src/ts.c   ****     uint16 x, y;
  61:../src/ts.c   ****     
  62:../src/ts.c   ****     lcd_on();
 2244              		.loc 1 62 0
 2245 0114 FEFFFFEB 		bl	lcd_on
 2246              	.L21:
  63:../src/ts.c   ****     do {    
  64:../src/ts.c   ****         // BORRAR PANTALLA
  65:../src/ts.c   ****         lcd_clear();
 2247              		.loc 1 65 0
 2248 0118 FEFFFFEB 		bl	lcd_clear
  66:../src/ts.c   ****         //  CALIBRACION
  67:../src/ts.c   ****         lcd_puts(100, 112, BLACK, "Calibrar pantalla");
 2249              		.loc 1 67 0
 2250 011c 6400A0E3 		mov	r0, #100
 2251 0120 7010A0E3 		mov	r1, #112
 2252 0124 0F20A0E3 		mov	r2, #15
 2253 0128 98319FE5 		ldr	r3, .L22
 2254 012c FEFFFFEB 		bl	lcd_puts
  68:../src/ts.c   ****         sw_delay_s(2);
 2255              		.loc 1 68 0
 2256 0130 0200A0E3 		mov	r0, #2
 2257 0134 FEFFFFEB 		bl	sw_delay_s
  69:../src/ts.c   ****         //pinta cuadrado en la esquina superior izq
  70:../src/ts.c   ****         lcd_clear();
 2258              		.loc 1 70 0
 2259 0138 FEFFFFEB 		bl	lcd_clear
  71:../src/ts.c   ****         lcd_puts(64, 128, BLACK, "Presione en la esquina superior izq");
 2260              		.loc 1 71 0
 2261 013c 4000A0E3 		mov	r0, #64
 2262 0140 8010A0E3 		mov	r1, #128
 2263 0144 0F20A0E3 		mov	r2, #15
 2264 0148 7C319FE5 		ldr	r3, .L22+4
 2265 014c FEFFFFEB 		bl	lcd_puts
  72:../src/ts.c   ****         lcd_draw_box(0, 0, 5, 5, BLACK, 1);
 2266              		.loc 1 72 0
 2267 0150 0F30A0E3 		mov	r3, #15
 2268 0154 00308DE5 		str	r3, [sp, #0]
 2269 0158 0130A0E3 		mov	r3, #1
 2270 015c 04308DE5 		str	r3, [sp, #4]
 2271 0160 0000A0E3 		mov	r0, #0
 2272 0164 0010A0E3 		mov	r1, #0
 2273 0168 0520A0E3 		mov	r2, #5
 2274 016c 0530A0E3 		mov	r3, #5
 2275 0170 FEFFFFEB 		bl	lcd_draw_box
  73:../src/ts.c   ****     
  74:../src/ts.c   ****         while(!ts_pressed()); // esperamos a que se toque la pantalla
 2276              		.loc 1 74 0
 2277 0174 0000A0E1 		mov	r0, r0	@ nop
 2278              	.L17:
 2279              		.loc 1 74 0 is_stmt 0 discriminator 1
 2280 0178 FEFFFFEB 		bl	ts_pressed
 2281 017c 0030A0E1 		mov	r3, r0
 2282 0180 000053E3 		cmp	r3, #0
 2283 0184 FBFFFF0A 		beq	.L17
  75:../src/ts.c   ****         sw_delay_ms( TS_DOWN_DELAY );
 2284              		.loc 1 75 0 is_stmt 1
 2285 0188 1E00A0E3 		mov	r0, #30
 2286 018c FEFFFFEB 		bl	sw_delay_ms
  76:../src/ts.c   ****         ts_scan( &Vxmin, &Vymax );
 2287              		.loc 1 76 0
 2288 0190 38019FE5 		ldr	r0, .L22+8
 2289 0194 38119FE5 		ldr	r1, .L22+12
 2290 0198 D50000EB 		bl	ts_scan
  77:../src/ts.c   ****         while( ts_pressed() ); // esperamos a que se deje de tocar
 2291              		.loc 1 77 0
 2292 019c 0000A0E1 		mov	r0, r0	@ nop
 2293              	.L18:
 2294              		.loc 1 77 0 is_stmt 0 discriminator 1
 2295 01a0 FEFFFFEB 		bl	ts_pressed
 2296 01a4 0030A0E1 		mov	r3, r0
 2297 01a8 000053E3 		cmp	r3, #0
 2298 01ac FBFFFF1A 		bne	.L18
  78:../src/ts.c   ****         sw_delay_ms( TS_UP_DELAY );
 2299              		.loc 1 78 0 is_stmt 1
 2300 01b0 6400A0E3 		mov	r0, #100
 2301 01b4 FEFFFFEB 		bl	sw_delay_ms
  79:../src/ts.c   **** 
  80:../src/ts.c   ****         //pinta cuadrado en la esquina inferior derecha
  81:../src/ts.c   ****         lcd_clear();
 2302              		.loc 1 81 0
 2303 01b8 FEFFFFEB 		bl	lcd_clear
  82:../src/ts.c   ****         lcd_puts(64, 128, BLACK, "Presione en la esquina inferior dch");
 2304              		.loc 1 82 0
 2305 01bc 4000A0E3 		mov	r0, #64
 2306 01c0 8010A0E3 		mov	r1, #128
 2307 01c4 0F20A0E3 		mov	r2, #15
 2308 01c8 08319FE5 		ldr	r3, .L22+16
 2309 01cc FEFFFFEB 		bl	lcd_puts
  83:../src/ts.c   ****         lcd_draw_box(319-5, 239-5, 319, 239, BLACK, 1);
 2310              		.loc 1 83 0
 2311 01d0 0F30A0E3 		mov	r3, #15
 2312 01d4 00308DE5 		str	r3, [sp, #0]
 2313 01d8 0130A0E3 		mov	r3, #1
 2314 01dc 04308DE5 		str	r3, [sp, #4]
 2315 01e0 F4009FE5 		ldr	r0, .L22+20
 2316 01e4 EA10A0E3 		mov	r1, #234
 2317 01e8 F0209FE5 		ldr	r2, .L22+24
 2318 01ec EF30A0E3 		mov	r3, #239
 2319 01f0 FEFFFFEB 		bl	lcd_draw_box
  84:../src/ts.c   ****            
  85:../src/ts.c   ****         while(!ts_pressed()); // esperamos a que se toque la pantalla
 2320              		.loc 1 85 0
 2321 01f4 0000A0E1 		mov	r0, r0	@ nop
 2322              	.L19:
 2323              		.loc 1 85 0 is_stmt 0 discriminator 1
 2324 01f8 FEFFFFEB 		bl	ts_pressed
 2325 01fc 0030A0E1 		mov	r3, r0
 2326 0200 000053E3 		cmp	r3, #0
 2327 0204 FBFFFF0A 		beq	.L19
  86:../src/ts.c   ****         sw_delay_ms( TS_DOWN_DELAY );
 2328              		.loc 1 86 0 is_stmt 1
 2329 0208 1E00A0E3 		mov	r0, #30
 2330 020c FEFFFFEB 		bl	sw_delay_ms
  87:../src/ts.c   ****         ts_scan( &Vxmax, &Vymin );
 2331              		.loc 1 87 0
 2332 0210 CC009FE5 		ldr	r0, .L22+28
 2333 0214 CC109FE5 		ldr	r1, .L22+32
 2334 0218 B50000EB 		bl	ts_scan
  88:../src/ts.c   ****         while( ts_pressed() ); // esperamos a ue se deje de tocar
 2335              		.loc 1 88 0
 2336 021c 0000A0E1 		mov	r0, r0	@ nop
 2337              	.L20:
 2338              		.loc 1 88 0 is_stmt 0 discriminator 1
 2339 0220 FEFFFFEB 		bl	ts_pressed
 2340 0224 0030A0E1 		mov	r3, r0
 2341 0228 000053E3 		cmp	r3, #0
 2342 022c FBFFFF1A 		bne	.L20
  89:../src/ts.c   ****         sw_delay_ms( TS_UP_DELAY );
 2343              		.loc 1 89 0 is_stmt 1
 2344 0230 6400A0E3 		mov	r0, #100
 2345 0234 FEFFFFEB 		bl	sw_delay_ms
  90:../src/ts.c   ****     
  91:../src/ts.c   ****         //pinta el cuadrado en el centro de la pantalla
  92:../src/ts.c   ****         lcd_clear();
 2346              		.loc 1 92 0
 2347 0238 FEFFFFEB 		bl	lcd_clear
  93:../src/ts.c   ****         lcd_puts(80, 128, BLACK, "Presione en el cuadrado del centro");
 2348              		.loc 1 93 0
 2349 023c 5000A0E3 		mov	r0, #80
 2350 0240 8010A0E3 		mov	r1, #128
 2351 0244 0F20A0E3 		mov	r2, #15
 2352 0248 9C309FE5 		ldr	r3, .L22+36
 2353 024c FEFFFFEB 		bl	lcd_puts
  94:../src/ts.c   ****         lcd_draw_box(158, 118, 163, 123, BLACK, 1);
 2354              		.loc 1 94 0
 2355 0250 0F30A0E3 		mov	r3, #15
 2356 0254 00308DE5 		str	r3, [sp, #0]
 2357 0258 0130A0E3 		mov	r3, #1
 2358 025c 04308DE5 		str	r3, [sp, #4]
 2359 0260 9E00A0E3 		mov	r0, #158
 2360 0264 7610A0E3 		mov	r1, #118
 2361 0268 A320A0E3 		mov	r2, #163
 2362 026c 7B30A0E3 		mov	r3, #123
 2363 0270 FEFFFFEB 		bl	lcd_draw_box
  95:../src/ts.c   **** 
  96:../src/ts.c   ****         ts_getpos( &x, &y );
 2364              		.loc 1 96 0
 2365 0274 0E204BE2 		sub	r2, fp, #14
 2366 0278 10304BE2 		sub	r3, fp, #16
 2367 027c 0200A0E1 		mov	r0, r2
 2368 0280 0310A0E1 		mov	r1, r3
 2369 0284 FEFFFFEB 		bl	ts_getpos
  97:../src/ts.c   **** 
  98:../src/ts.c   ****     } while( (x > LCD_WIDTH/2+PX_ERROR) || (x < LCD_WIDTH/2-PX_ERROR) || (y > LCD_HEIGHT/2+PX_ERROR
 2370              		.loc 1 98 0
 2371 0288 BE305BE1 		ldrh	r3, [fp, #-14]
 2372 028c AA0053E3 		cmp	r3, #170
 2373 0290 A0FFFF8A 		bhi	.L21
 2374              		.loc 1 98 0 is_stmt 0 discriminator 1
 2375 0294 BE305BE1 		ldrh	r3, [fp, #-14]
 2376 0298 950053E3 		cmp	r3, #149
 2377 029c 9DFFFF9A 		bls	.L21
 2378 02a0 B0315BE1 		ldrh	r3, [fp, #-16]
 2379 02a4 820053E3 		cmp	r3, #130
 2380 02a8 9AFFFF8A 		bhi	.L21
 2381 02ac B0315BE1 		ldrh	r3, [fp, #-16]
 2382 02b0 6D0053E3 		cmp	r3, #109
 2383 02b4 97FFFF9A 		bls	.L21
  99:../src/ts.c   ****     lcd_clear();
 2384              		.loc 1 99 0 is_stmt 1
 2385 02b8 FEFFFFEB 		bl	lcd_clear
 100:../src/ts.c   **** }
 2386              		.loc 1 100 0
 2387 02bc 0CD04BE2 		sub	sp, fp, #12
 2388 02c0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2389 02c4 1EFF2FE1 		bx	lr
 2390              	.L23:
 2391              		.align	2
 2392              	.L22:
 2393 02c8 00000000 		.word	.LC0
 2394 02cc 14000000 		.word	.LC1
 2395 02d0 00000000 		.word	Vxmin
 2396 02d4 06000000 		.word	Vymax
 2397 02d8 38000000 		.word	.LC2
 2398 02dc 3A010000 		.word	314
 2399 02e0 3F010000 		.word	319
 2400 02e4 02000000 		.word	Vxmax
 2401 02e8 04000000 		.word	Vymin
 2402 02ec 5C000000 		.word	.LC3
 2403              		.cfi_endproc
 2404              	.LFE5:
 2406              		.align	2
 2407              		.global	ts_getpos
 2409              	ts_getpos:
 2410              	.LFB6:
 101:../src/ts.c   **** 
 102:../src/ts.c   **** void ts_getpos( uint16 *x, uint16 *y )
 103:../src/ts.c   **** {
 2411              		.loc 1 103 0
 2412              		.cfi_startproc
 2413              		@ Function supports interworking.
 2414              		@ args = 0, pretend = 0, frame = 16
 2415              		@ frame_needed = 1, uses_anonymous_args = 0
 2416 02f0 0DC0A0E1 		mov	ip, sp
 2417              	.LCFI12:
 2418              		.cfi_def_cfa_register 12
 2419 02f4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2420 02f8 04B04CE2 		sub	fp, ip, #4
 2421              		.cfi_offset 14, -8
 2422              		.cfi_offset 13, -12
 2423              		.cfi_offset 11, -16
 2424              	.LCFI13:
 2425              		.cfi_def_cfa 11, 4
 2426 02fc 10D04DE2 		sub	sp, sp, #16
 2427 0300 18000BE5 		str	r0, [fp, #-24]
 2428 0304 1C100BE5 		str	r1, [fp, #-28]
 104:../src/ts.c   ****     uint16 Vx, Vy;
 105:../src/ts.c   ****     while ( !ts_pressed() );
 2429              		.loc 1 105 0
 2430 0308 0000A0E1 		mov	r0, r0	@ nop
 2431              	.L25:
 2432              		.loc 1 105 0 is_stmt 0 discriminator 1
 2433 030c FEFFFFEB 		bl	ts_pressed
 2434 0310 0030A0E1 		mov	r3, r0
 2435 0314 000053E3 		cmp	r3, #0
 2436 0318 FBFFFF0A 		beq	.L25
 106:../src/ts.c   ****     sw_delay_ms( TS_DOWN_DELAY );
 2437              		.loc 1 106 0 is_stmt 1
 2438 031c 1E00A0E3 		mov	r0, #30
 2439 0320 FEFFFFEB 		bl	sw_delay_ms
 107:../src/ts.c   ****     ts_scan( &Vx, &Vy );
 2440              		.loc 1 107 0
 2441 0324 0E204BE2 		sub	r2, fp, #14
 2442 0328 10304BE2 		sub	r3, fp, #16
 2443 032c 0200A0E1 		mov	r0, r2
 2444 0330 0310A0E1 		mov	r1, r3
 2445 0334 6E0000EB 		bl	ts_scan
 108:../src/ts.c   ****     while ( ts_pressed() );
 2446              		.loc 1 108 0
 2447 0338 0000A0E1 		mov	r0, r0	@ nop
 2448              	.L26:
 2449              		.loc 1 108 0 is_stmt 0 discriminator 1
 2450 033c FEFFFFEB 		bl	ts_pressed
 2451 0340 0030A0E1 		mov	r3, r0
 2452 0344 000053E3 		cmp	r3, #0
 2453 0348 FBFFFF1A 		bne	.L26
 109:../src/ts.c   ****     sw_delay_ms( TS_UP_DELAY );
 2454              		.loc 1 109 0 is_stmt 1
 2455 034c 6400A0E3 		mov	r0, #100
 2456 0350 FEFFFFEB 		bl	sw_delay_ms
 110:../src/ts.c   ****     ts_sample2coord( Vx, Vy, x, y );
 2457              		.loc 1 110 0
 2458 0354 BE205BE1 		ldrh	r2, [fp, #-14]
 2459 0358 B0315BE1 		ldrh	r3, [fp, #-16]
 2460 035c 0200A0E1 		mov	r0, r2
 2461 0360 0310A0E1 		mov	r1, r3
 2462 0364 18201BE5 		ldr	r2, [fp, #-24]
 2463 0368 1C301BE5 		ldr	r3, [fp, #-28]
 2464 036c 810000EB 		bl	ts_sample2coord
 111:../src/ts.c   **** }
 2465              		.loc 1 111 0
 2466 0370 0CD04BE2 		sub	sp, fp, #12
 2467 0374 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2468 0378 1EFF2FE1 		bx	lr
 2469              		.cfi_endproc
 2470              	.LFE6:
 2472              		.align	2
 2473              		.global	ts_getpostime
 2475              	ts_getpostime:
 2476              	.LFB7:
 112:../src/ts.c   **** 
 113:../src/ts.c   **** void ts_getpostime( uint16 *x, uint16 *y, uint16 *ms )
 114:../src/ts.c   **** {
 2477              		.loc 1 114 0
 2478              		.cfi_startproc
 2479              		@ Function supports interworking.
 2480              		@ args = 0, pretend = 0, frame = 24
 2481              		@ frame_needed = 1, uses_anonymous_args = 0
 2482 037c 0DC0A0E1 		mov	ip, sp
 2483              	.LCFI14:
 2484              		.cfi_def_cfa_register 12
 2485 0380 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2486 0384 04B04CE2 		sub	fp, ip, #4
 2487              		.cfi_offset 14, -8
 2488              		.cfi_offset 13, -12
 2489              		.cfi_offset 11, -16
 2490              	.LCFI15:
 2491              		.cfi_def_cfa 11, 4
 2492 0388 18D04DE2 		sub	sp, sp, #24
 2493 038c 18000BE5 		str	r0, [fp, #-24]
 2494 0390 1C100BE5 		str	r1, [fp, #-28]
 2495 0394 20200BE5 		str	r2, [fp, #-32]
 115:../src/ts.c   ****     uint16 Vx, Vy;
 116:../src/ts.c   ****     while ( !ts_pressed() );
 2496              		.loc 1 116 0
 2497 0398 0000A0E1 		mov	r0, r0	@ nop
 2498              	.L28:
 2499              		.loc 1 116 0 is_stmt 0 discriminator 1
 2500 039c FEFFFFEB 		bl	ts_pressed
 2501 03a0 0030A0E1 		mov	r3, r0
 2502 03a4 000053E3 		cmp	r3, #0
 2503 03a8 FBFFFF0A 		beq	.L28
 117:../src/ts.c   ****     timer3_start();
 2504              		.loc 1 117 0 is_stmt 1
 2505 03ac FEFFFFEB 		bl	timer3_start
 118:../src/ts.c   ****     sw_delay_ms( TS_DOWN_DELAY );
 2506              		.loc 1 118 0
 2507 03b0 1E00A0E3 		mov	r0, #30
 2508 03b4 FEFFFFEB 		bl	sw_delay_ms
 119:../src/ts.c   ****     ts_scan( &Vx, &Vy );
 2509              		.loc 1 119 0
 2510 03b8 0E204BE2 		sub	r2, fp, #14
 2511 03bc 10304BE2 		sub	r3, fp, #16
 2512 03c0 0200A0E1 		mov	r0, r2
 2513 03c4 0310A0E1 		mov	r1, r3
 2514 03c8 490000EB 		bl	ts_scan
 120:../src/ts.c   **** 
 121:../src/ts.c   ****     while ( ts_pressed() );
 2515              		.loc 1 121 0
 2516 03cc 0000A0E1 		mov	r0, r0	@ nop
 2517              	.L29:
 2518              		.loc 1 121 0 is_stmt 0 discriminator 1
 2519 03d0 FEFFFFEB 		bl	ts_pressed
 2520 03d4 0030A0E1 		mov	r3, r0
 2521 03d8 000053E3 		cmp	r3, #0
 2522 03dc FBFFFF1A 		bne	.L29
 122:../src/ts.c   ****     *ms = timer3_stop() / 10;
 2523              		.loc 1 122 0 is_stmt 1
 2524 03e0 FEFFFFEB 		bl	timer3_stop
 2525 03e4 0030A0E1 		mov	r3, r0
 2526 03e8 0320A0E1 		mov	r2, r3
 2527 03ec 44309FE5 		ldr	r3, .L30
 2528 03f0 921383E0 		umull	r1, r3, r2, r3
 2529 03f4 A331A0E1 		mov	r3, r3, lsr #3
 2530 03f8 0338A0E1 		mov	r3, r3, asl #16
 2531 03fc 2328A0E1 		mov	r2, r3, lsr #16
 2532 0400 20301BE5 		ldr	r3, [fp, #-32]
 2533 0404 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 123:../src/ts.c   ****     sw_delay_ms( TS_UP_DELAY );
 2534              		.loc 1 123 0
 2535 0408 6400A0E3 		mov	r0, #100
 2536 040c FEFFFFEB 		bl	sw_delay_ms
 124:../src/ts.c   ****     ts_sample2coord( Vx, Vy, x, y );
 2537              		.loc 1 124 0
 2538 0410 BE205BE1 		ldrh	r2, [fp, #-14]
 2539 0414 B0315BE1 		ldrh	r3, [fp, #-16]
 2540 0418 0200A0E1 		mov	r0, r2
 2541 041c 0310A0E1 		mov	r1, r3
 2542 0420 18201BE5 		ldr	r2, [fp, #-24]
 2543 0424 1C301BE5 		ldr	r3, [fp, #-28]
 2544 0428 520000EB 		bl	ts_sample2coord
 125:../src/ts.c   **** }
 2545              		.loc 1 125 0
 2546 042c 0CD04BE2 		sub	sp, fp, #12
 2547 0430 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2548 0434 1EFF2FE1 		bx	lr
 2549              	.L31:
 2550              		.align	2
 2551              	.L30:
 2552 0438 CDCCCCCC 		.word	-858993459
 2553              		.cfi_endproc
 2554              	.LFE7:
 2556              		.align	2
 2557              		.global	ts_timeout_getpos
 2559              	ts_timeout_getpos:
 2560              	.LFB8:
 126:../src/ts.c   **** 
 127:../src/ts.c   **** uint8 ts_timeout_getpos( uint16 *x, uint16 *y, uint16 ms )
 128:../src/ts.c   **** {
 2561              		.loc 1 128 0
 2562              		.cfi_startproc
 2563              		@ Function supports interworking.
 2564              		@ args = 0, pretend = 0, frame = 24
 2565              		@ frame_needed = 1, uses_anonymous_args = 0
 2566 043c 0DC0A0E1 		mov	ip, sp
 2567              	.LCFI16:
 2568              		.cfi_def_cfa_register 12
 2569 0440 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2570 0444 04B04CE2 		sub	fp, ip, #4
 2571              		.cfi_offset 14, -8
 2572              		.cfi_offset 13, -12
 2573              		.cfi_offset 11, -16
 2574              	.LCFI17:
 2575              		.cfi_def_cfa 11, 4
 2576 0448 18D04DE2 		sub	sp, sp, #24
 2577 044c 18000BE5 		str	r0, [fp, #-24]
 2578 0450 1C100BE5 		str	r1, [fp, #-28]
 2579 0454 0230A0E1 		mov	r3, r2
 2580 0458 BE314BE1 		strh	r3, [fp, #-30]	@ movhi
 129:../src/ts.c   ****     uint16 Vx, Vy;
 130:../src/ts.c   ****     timer3_start();
 2581              		.loc 1 130 0
 2582 045c FEFFFFEB 		bl	timer3_start
 131:../src/ts.c   ****     while ( !ts_pressed() )
 2583              		.loc 1 131 0
 2584 0460 050000EA 		b	.L33
 2585              	.L35:
 132:../src/ts.c   ****     {
 133:../src/ts.c   ****         if (timer3_timeout())
 2586              		.loc 1 133 0
 2587 0464 FEFFFFEB 		bl	timer3_timeout
 2588 0468 0030A0E1 		mov	r3, r0
 2589 046c 000053E3 		cmp	r3, #0
 2590 0470 0100000A 		beq	.L33
 134:../src/ts.c   ****             return TS_TIMEOUT;
 2591              		.loc 1 134 0
 2592 0474 FE30A0E3 		mov	r3, #254
 2593 0478 190000EA 		b	.L34
 2594              	.L33:
 131:../src/ts.c   ****     while ( !ts_pressed() )
 2595              		.loc 1 131 0 discriminator 1
 2596 047c FEFFFFEB 		bl	ts_pressed
 2597 0480 0030A0E1 		mov	r3, r0
 2598 0484 000053E3 		cmp	r3, #0
 2599 0488 F5FFFF0A 		beq	.L35
 135:../src/ts.c   ****     }
 136:../src/ts.c   ****     sw_delay_ms( TS_DOWN_DELAY );
 2600              		.loc 1 136 0
 2601 048c 1E00A0E3 		mov	r0, #30
 2602 0490 FEFFFFEB 		bl	sw_delay_ms
 137:../src/ts.c   ****     ts_scan( &Vx, &Vy );
 2603              		.loc 1 137 0
 2604 0494 0E204BE2 		sub	r2, fp, #14
 2605 0498 10304BE2 		sub	r3, fp, #16
 2606 049c 0200A0E1 		mov	r0, r2
 2607 04a0 0310A0E1 		mov	r1, r3
 2608 04a4 120000EB 		bl	ts_scan
 138:../src/ts.c   ****     while ( ts_pressed() );
 2609              		.loc 1 138 0
 2610 04a8 0000A0E1 		mov	r0, r0	@ nop
 2611              	.L36:
 2612              		.loc 1 138 0 is_stmt 0 discriminator 1
 2613 04ac FEFFFFEB 		bl	ts_pressed
 2614 04b0 0030A0E1 		mov	r3, r0
 2615 04b4 000053E3 		cmp	r3, #0
 2616 04b8 FBFFFF1A 		bne	.L36
 139:../src/ts.c   ****     sw_delay_ms( TS_UP_DELAY );
 2617              		.loc 1 139 0 is_stmt 1
 2618 04bc 6400A0E3 		mov	r0, #100
 2619 04c0 FEFFFFEB 		bl	sw_delay_ms
 140:../src/ts.c   ****     ts_sample2coord( Vx, Vy, x, y );
 2620              		.loc 1 140 0
 2621 04c4 BE205BE1 		ldrh	r2, [fp, #-14]
 2622 04c8 B0315BE1 		ldrh	r3, [fp, #-16]
 2623 04cc 0200A0E1 		mov	r0, r2
 2624 04d0 0310A0E1 		mov	r1, r3
 2625 04d4 18201BE5 		ldr	r2, [fp, #-24]
 2626 04d8 1C301BE5 		ldr	r3, [fp, #-28]
 2627 04dc 250000EB 		bl	ts_sample2coord
 141:../src/ts.c   ****     return TS_OK;
 2628              		.loc 1 141 0
 2629 04e0 0130A0E3 		mov	r3, #1
 2630              	.L34:
 142:../src/ts.c   **** }
 2631              		.loc 1 142 0
 2632 04e4 0300A0E1 		mov	r0, r3
 2633 04e8 0CD04BE2 		sub	sp, fp, #12
 2634 04ec 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2635 04f0 1EFF2FE1 		bx	lr
 2636              		.cfi_endproc
 2637              	.LFE8:
 2639              		.align	2
 2641              	ts_scan:
 2642              	.LFB9:
 143:../src/ts.c   **** 
 144:../src/ts.c   **** static void ts_scan( uint16 *Vx, uint16 *Vy )
 145:../src/ts.c   **** {
 2643              		.loc 1 145 0
 2644              		.cfi_startproc
 2645              		@ Function supports interworking.
 2646              		@ args = 0, pretend = 0, frame = 8
 2647              		@ frame_needed = 1, uses_anonymous_args = 0
 2648 04f4 0DC0A0E1 		mov	ip, sp
 2649              	.LCFI18:
 2650              		.cfi_def_cfa_register 12
 2651 04f8 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2652 04fc 04B04CE2 		sub	fp, ip, #4
 2653              		.cfi_offset 14, -8
 2654              		.cfi_offset 13, -12
 2655              		.cfi_offset 11, -16
 2656              	.LCFI19:
 2657              		.cfi_def_cfa 11, 4
 2658 0500 08D04DE2 		sub	sp, sp, #8
 2659 0504 10000BE5 		str	r0, [fp, #-16]
 2660 0508 14100BE5 		str	r1, [fp, #-20]
 146:../src/ts.c   ****     PDATE = (0 << 4) | (1 << 5) | (1 << 6) | (0 << 7); // X- tierra, X+ VDD, resto abiertos
 2661              		.loc 1 146 0
 2662 050c 60309FE5 		ldr	r3, .L38
 2663 0510 6020A0E3 		mov	r2, #96
 2664 0514 002083E5 		str	r2, [r3, #0]
 147:../src/ts.c   ****     *Vx = adc_getSample(1);
 2665              		.loc 1 147 0
 2666 0518 0100A0E3 		mov	r0, #1
 2667 051c FEFFFFEB 		bl	adc_getSample
 2668 0520 0030A0E1 		mov	r3, r0
 2669 0524 0320A0E1 		mov	r2, r3
 2670 0528 10301BE5 		ldr	r3, [fp, #-16]
 2671 052c B020C3E1 		strh	r2, [r3, #0]	@ movhi
 148:../src/ts.c   ****     
 149:../src/ts.c   ****     PDATE = (1 << 4) | (0 << 5) | (0 << 6) | (1 << 7); // Y- tierra, Y+ VDD, resto abiertos
 2672              		.loc 1 149 0
 2673 0530 3C309FE5 		ldr	r3, .L38
 2674 0534 9020A0E3 		mov	r2, #144
 2675 0538 002083E5 		str	r2, [r3, #0]
 150:../src/ts.c   ****     *Vy = adc_getSample(0);
 2676              		.loc 1 150 0
 2677 053c 0000A0E3 		mov	r0, #0
 2678 0540 FEFFFFEB 		bl	adc_getSample
 2679 0544 0030A0E1 		mov	r3, r0
 2680 0548 0320A0E1 		mov	r2, r3
 2681 054c 14301BE5 		ldr	r3, [fp, #-20]
 2682 0550 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 151:../src/ts.c   ****     
 152:../src/ts.c   ****     PDATE = (1 << 4) | (1 << 5) | (0 << 6) | (1 << 7); // Y- tierra, resto abiertos
 2683              		.loc 1 152 0
 2684 0554 18309FE5 		ldr	r3, .L38
 2685 0558 B020A0E3 		mov	r2, #176
 2686 055c 002083E5 		str	r2, [r3, #0]
 153:../src/ts.c   ****     sw_delay_ms( 1 );
 2687              		.loc 1 153 0
 2688 0560 0100A0E3 		mov	r0, #1
 2689 0564 FEFFFFEB 		bl	sw_delay_ms
 154:../src/ts.c   **** }
 2690              		.loc 1 154 0
 2691 0568 0CD04BE2 		sub	sp, fp, #12
 2692 056c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2693 0570 1EFF2FE1 		bx	lr
 2694              	.L39:
 2695              		.align	2
 2696              	.L38:
 2697 0574 2C00D201 		.word	30539820
 2698              		.cfi_endproc
 2699              	.LFE9:
 2701              		.global	__aeabi_idiv
 2702              		.align	2
 2704              	ts_sample2coord:
 2705              	.LFB10:
 155:../src/ts.c   **** 
 156:../src/ts.c   **** static void ts_sample2coord( uint16 Vx, uint16 Vy, uint16 *x, uint16 *y )
 157:../src/ts.c   **** {
 2706              		.loc 1 157 0
 2707              		.cfi_startproc
 2708              		@ Function supports interworking.
 2709              		@ args = 0, pretend = 0, frame = 16
 2710              		@ frame_needed = 1, uses_anonymous_args = 0
 2711 0578 0DC0A0E1 		mov	ip, sp
 2712              	.LCFI20:
 2713              		.cfi_def_cfa_register 12
 2714 057c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2715 0580 04B04CE2 		sub	fp, ip, #4
 2716              		.cfi_offset 14, -8
 2717              		.cfi_offset 13, -12
 2718              		.cfi_offset 11, -16
 2719              	.LCFI21:
 2720              		.cfi_def_cfa 11, 4
 2721 0584 10D04DE2 		sub	sp, sp, #16
 2722 0588 14200BE5 		str	r2, [fp, #-20]
 2723 058c 18300BE5 		str	r3, [fp, #-24]
 2724 0590 BE004BE1 		strh	r0, [fp, #-14]	@ movhi
 2725 0594 B0114BE1 		strh	r1, [fp, #-16]	@ movhi
 158:../src/ts.c   ****     if( Vx < Vxmin )
 2726              		.loc 1 158 0
 2727 0598 50319FE5 		ldr	r3, .L47
 2728 059c B030D3E1 		ldrh	r3, [r3, #0]
 2729 05a0 BE205BE1 		ldrh	r2, [fp, #-14]
 2730 05a4 030052E1 		cmp	r2, r3
 2731 05a8 0300002A 		bcs	.L41
 159:../src/ts.c   ****         *x = 0;
 2732              		.loc 1 159 0
 2733 05ac 14301BE5 		ldr	r3, [fp, #-20]
 2734 05b0 0020A0E3 		mov	r2, #0
 2735 05b4 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 2736 05b8 1F0000EA 		b	.L42
 2737              	.L41:
 160:../src/ts.c   ****     else if( Vx > Vxmax )
 2738              		.loc 1 160 0
 2739 05bc 30319FE5 		ldr	r3, .L47+4
 2740 05c0 B030D3E1 		ldrh	r3, [r3, #0]
 2741 05c4 BE205BE1 		ldrh	r2, [fp, #-14]
 2742 05c8 030052E1 		cmp	r2, r3
 2743 05cc 0300009A 		bls	.L43
 161:../src/ts.c   ****         *x = LCD_WIDTH-1;
 2744              		.loc 1 161 0
 2745 05d0 14301BE5 		ldr	r3, [fp, #-20]
 2746 05d4 1C219FE5 		ldr	r2, .L47+8
 2747 05d8 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 2748 05dc 160000EA 		b	.L42
 2749              	.L43:
 162:../src/ts.c   ****     else 
 163:../src/ts.c   ****         *x = LCD_WIDTH*(Vx-Vxmin) / (Vxmax-Vxmin);
 2750              		.loc 1 163 0
 2751 05e0 BE205BE1 		ldrh	r2, [fp, #-14]
 2752 05e4 04319FE5 		ldr	r3, .L47
 2753 05e8 B030D3E1 		ldrh	r3, [r3, #0]
 2754 05ec 022063E0 		rsb	r2, r3, r2
 2755 05f0 0230A0E1 		mov	r3, r2
 2756 05f4 0331A0E1 		mov	r3, r3, asl #2
 2757 05f8 023083E0 		add	r3, r3, r2
 2758 05fc 0333A0E1 		mov	r3, r3, asl #6
 2759 0600 0320A0E1 		mov	r2, r3
 2760 0604 E8309FE5 		ldr	r3, .L47+4
 2761 0608 B030D3E1 		ldrh	r3, [r3, #0]
 2762 060c 0310A0E1 		mov	r1, r3
 2763 0610 D8309FE5 		ldr	r3, .L47
 2764 0614 B030D3E1 		ldrh	r3, [r3, #0]
 2765 0618 013063E0 		rsb	r3, r3, r1
 2766 061c 0200A0E1 		mov	r0, r2
 2767 0620 0310A0E1 		mov	r1, r3
 2768 0624 FEFFFFEB 		bl	__aeabi_idiv
 2769 0628 0030A0E1 		mov	r3, r0
 2770 062c 0338A0E1 		mov	r3, r3, asl #16
 2771 0630 2328A0E1 		mov	r2, r3, lsr #16
 2772 0634 14301BE5 		ldr	r3, [fp, #-20]
 2773 0638 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 2774              	.L42:
 164:../src/ts.c   **** 
 165:../src/ts.c   ****     if( Vy < Vymin )
 2775              		.loc 1 165 0
 2776 063c B8309FE5 		ldr	r3, .L47+12
 2777 0640 B030D3E1 		ldrh	r3, [r3, #0]
 2778 0644 B0215BE1 		ldrh	r2, [fp, #-16]
 2779 0648 030052E1 		cmp	r2, r3
 2780 064c 0300002A 		bcs	.L44
 166:../src/ts.c   ****         *y = LCD_HEIGHT-1;
 2781              		.loc 1 166 0
 2782 0650 18301BE5 		ldr	r3, [fp, #-24]
 2783 0654 EF20A0E3 		mov	r2, #239
 2784 0658 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 2785 065c 200000EA 		b	.L40
 2786              	.L44:
 167:../src/ts.c   ****     else if( Vy > Vymax )
 2787              		.loc 1 167 0
 2788 0660 98309FE5 		ldr	r3, .L47+16
 2789 0664 B030D3E1 		ldrh	r3, [r3, #0]
 2790 0668 B0215BE1 		ldrh	r2, [fp, #-16]
 2791 066c 030052E1 		cmp	r2, r3
 2792 0670 0300009A 		bls	.L46
 168:../src/ts.c   ****         *y = 0;
 2793              		.loc 1 168 0
 2794 0674 18301BE5 		ldr	r3, [fp, #-24]
 2795 0678 0020A0E3 		mov	r2, #0
 2796 067c B020C3E1 		strh	r2, [r3, #0]	@ movhi
 2797 0680 170000EA 		b	.L40
 2798              	.L46:
 169:../src/ts.c   ****     else
 170:../src/ts.c   ****         *y = LCD_HEIGHT*(Vymax - Vy) / (Vymax-Vymin);
 2799              		.loc 1 170 0
 2800 0684 74309FE5 		ldr	r3, .L47+16
 2801 0688 B030D3E1 		ldrh	r3, [r3, #0]
 2802 068c 0320A0E1 		mov	r2, r3
 2803 0690 B0315BE1 		ldrh	r3, [fp, #-16]
 2804 0694 022063E0 		rsb	r2, r3, r2
 2805 0698 0230A0E1 		mov	r3, r2
 2806 069c 0332A0E1 		mov	r3, r3, asl #4
 2807 06a0 033062E0 		rsb	r3, r2, r3
 2808 06a4 0332A0E1 		mov	r3, r3, asl #4
 2809 06a8 0320A0E1 		mov	r2, r3
 2810 06ac 4C309FE5 		ldr	r3, .L47+16
 2811 06b0 B030D3E1 		ldrh	r3, [r3, #0]
 2812 06b4 0310A0E1 		mov	r1, r3
 2813 06b8 3C309FE5 		ldr	r3, .L47+12
 2814 06bc B030D3E1 		ldrh	r3, [r3, #0]
 2815 06c0 013063E0 		rsb	r3, r3, r1
 2816 06c4 0200A0E1 		mov	r0, r2
 2817 06c8 0310A0E1 		mov	r1, r3
 2818 06cc FEFFFFEB 		bl	__aeabi_idiv
 2819 06d0 0030A0E1 		mov	r3, r0
 2820 06d4 0338A0E1 		mov	r3, r3, asl #16
 2821 06d8 2328A0E1 		mov	r2, r3, lsr #16
 2822 06dc 18301BE5 		ldr	r3, [fp, #-24]
 2823 06e0 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 2824              	.L40:
 171:../src/ts.c   **** }
 2825              		.loc 1 171 0
 2826 06e4 0CD04BE2 		sub	sp, fp, #12
 2827 06e8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2828 06ec 1EFF2FE1 		bx	lr
 2829              	.L48:
 2830              		.align	2
 2831              	.L47:
 2832 06f0 00000000 		.word	Vxmin
 2833 06f4 02000000 		.word	Vxmax
 2834 06f8 3F010000 		.word	319
 2835 06fc 04000000 		.word	Vymin
 2836 0700 06000000 		.word	Vymax
 2837              		.cfi_endproc
 2838              	.LFE10:
 2840              		.align	2
 2841              		.global	ts_open
 2843              	ts_open:
 2844              	.LFB11:
 172:../src/ts.c   **** 
 173:../src/ts.c   **** void ts_open( void (*isr)(void) )
 174:../src/ts.c   **** {
 2845              		.loc 1 174 0
 2846              		.cfi_startproc
 2847              		@ Function supports interworking.
 2848              		@ args = 0, pretend = 0, frame = 8
 2849              		@ frame_needed = 1, uses_anonymous_args = 0
 2850 0704 0DC0A0E1 		mov	ip, sp
 2851              	.LCFI22:
 2852              		.cfi_def_cfa_register 12
 2853 0708 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2854 070c 04B04CE2 		sub	fp, ip, #4
 2855              		.cfi_offset 14, -8
 2856              		.cfi_offset 13, -12
 2857              		.cfi_offset 11, -16
 2858              	.LCFI23:
 2859              		.cfi_def_cfa 11, 4
 2860 0710 08D04DE2 		sub	sp, sp, #8
 2861 0714 10000BE5 		str	r0, [fp, #-16]
 175:../src/ts.c   ****     pISR_TS = (uint32)isr;
 2862              		.loc 1 175 0
 2863 0718 38309FE5 		ldr	r3, .L50
 2864 071c 10201BE5 		ldr	r2, [fp, #-16]
 2865 0720 002083E5 		str	r2, [r3, #0]
 176:../src/ts.c   ****     INTPND &= ~(BIT_EINT2);
 2866              		.loc 1 176 0
 2867 0724 30309FE5 		ldr	r3, .L50+4
 2868 0728 2C209FE5 		ldr	r2, .L50+4
 2869 072c 002092E5 		ldr	r2, [r2, #0]
 2870 0730 0225C2E3 		bic	r2, r2, #8388608
 2871 0734 002083E5 		str	r2, [r3, #0]
 177:../src/ts.c   ****     INTMSK &= ~(BIT_GLOBAL | BIT_EINT2);
 2872              		.loc 1 177 0
 2873 0738 20309FE5 		ldr	r3, .L50+8
 2874 073c 1C209FE5 		ldr	r2, .L50+8
 2875 0740 002092E5 		ldr	r2, [r2, #0]
 2876 0744 1225C2E3 		bic	r2, r2, #75497472
 2877 0748 002083E5 		str	r2, [r3, #0]
 178:../src/ts.c   **** }
 2878              		.loc 1 178 0
 2879 074c 0CD04BE2 		sub	sp, fp, #12
 2880 0750 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2881 0754 1EFF2FE1 		bx	lr
 2882              	.L51:
 2883              		.align	2
 2884              	.L50:
 2885 0758 7CFF7F0C 		.word	209715068
 2886 075c 0400E001 		.word	31457284
 2887 0760 0C00E001 		.word	31457292
 2888              		.cfi_endproc
 2889              	.LFE11:
 2891              		.align	2
 2892              		.global	ts_close
 2894              	ts_close:
 2895              	.LFB12:
 179:../src/ts.c   **** 
 180:../src/ts.c   **** void ts_close( void )
 181:../src/ts.c   **** {
 2896              		.loc 1 181 0
 2897              		.cfi_startproc
 2898              		@ Function supports interworking.
 2899              		@ args = 0, pretend = 0, frame = 0
 2900              		@ frame_needed = 1, uses_anonymous_args = 0
 2901 0764 0DC0A0E1 		mov	ip, sp
 2902              	.LCFI24:
 2903              		.cfi_def_cfa_register 12
 2904 0768 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2905 076c 04B04CE2 		sub	fp, ip, #4
 2906              		.cfi_offset 14, -8
 2907              		.cfi_offset 13, -12
 2908              		.cfi_offset 11, -16
 2909              	.LCFI25:
 2910              		.cfi_def_cfa 11, 4
 182:../src/ts.c   ****     INTMSK |= BIT_EINT2;
 2911              		.loc 1 182 0
 2912 0770 24309FE5 		ldr	r3, .L53
 2913 0774 20209FE5 		ldr	r2, .L53
 2914 0778 002092E5 		ldr	r2, [r2, #0]
 2915 077c 022582E3 		orr	r2, r2, #8388608
 2916 0780 002083E5 		str	r2, [r3, #0]
 183:../src/ts.c   ****     pISR_TS = (uint32)isr_TS_dummy;
 2917              		.loc 1 183 0
 2918 0784 14309FE5 		ldr	r3, .L53+4
 2919 0788 14209FE5 		ldr	r2, .L53+8
 2920 078c 002083E5 		str	r2, [r3, #0]
 184:../src/ts.c   **** }
 2921              		.loc 1 184 0
 2922 0790 0CD04BE2 		sub	sp, fp, #12
 2923 0794 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2924 0798 1EFF2FE1 		bx	lr
 2925              	.L54:
 2926              		.align	2
 2927              	.L53:
 2928 079c 0C00E001 		.word	31457292
 2929 07a0 7CFF7F0C 		.word	209715068
 2930 07a4 00000000 		.word	isr_TS_dummy
 2931              		.cfi_endproc
 2932              	.LFE12:
 2934              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 ts.c
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:1996   .bss:00000000 $d
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:1997   .bss:00000000 Vxmin
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2000   .bss:00000002 Vxmax
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2003   .bss:00000004 Vymin
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2006   .bss:00000006 Vymax
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2008   .bss:00000008 state
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2011   .text:00000000 $a
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2014   .text:00000000 ts_init
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2064   .text:00000048 ts_on
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2226   .text:00000104 ts_calibrate
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2101   .text:00000074 ts_off
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2057   .text:00000044 $d
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2061   .text:00000048 $a
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2094   .text:00000070 $d
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2098   .text:00000074 $a
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2131   .text:0000009c $d
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2135   .text:000000a0 $a
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2138   .text:000000a0 ts_status
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2166   .text:000000c4 $d
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2170   .text:000000c8 $a
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2173   .text:000000c8 ts_pressed
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2206   .text:00000100 $d
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2211   .rodata:00000000 $d
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2224   .text:00000104 $a
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2641   .text:000004f4 ts_scan
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2409   .text:000002f0 ts_getpos
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2393   .text:000002c8 $d
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2406   .text:000002f0 $a
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2704   .text:00000578 ts_sample2coord
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2475   .text:0000037c ts_getpostime
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2552   .text:00000438 $d
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2556   .text:0000043c $a
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2559   .text:0000043c ts_timeout_getpos
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2697   .text:00000574 $d
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2702   .text:00000578 $a
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2832   .text:000006f0 $d
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2840   .text:00000704 $a
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2843   .text:00000704 ts_open
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2885   .text:00000758 $d
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2891   .text:00000764 $a
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2894   .text:00000764 ts_close
C:\Users\marco\AppData\Local\Temp\cc7N1MJc.s:2928   .text:0000079c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
timers_init
lcd_init
adc_init
sw_delay_ms
adc_on
adc_off
lcd_on
lcd_clear
lcd_puts
sw_delay_s
lcd_draw_box
timer3_start
timer3_stop
timer3_timeout
adc_getSample
__aeabi_idiv
isr_TS_dummy
